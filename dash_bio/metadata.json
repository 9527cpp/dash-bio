{
  "src/lib/components/AlignmentChart.react.js": {
    "description": "The Alignment Viewer (MSA) component is used to align multiple genomic\nor proteomic sequences from a FASTA or Clustal file. Among its\nextensive set of features, the multiple sequence alignment viewer\ncan display multiple subplots showing gap and conservation info,\nalongside industry standard colorscale support and consensus sequence.\nNo matter what size your alignment is, Aligment Viewer is able to display\nyour genes or proteins snappily thanks to the underlying WebGL architecture\npowering the component. You can quickly scroll through your long sequence\nwith a slider or a heatmap overview.\nNote that the AlignmentChart only returns a chart of the sequence, while\nAlignmentViewer has integrated controls for colorscale, heatmaps, and subplots\nallowing the user to interactively control their sequences.\nRead more about the component here:\nhttps://github.com/plotly/react-alignment-viewer",
    "displayName": "AlignmentChart",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change."
      },
      "eventDatum": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A Dash prop that returns data on clicking, hovering or resizing the viewer."
      },
      "data": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input data, either in FASTA or Clustal format."
      },
      "extension": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Format type of the input data, either in FASTA or Clustal.",
        "defaultValue": {
          "value": "'fasta'",
          "computed": false
        }
      },
      "colorscale": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Colorscale in 'buried', 'cinema', 'clustal', 'clustal2', 'helix', 'hydrophobicity'\n'lesk', 'mae', 'nucleotide', 'purine', 'strand', 'taylor', 'turn', 'zappo',\nor your own colorscale as a {'nucleotide': COLOR} dict.\nNote that this is NOT a standard plotly colorscale.",
        "defaultValue": {
          "value": "'clustal2'",
          "computed": false
        }
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Opacity of the main plot as a value between 0 and 1.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "textcolor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of the nucleotide labels, in common name, hex, rgb or rgba format.\nIf left blank, handled by the colorscale automatically.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "textsize": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Size of the nucleotide labels, as a number.",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "showlabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles displaying sequence labels at left of alignment",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles displaying sequence IDs at left of alignment.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showconservation": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables the display of conservation secondary barplot where the most conserved\nnucleotides or amino acids get greater bars.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "conservationcolor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of the conservation secondary barplot, in common name, hex, rgb or rgba format.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "conservationcolorscale": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "Colorscale of the conservation barplot, in Plotly colorscales (e.g. 'Viridis')\nor as custom Plotly colorscale under a list format.\nNote that this conservationcolorscale argument\ndoes NOT follow the same format as the colorscale argument.",
        "defaultValue": {
          "value": "'Viridis'",
          "computed": false
        }
      },
      "conservationopacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Opacity of the conservation secondary barplot as a value between 0 and 1.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "conservationmethod": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'conservation'",
              "computed": false
            },
            {
              "value": "'entropy'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Whether to use most conserved ratio (MLE) 'conservation'\nor normalized entropy 'entropy' to determine conservation,\nwhich is a value between 0 and 1 where 1 is most conserved.",
        "defaultValue": {
          "value": "'entropy'",
          "computed": false
        }
      },
      "correctgap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to normalize the conservation barchart\nBy multiplying it elementwise with the gap barchart, as to\nlower the conservation values across sequences regions with many gaps.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showgap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables the display of gap secondary barplot where the sequence regions\nwith the fewest gaps get the greatest bars.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "gapcolor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of the gap secondary barplot, in common name, hex, rgb or rgba format.",
        "defaultValue": {
          "value": "'grey'",
          "computed": false
        }
      },
      "gapcolorscale": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "Colorscale of the gap barplot, in Plotly colorscales (e.g. 'Viridis')\nor as custom Plotly colorscale under a list format.\nNote that this conservationcolorscale argument\ndoes NOT follow the same format as the colorscale argument.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "gapopacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Opacity of the gap secondary barplot as a value between 0 and 1.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "groupbars": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If both conservation and gap are enabled,\ntoggles whether to group bars or to stack them as separate subplots.\nNo effect if not both gap and conservation are shown.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showconsensus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Displays toggling the consensus sequence, where each nucleotide in the\nconsensus sequence is the argmax of its distribution at a set nucleotide.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "tilewidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets how many pixels each nucleotide/amino acid on the Alignment Viewer\ntakes up horizontally. The total number of tiles (numtiles) seen\nhorizontally is automatically determined by rounding\nthe Viewer width divided by the tile width.\nthe Viewwer width divided by the tile witdth.",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "tileheight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets how many pixels each nucleotide/amino acid on the Alignment Viewer\ntakes up vertically.\nIf enabled, set height dynamically.",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "overview": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'heatmap'",
              "computed": false
            },
            {
              "value": "'slider'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Toggles whether the overview should be a heatmap, a slider, or none.",
        "defaultValue": {
          "value": "'heatmap'",
          "computed": false
        }
      },
      "numtiles": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets how many tiles to display across horitontally. If enabled,\noverrides tilewidth and sets the amount of tiles directly based off\nthat value.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "scrollskip": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If overview is set to 'scroll', determines how many tiles to skip\nwith each slider movement.\nHas no effect if scroll is not enabled (such as with overview or none).",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "tickstart": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Determines where to start annotating the first tile.\nIf let blank will be automatically determined by Plotly.\nEquivalent to Plotly's tick0 property.\nDoes not function if overview mode 'slider' is applied. (Current bug)",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "ticksteps": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Determines at what interval to keep annotating the tiles.\nIf left blank will be automatially determined by Plotly.\nEquivalent to Plotly's dtick property.\nDoes not function if overview mode 'slider' is applied. (Current bug)",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Width of the Viewer.\nProperty takes precedence over tileswidth and numtiles\nif either of them is set.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Width of the Viewer.\nProperty takes precedence over tilesheight if both\nare set.",
        "defaultValue": {
          "value": "900",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/AlignmentViewer.react.js": {
    "description": "The Alignment Viewer (MSA) component is used to align multiple genomic\nor proteomic sequences from a FASTA or Clustal file. Among its\nextensive set of features, the multiple sequence alignment viewer\ncan display multiple subplots showing gap and conservation info,\nalongside industry standard colorscale support and consensus sequence.\nNo matter what size your alignment is, Aligment Viewer is able to display\nyour genes or proteins snappily thanks to the underlying WebGL architecture\npowering the component. You can quickly scroll through your long sequence\nwith a slider or a heatmap overview.\nNote that the AlignmentChart only returns a chart of the sequence, while\nAlignmentViewer has integrated controls for colorscale, heatmaps, and subplots\nallowing the user to interactively control their sequences.\nRead more about the component here:\nhttps://github.com/plotly/react-alignment-viewer",
    "displayName": "AlignmentViewer",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change."
      },
      "eventDatum": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A Dash prop that returns data on clicking, hovering or resizing the viewer."
      },
      "data": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input data, either in FASTA or Clustal format."
      },
      "extension": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Format type of the input data, either in FASTA or Clustal.",
        "defaultValue": {
          "value": "'fasta'",
          "computed": false
        }
      },
      "colorscale": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Colorscale in 'buried', 'cinema', 'clustal', 'clustal2', 'helix', 'hydrophobicity'\n'lesk', 'mae', 'nucleotide', 'purine', 'strand', 'taylor', 'turn', 'zappo',\nor your own colorscale as a {'nucleotide': COLOR} dict.\nNote that this is NOT a standard plotly colorscale.",
        "defaultValue": {
          "value": "'clustal2'",
          "computed": false
        }
      },
      "opacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Opacity of the main plot as a value between 0 and 1.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "textcolor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of the nucleotide labels, in common name, hex, rgb or rgba format.\nIf left blank, handled by the colorscale automatically.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "textsize": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Size of the nucleotide labels, as a number.",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "showlabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles displaying sequence labels at left of alignment",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles displaying sequence IDs at left of alignment.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showconservation": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables the display of conservation secondary barplot where the most conserved\nnucleotides or amino acids get greater bars.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "conservationcolor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of the conservation secondary barplot, in common name, hex, rgb or rgba format.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "conservationcolorscale": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "Colorscale of the conservation barplot, in Plotly colorscales (e.g. 'Viridis')\nor as custom Plotly colorscale under a list format.\nNote that this conservationcolorscale argument\ndoes NOT follow the same format as the colorscale argument.",
        "defaultValue": {
          "value": "'Viridis'",
          "computed": false
        }
      },
      "conservationopacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Opacity of the conservation secondary barplot as a value between 0 and 1.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "conservationmethod": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'conservation'",
              "computed": false
            },
            {
              "value": "'entropy'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Whether to use most conserved ratio (MLE) 'conservation'\nor normalized entropy 'entropy' to determine conservation,\nwhich is a value between 0 and 1 where 1 is most conserved.",
        "defaultValue": {
          "value": "'entropy'",
          "computed": false
        }
      },
      "correctgap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to normalize the conservation barchart\nBy multiplying it elementwise with the gap barchart, as to\nlower the conservation values across sequences regions with many gaps.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showgap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables the display of gap secondary barplot where the sequence regions\nwith the fewest gaps get the greatest bars.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "gapcolor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of the gap secondary barplot, in common name, hex, rgb or rgba format.",
        "defaultValue": {
          "value": "'grey'",
          "computed": false
        }
      },
      "gapcolorscale": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "Colorscale of the gap barplot, in Plotly colorscales (e.g. 'Viridis')\nor as custom Plotly colorscale under a list format.\nNote that this conservationcolorscale argument\ndoes NOT follow the same format as the colorscale argument.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "gapopacity": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Opacity of the gap secondary barplot as a value between 0 and 1.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "groupbars": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If both conservation and gap are enabled,\ntoggles whether to group bars or to stack them as separate subplots.\nNo effect if not both gap and conservation are shown.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showconsensus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Displays toggling the consensus sequence, where each nucleotide in the\nconsensus sequence is the argmax of its distribution at a set nucleotide.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "tilewidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets how many pixels each nucleotide/amino acid on the Alignment Viewer\ntakes up horizontally. The total number of tiles (numtiles) seen\nhorizontally is automatically determined by rounding\nthe Viewer width divided by the tile width.\nthe Viewwer width divided by the tile witdth.",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "tileheight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets how many pixels each nucleotide/amino acid on the Alignment Viewer\ntakes up vertically.\nIf enabled, set height dynamically.",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "overview": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'heatmap'",
              "computed": false
            },
            {
              "value": "'slider'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Toggles whether the overview should be a heatmap, a slider, or none.",
        "defaultValue": {
          "value": "'heatmap'",
          "computed": false
        }
      },
      "numtiles": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets how many tiles to display across horitontally. If enabled,\noverrides tilewidth and sets the amount of tiles directly based off\nthat value.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "scrollskip": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If overview is set to 'scroll', determines how many tiles to skip\nwith each slider movement.\nHas no effect if scroll is not enabled (such as with overview or none).",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "tickstart": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Determines where to start annotating the first tile.\nIf let blank will be automatically determined by Plotly.\nEquivalent to Plotly's tick0 property.\nDoes not function if overview mode 'slider' is applied. (Current bug)",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "ticksteps": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Determines at what interval to keep annotating the tiles.\nIf left blank will be automatially determined by Plotly.\nEquivalent to Plotly's dtick property.\nDoes not function if overview mode 'slider' is applied. (Current bug)",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Width of the Viewer.\nProperty takes precedence over tileswidth and numtiles\nif either of them is set.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Width of the Viewer.\nProperty takes precedence over tilesheight if both\nare set.",
        "defaultValue": {
          "value": "900",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/DashCircos.react.js": {
    "description": "Dash Circos is a library used to analyze and interpret\ndata using a circular layout, based on the popular \n'Circos' graph. This Dash Bio component is a useful tool\nfor showcasing relationships bewtween data/datasets in a\nbeautiful way. Please checkout the Dash Bio repository\non github to learn more about this API.",
    "displayName": "DashCircos",
    "methods": [
      {
        "name": "setEvent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "setProps",
            "type": null
          },
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setColor",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "configApply",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setToolTip",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "configApply",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "configIdeogram",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "layout",
            "type": null
          },
          {
            "name": "config",
            "type": null
          },
          {
            "name": "tracks",
            "type": null
          },
          {
            "name": "setProps",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of the component to be used in Dash callbacks"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The CSS styling of the div wrapping the component"
      },
      "eventDatum": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A Dash prop that returns data on clicking or hovering of the tracks.\nDepending on what is specified for prop \"selectEvent\"."
      },
      "selectEvent": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A dictionary used to choose whether tracks should return\ndata on click, hover, or both, with the dash prop \"eventDatum\".\nThe keys of the dictionary represent the index of the list\nspecified for \"tracks\".\n\nEx:                 \nselectEvent={\n        \"0\": \"hover\",\n        \"1\": \"click\",\n        \"2\": \"both\"\n    },"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash provided setProps."
      },
      "layout": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "len": {
                "name": "number",
                "description": "The length of the block.",
                "required": true
              },
              "color": {
                "name": "string",
                "description": "The color of the block.",
                "required": true
              },
              "label": {
                "name": "string",
                "description": "The labels of the block.",
                "required": true
              },
              "id": {
                "name": "string",
                "description": "The id of the block, where it will recieve\ndata from the specified \"track\" id.",
                "required": true
              }
            }
          }
        },
        "required": true,
        "description": "The overall layout of the Circos graph, provided\nas a list of dictionaries."
      },
      "config": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Configuration of overall layout of the graph.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The overall size of the SVG container holding the\ngraph. Set on initilization and unchangeable thereafter.",
        "defaultValue": {
          "value": "800",
          "computed": false
        }
      },
      "tracks": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "id": {
                "name": "string",
                "description": "The id of a specific piece of track data.",
                "required": false
              },
              "data": {
                "name": "array",
                "description": "The data that makes up the track. It can \nbe a Json object.",
                "required": true
              },
              "config": {
                "name": "object",
                "description": "The layout of the tracks, where the user\ncan configure innerRadius, outterRadius, ticks,\nlabels, and more.",
                "required": false
              },
              "type": {
                "name": "enum",
                "computed": true,
                "value": "TRACK_TYPES",
                "description": "Specify the type of track this is.\nPlease check the docs for a list of tracks you can use,\nand ensure the name is typed in all capitals.",
                "required": false
              },
              "tooltipContent": {
                "name": "enum",
                "value": [
                  {
                    "value": "PropTypes.string",
                    "computed": true
                  },
                  {
                    "value": "PropTypes.shape(\n  {\n    name: PropTypes.string.isRequired\n  }\n)",
                    "computed": true
                  },
                  {
                    "value": "PropTypes.shape(\n  {\n    source: PropTypes.string.isRequired,\n    sourceID: PropTypes.string,\n    target: PropTypes.string.isRequired,\n    targetEnd: PropTypes.string.isRequired,\n    targetID: PropTypes.string\n  }\n)",
                    "computed": true
                  }
                ],
                "description": "Specify what data for tooltipContent is\ndisplayed.\n\nThe entry for the \"name\" key, is any of the keys used in the data loaded into tracks. \nEx: \"tooltipContent\": {\"name\": \"block_id\"},\n\nTo display all data in the dataset use \"all\" as the entry for the key \"name\".\nEx: \"tooltipContent\": {\"name\": \"all\"}\n\nEx: This will return (source) + ' ➤ ' + (target) + ': ' + (targetEnd)'. \n\"tooltipContent\": {\n            \"source\": \"block_id\",\n            \"target\": \"position\",\n            \"targetEnd\": \"value\"\n                                },\nEx: This will return (source)(sourceID) + ' ➤ ' + (target)(targetID) + ': ' (target)(targetEnd)'.                  \n\"tooltipContent\": {\n            \"source\": \"source\",\n            \"sourceID\": \"id\",\n            \"target\": \"target\",\n            \"targetID\": \"id\",\n            \"targetEnd\": \"end\"\n        }",
                "required": false
              },
              "color": {
                "name": "enum",
                "value": [
                  {
                    "value": "PropTypes.string",
                    "computed": true
                  },
                  {
                    "value": "PropTypes.shape(\n  {\n    name: PropTypes.string.isRequired\n  }\n)",
                    "computed": true
                  }
                ],
                "description": "Specify which dictonary key to grab color values from, in the passed in dataset. \nThis can be a string or an object.\n\nIf using a string, you can specify hex,\nRGB, and colors from d3 scale chromatic (Ex: RdYlBu). \n\nThe key \"name\" is required for this dictionary,\nwhere the input for \"name\" points to some list of\ndictionaries color values.\n\nEx: \"color\": {\"name\": \"some key that refers to color in a data set\"}",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Tracks that specify specific layouts.\nFor a complete list of tracks and usage, \nplease check the docs.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/DashIdeogram.react.js": {
    "description": "The Dash Ideogram is used to draw and animate genome-wide\ndatasets for organisms such as an human, mouse, and any\nother eukaryotes. The Ideogram can be used to compare\nhomologous features between chromosomes, and depict,\nhaploid, diploid, aneuploidy genomes. It can also display\nannotations using histograms, overlays, and simple side\nby side tracks to show important genomic data.\n\nGo here to see it in action: https://eweitz.github.io/ideogram/",
    "displayName": "DashIdeogram",
    "methods": [
      {
        "name": "onHomologyHandler",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onToolTipHandler",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onBrushHandler",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onLoadHandler",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onRotateHandler",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onMouseOverHandler",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "setConfig",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "initIdeogram",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks\nand used to identify Ideogram instances."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The component's inline styles"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash specific prop type connecting event handlers to front end."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class of the component wrapper"
      },
      "annotationsData": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Use this prop in callback to return annotationData when hovered."
      },
      "ancestors": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A map associating ancestor labels to colors. Used to color \nchromosomes from different ancestors in polyploid genomes."
      },
      "annotations": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "name": {
                "name": "string",
                "required": false
              },
              "chr": {
                "name": "string",
                "required": false
              },
              "start": {
                "name": "number",
                "required": false
              },
              "stop": {
                "name": "number",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "A list of annotation objects. Annotation objects can also have a \n name, color, shape, and track index. At the moment there is more\n keys specified and the docs need updating."
      },
      "annotationHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of each annotation."
      },
      "annotationsLayout": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The layout of this ideogram's annotations. \nIt can be one of \"tracks\", \"histogram\", or \"overlay\".\n\nTracks: Lay out annotations in tracks beside each chromosome.\n\nHistogram: Layout annotations in a histogram. Clusters annotations\nby location. Each cluster/bin is shown as a height of a bar to represent\nnumber of annotations on genomic range.\n\nOverlay: Lay out annotations directly over chromsomes.",
        "defaultValue": {
          "value": "\"tracks\"",
          "computed": false
        }
      },
      "annotationsColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The color of each annotation.",
        "defaultValue": {
          "value": "\"#F00\"",
          "computed": false
        }
      },
      "annotationsPath": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "An absolute or relative URL directing to a JSON file containing\nannotation objects (JSON)."
      },
      "annotationTracks": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "A list of objects with metadata for each track, \ne.g. id, display name, color, shape."
      },
      "assembly": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Default: latest RefSeq assembly for specified organism. \nThe genome assembly to display. \nTakes assembly name (e.g. \"GRCh37\"), \nRefSeq accession (e.g. \"GCF_000306695.2\"), \nor GenBank accession (e.g. \"GCA_000005005.5\")"
      },
      "barWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The pixel width of bars drawn when annotationsLayout: 'histogram'.",
        "defaultValue": {
          "value": "3",
          "computed": false
        }
      },
      "brush": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Genomic coordinate range (e.g. \"chr1:104325484-119977655\") for a brush on a \nchromosome. Useful when ideogram consists of one chromosome and you want to be \nable to focus on a region within that chromosome, \nand create an interactive sliding window to other regions"
      },
      "brushData": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A dash callback that is activated when the 'brush' prop is used in component.\nIt will return an dictionary like so:\n\n{'start': <value>, 'end': <value>, 'extent': <value>}\n\nwhere start is the left most edge, end is right most edge, and extent is \nthe total width of the brush."
      },
      "container": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS styling and the id of the container holding the Ideogram in \nreact-ideogram.js, this is where all the d3 magic happens."
      },
      "chrHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The pixel height of the tallest chromosome in the ideogram",
        "defaultValue": {
          "value": "400",
          "computed": false
        }
      },
      "chrMargin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The pixel space of margin bewteen each chromosome.",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "chrWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The pixel width of each chromosome.",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "chromosomes": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "A list of the names of chromosomes to \ndisplay. Useful for depicting a subset of the chromosomes in the genome, \ne.g. a single chromosome.\n\nIf Homology (between two different species):\nEx: chromosomes={\n            'human': ['1'],\n            'mouse': ['4']\n        }\n\n        General case to specify specific chromosomes:\n        Ex: chromosomes=['1', '2']"
      },
      "dataDir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Absolute or relative URL of the directory \ncontaining data needed to draw banded chromosomes.\nYou will need to set up you're own database to grab data from\nfor custom data."
      },
      "fullChromosomeLabels": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to include abbreviation species name in chromosome label. Used\nfor homology."
      },
      "histogramScaling": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "One of \"absolute\" or \"relative\". The technique to use in scaling the height of histogram bars. The \"absolute\" value sets bar height relative to tallest bar in all chromosomes, \nwhile \"relative\" sets bar height relative to tallest bar in each chromosome."
      },
      "heatmaps": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "This is a work in progess and will hopefully be fixed in future releases."
      },
      "homology": {
        "type": {
          "name": "shape",
          "value": {
            "chrOne": {
              "name": "shape",
              "value": {
                "organism": {
                  "name": "string",
                  "required": true
                },
                "start": {
                  "name": "arrayOf",
                  "value": {
                    "name": "number"
                  },
                  "required": false
                },
                "stop": {
                  "name": "arrayOf",
                  "value": {
                    "name": "number"
                  },
                  "required": false
                }
              },
              "required": false
            },
            "chrTwo": {
              "name": "shape",
              "value": {
                "organism": {
                  "name": "string",
                  "required": true
                },
                "start": {
                  "name": "arrayOf",
                  "value": {
                    "name": "number"
                  },
                  "required": false
                },
                "stop": {
                  "name": "arrayOf",
                  "value": {
                    "name": "number"
                  },
                  "required": false
                }
              },
              "required": false
            }
          }
        },
        "required": false,
        "description": "Used to compare two chromosomes with each other.\nThe keys \"chrOne\" and \"chrTwo\" represent one chromosome each. Organism is the \ntaxID or name. Start is an array, containing start one and \nstart two in this order. Stop is array, containing stop one, and stop two, \nin this order.\nEx: homology={\n                    \"chrOne\": {\n                        \"organism\": \"9606\",\n                        \"start\": [50000, 155701383],\n                        \"stop\": [900000, 156030895]\n                    },\n                    \"chrTwo\": {\n                        \"organism\": \"10090\",\n                        \"start\": [10001, 50000000],\n                        \"stop\": [2781479, 57217415]\n                    }\n                }"
      },
      "filterable": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Whether annotations should be filterable."
      },
      "localOrganism": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Provide local JSON organism into this prop from a local user JSON file. \nDataDir must not be initiliazed."
      },
      "onMouseOver": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash event callback for mousing over data."
      },
      "organism": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "Organism(s) to show chromosomes for. Supply organism's name as a string (e.g. \"human\") or \norganism's NCBI Taxonomy ID (taxid, e.g. 9606) to display chromosomes from a single organism, \nor an array of organisms' names or taxids to display chromosomes from multiple species.",
        "defaultValue": {
          "value": "\"human\"",
          "computed": false
        }
      },
      "orientation": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The orientation of chromosomes on the page."
      },
      "onBrushMove": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function to invoke when brush moves."
      },
      "onDidRotate": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function to invoke after chromosome has rotated. (React)"
      },
      "onDrawAnnots": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function to invoke when annotations are drawn. (React)"
      },
      "onLoad": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function to invoke when chromosomes are loaded, \ni.e. rendered on the page. (React)"
      },
      "perspective": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Use perspective: 'comparative' to enable annotations between two chromosomes, \neither within the same organism or different organisms. Used for homology."
      },
      "ploidy": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The ploidy - number of chromosomes to depict for each chromosome\nset.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "ploidyDesc": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "Description of ploidy in each chromosome set in terms of \nancestry composition."
      },
      "rangeSet": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "List of objects describing segments of recombination \namong chromosomes in a chromosome set."
      },
      "rotatable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether chromosomes are rotatable on click.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "rotated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Dash callback that returns True if rotated, and false if not."
      },
      "resolution": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The resolution of cytogenetic bands to show for each chromosome. \nThe quantity refers to approximate value in bands per haploid set (bphs). \nOne of 450, 550, or 850."
      },
      "rows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Useful for putting ideogram into a small container, \nor when dealing with genomes that have many chromosomes. \nNote: Not fully working needs to be fixed by developer.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "sex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Useful for omitting chromosome Y in female mammals. \nCurrently only supported for organisms that use XY sex-determination."
      },
      "showChromosomeLabels": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show chromosome labels, e.g. 1, 2, 3, X, Y.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showBandLabels": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show cytogenetic band labels, e.g. 1q21",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showAnnotTooltip": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show a tooltip upon mousing over an annotation.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showFullyBanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show fully banded chromosomes for genomes \nthat have sufficient data. Useful for showing simpler chromosomes of \ncytogenetically well-characterized organisms, e.g. human, beside chromosomes of \nless studied organisms, e.g. chimpanzee.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showNonNuclearChromosomes": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show non-nuclear chromosomes, \ne.g. for mitochondrial (MT) and chloroplast (CP) DNA.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/NeedlePlot.react.js": {
    "description": "",
    "displayName": "NeedlePlot",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "prepareTraces",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "prepareLayout",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "vars",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "mutationData": {
        "type": {
          "name": "shape",
          "value": {
            "x": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "y": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "mutationGroups": {
              "name": "arrayOf",
              "value": {
                "name": "string"
              },
              "required": false
            },
            "domains": {
              "name": "array",
              "required": false
            }
          }
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{\n  x: [],\n  y: [],\n  domains: [],\n  mutationGroups: []\n}",
          "computed": false
        }
      },
      "xlabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "ylabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "rangeSlider": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "needleStyle": {
        "type": {
          "name": "shape",
          "value": {
            "stemColor": {
              "name": "string",
              "required": false
            },
            "stemThickness": {
              "name": "number",
              "required": false
            },
            "stemConstHeight": {
              "name": "bool",
              "required": false
            },
            "headSize": {
              "name": "number",
              "required": false
            },
            "headColor": {
              "name": "union",
              "value": [
                {
                  "name": "array"
                },
                {
                  "name": "string"
                }
              ],
              "required": false
            },
            "headSymbol": {
              "name": "union",
              "value": [
                {
                  "name": "array"
                },
                {
                  "name": "string"
                }
              ],
              "required": false
            }
          }
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{\n    stemColor: '#444',\n    stemThickness: 0.5,\n    stemConstHeight: false,\n    headSize: 5,\n    headColor: [\n        '#e41a1c',\n        '#377eb8',\n        '#4daf4a',\n        '#984ea3',\n        '#ff7f00',\n        '#ffff33',\n        '#a65628',\n        '#f781bf',\n        '#999999',\n        '#e41a1c',\n        '#377eb8',\n        '#4daf4a',\n        '#984ea3',\n        '#ff7f00',\n        '#ffff33',\n        '#a65628',\n        '#f781bf',\n        '#999999',\n        '#e41a1c',\n    ],\n    headSymbol: 'circle',\n}",
          "computed": false
        }
      },
      "domainStyle": {
        "type": {
          "name": "shape",
          "value": {
            "domainColor": {
              "name": "array",
              "required": false
            },
            "displayMinorDomains": {
              "name": "bool",
              "required": false
            }
          }
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{\n    displayMinorDomains: false,\n    domainColor: [\n        '#8dd3c7',\n        '#ffffb3',\n        '#bebada',\n        '#fb8072',\n        '#80b1d3',\n        '#fdb462',\n        '#b3de69',\n        '#fccde5',\n        '#d9d9d9',\n        '#bc80bd',\n        '#ccebc5',\n        '#ffed6f',\n        '#8dd3c7',\n        '#ffffb3',\n        '#bebada',\n        '#fb8072',\n        '#80b1d3',\n        '#fdb462',\n        '#b3de69',\n    ],\n}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
      },
      "dashEvents": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'click'",
              "computed": false
            },
            {
              "value": "'hover'",
              "computed": false
            },
            {
              "value": "'unhover'",
              "computed": false
            },
            {
              "value": "'selected'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that fires events"
      }
    }
  },
  "src/lib/components/SequenceViewer.react.js": {
    "description": "The sequence viewer component is used to display sequences \nthat represent proteins, strands of genomic information, and\nmore. It can apply a coverage to the sequence supplied (with \nclickable coverage sections that can display specific information, \nand an optional legend to describe the color codes used), \nsearch through the sequence for specific regex, capture \nmouse selection events of subparts of the sequence, display a\ncount of the number of nucleotides or amino acids in the \nsequence,\nRead more about the component here: \nhttps://github.com/FlyBase/react-sequence-viewer",
    "displayName": "SequenceViewer",
    "methods": [
      {
        "name": "onMouseSelection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onSubpartSelected",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getOnClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "i",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "sequence": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The amino acid sequence that will be displayed.",
        "defaultValue": {
          "value": "'-'",
          "computed": false
        }
      },
      "showLineNumbers": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The option of whether or not to display line numbers.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "wrapAminoAcids": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The option of whether or not to display the list of amino acids\nas broken up into separate lines of a fixed length set by \ncharsPerLine.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "charsPerLine": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of amino acids that will display per line.",
        "defaultValue": {
          "value": "40",
          "computed": false
        }
      },
      "toolbar": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The option of whether or not to display a toolbar at the top\nthat allows the user to choose the number of letters per line.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "search": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The option of whether or not to include a search bar in\nthe header. This supports regex.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A string that displays at the top of the component.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "sequenceMaxHeight": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The maximum height of the sequence.",
        "defaultValue": {
          "value": "'400px'",
          "computed": false
        }
      },
      "badge": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "The option of whether or not to display a badge showing the\namino acid count at the top of the component beside the title.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "selection": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "low": {
                "name": "number",
                "required": false
              },
              "high": {
                "name": "number",
                "required": false
              },
              "color": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "A highlighted section of the sequence; the color of the highlight \ncan also be defined. Takes a list of format [min, max, color] where \nmin is a number that represents the starting index of the selection, \nmax is a number that represents the stopping index of the selection, \nand color is a string that defines the highlight color.\nCannot be used at the same time as coverage.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "coverage": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "start": {
                "name": "number",
                "required": false
              },
              "end": {
                "name": "number",
                "required": false
              },
              "color": {
                "name": "string",
                "required": false
              },
              "bgcolor": {
                "name": "string",
                "required": false
              },
              "tooltip": {
                "name": "string",
                "required": false
              },
              "underscore": {
                "name": "bool",
                "required": false
              },
              "onclick": {
                "name": "func",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "A coverage of the entire sequence; each section of the sequence\ncan have its own text color, background color, tooltip (on hover),\nand an optional underscore. The props start and end represent the\nbeginning and terminating indices of the section in question.\nCannot be used at the same time as selection.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "legend": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "name": {
                "name": "string",
                "required": false
              },
              "color": {
                "name": "string",
                "required": false
              },
              "underscore": {
                "name": "bool",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "A legend corresponding to the color codes above (optionally displayed)."
      },
      "coverageClicked": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Contains the index of the section that was clicked last in \nthe coverage list supplied."
      },
      "mouseSelection": {
        "type": {
          "name": "shape",
          "value": {
            "start": {
              "name": "number",
              "required": false
            },
            "end": {
              "name": "number",
              "required": false
            },
            "selection": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Contains information about the subsequence selected \nby the mouse. Start and end refer to the initial and \nfinal indices, respectively, of the subsequence, and \n\"selection\" contains the string that is selected."
      },
      "subpartSelected": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "start": {
                "name": "number",
                "required": false
              },
              "end": {
                "name": "number",
                "required": false
              },
              "sequence": {
                "name": "string",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "A list of the subparts selected using the \n\"search\" function or the \"selection\" property."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change."
      }
    }
  }
}
