window.dash_bio=function(t){var e={};function c(n){if(e[n])return e[n].exports;var l=e[n]={i:n,l:!1,exports:{}};return t[n].call(l.exports,l,l.exports,c),l.l=!0,l.exports}return c.m=t,c.c=e,c.d=function(t,e,n){c.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},c.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},c.t=function(t,e){if(1&e&&(t=c(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(c.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var l in t)c.d(n,l,function(e){return t[e]}.bind(null,l));return n},c.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return c.d(e,"a",e),e},c.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},c.p="",c(c.s=2)}([function(module,exports){eval('(function() { module.exports = window["React"]; }());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoX2Jpby9leHRlcm5hbCBcIlJlYWN0XCI/YzQ4MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxhQUFhLGtDQUFrQyxFQUFFIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7IG1vZHVsZS5leHBvcnRzID0gd2luZG93W1wiUmVhY3RcIl07IH0oKSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoX2Jpby8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcz8wMDg2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\nexports.DashMolecule3d = undefined;\n\nvar _DashMolecule3d = __webpack_require__(3);\n\nvar _DashMolecule3d2 = _interopRequireDefault(_DashMolecule3d);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.DashMolecule3d = _DashMolecule3d2.default; /* eslint-disable import/prefer-default-export *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoX2Jpby8uL3NyYy9saWIvaW5kZXguanM/ZDc1YSJdLCJuYW1lcyI6WyJEYXNoTW9sZWN1bGUzZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOzs7Ozs7UUFHSUEsYyxHQUFBQSx3QixFQUxKIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG5cbmltcG9ydCBEYXNoTW9sZWN1bGUzZCBmcm9tICcuL2NvbXBvbmVudHMvRGFzaE1vbGVjdWxlM2QnO1xuXG5leHBvcnQge1xuICAgIERhc2hNb2xlY3VsZTNkXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(4);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _molecule3dForReact = __webpack_require__(7);\n\nvar _molecule3dForReact2 = _interopRequireDefault(_molecule3dForReact);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DashMolecule3d = function (_Component) {\n    _inherits(DashMolecule3d, _Component);\n\n    function DashMolecule3d(props) {\n        _classCallCheck(this, DashMolecule3d);\n\n        var _this = _possibleConstructorReturn(this, (DashMolecule3d.__proto__ || Object.getPrototypeOf(DashMolecule3d)).call(this, props));\n\n        _this.onChangeSelection = _this.onChangeSelection.bind(_this);\n        _this.onRenderNewData = _this.onRenderNewData.bind(_this);\n        return _this;\n    }\n\n    _createClass(DashMolecule3d, [{\n        key: \'onChangeSelection\',\n        value: function onChangeSelection(selectedAtomIds) {\n            this.props.setProps({ selectedAtomIds: selectedAtomIds });\n        }\n    }, {\n        key: \'onRenderNewData\',\n        value: function onRenderNewData(glviewer) {\n            glviewer.center();\n            glviewer.zoom(0.8);\n        }\n    }, {\n        key: \'shouldComponentUpdate\',\n        value: function shouldComponentUpdate(nextProps) {\n            if (this.props.modelData !== nextProps.modelData || this.props.backgroundColor !== nextProps.backgroundColor || this.props.backgroundOpacity !== nextProps.backgroundOpacity || this.props.styles !== nextProps.styles) {\n                return true;\n            }\n            return false;\n        }\n    }, {\n        key: \'render\',\n        value: function render() {\n            var _props = this.props,\n                id = _props.id,\n                color = _props.color,\n                modelData = _props.modelData,\n                atoms = _props.atoms,\n                bonds = _props.bonds,\n                backgroundColor = _props.backgroundColor,\n                backgroundOpacity = _props.backgroundOpacity,\n                atomLabelsShown = _props.atomLabelsShown,\n                selectionType = _props.selectionType,\n                selectedAtomIds = _props.selectedAtomIds,\n                labels = _props.labels,\n                setProps = _props.setProps,\n                styles = _props.styles,\n                onRenderNewData = _props.onRenderNewData,\n                onChangeSelection = _props.onChangeSelection;\n\n\n            return _react2.default.createElement(\n                \'div\',\n                { id: id },\n                _react2.default.createElement(_molecule3dForReact2.default, _extends({}, this.props, {\n                    onChangeSelection: this.onChangeSelection,\n                    onRenderNewData: this.onRenderNewData\n                }))\n            );\n        }\n    }]);\n\n    return DashMolecule3d;\n}(_react.Component);\n\nexports.default = DashMolecule3d;\n\n\nDashMolecule3d.propTypes = {\n\n    /**\r\n     * The ID used to identify this component in callbacks\r\n     */\n    id: _propTypes2.default.string,\n\n    /**\r\n     * Dash-assigned callback that should be called whenever properties change\r\n     */\n    setProps: _propTypes2.default.func,\n\n    /**\r\n     * The selection type - may be atom, residue or chain\r\n     */\n    selectionType: _propTypes2.default.string,\n\n    /**\r\n     * Property to change the background color of the molecule viewer\r\n     */\n    backgroundColor: _propTypes2.default.string,\n\n    /**\r\n     * Property to change the backgroun opacity - ranges from 0 to 1\r\n     */\n    backgroundOpacity: _propTypes2.default.number,\n\n    /**\r\n     * Property that can be used to change the representation of\r\n     * the molecule. Options include sticks, cartoon and sphere\r\n     */\n    styles: _propTypes2.default.objectOf(_propTypes2.default.object),\n\n    /**\r\n     * The data that will be used to display the molecule in 3D\r\n     * The data will be in JSON format \r\n     * and should have two main dictionaries - atoms, bonds\r\n     */\n    modelData: _propTypes2.default.shape({\n        atoms: _propTypes2.default.array,\n        bonds: _propTypes2.default.array\n    }),\n\n    /**\r\n     * Property to either show or hide labels\r\n     */\n    atomLabelsShown: _propTypes2.default.bool,\n\n    /**\r\n     * Property that stores a list of all selected atoms\r\n     */\n    selectedAtomIds: _propTypes2.default.array,\n\n    /**\r\n     * labels corresponding to the atoms of the molecule\r\n     */\n    labels: _propTypes2.default.array,\n\n    /**\r\n     * Callback to re-render molecule viewer\r\n     * when modelData is changed\r\n     */\n    onRenderNewData: _propTypes2.default.func,\n\n    /**\r\n     * Callback to change append selectedAtomIds \r\n     * when a selection is made\r\n     */\n    onChangeSelection: _propTypes2.default.func\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (false) { var throwOnDirectAccess, isValidElement, REACT_ELEMENT_TYPE; } else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = __webpack_require__(5)();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoX2Jpby8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzP2Q3YmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksS0FBcUMsRUFBRSxnRUFnQjFDO0FBQ0Q7QUFDQTtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLENBQTRCO0FBQ3ZEIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = __webpack_require__(6);\n\nfunction emptyFunction() {}\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoX2Jpby8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcz9kN2EwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYiwyQkFBMkIsbUJBQU8sQ0FBQyxDQUE0Qjs7QUFFL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoX2Jpby8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcz81OWIwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjs7QUFFQSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval('module.exports=function(e){function t(o){if(r[o])return r[o].exports;var n=r[o]={exports:{},id:o,loaded:!1};return e[o].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var r={};return t.m=e,t.c=r,t.p="/js/",t(0)}([function(e,t,r){e.exports=r(4)},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={ATOM:"Atom",RESIDUE:"Residue",CHAIN:"Chain"};t.default=r},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){var r=[],o=!0,n=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(o=(i=l.next()).done)&&(r.push(i.value),!t||r.length!==t);o=!0);}catch(e){n=!0,a=e}finally{try{!o&&l.return&&l.return()}finally{if(n)throw a}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),s=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),u=r(9),p=o(u),d=r(10),c=o(d),f=r(5),y=o(f),h=r(6),m=o(h),b=r(1),v=o(b);window.$=p.default;var S=r(7),g=14,O=16711680,T=255,w=.8,_=function(e){function t(e){n(this,t);var r=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.onClickAtom=function(e){var t=r.props.modelData.atoms,o=t[e.serial],n=r.props.selectionType,a=m.default.addSelection(t,r.state.selectedAtomIds,o,n);r.setState({selectedAtomIds:a}),r.props.onChangeSelection&&r.props.onChangeSelection(a)},r.state={selectedAtomIds:e.selectedAtomIds},r.lastOutline={width:0},r}return i(t,e),s(t,null,[{key:"isModelDataEmpty",value:function(e){return 0===e.atoms.length&&0===e.bonds.length}},{key:"render3dMolModel",value:function(e,r){e.clear(),t.isModelDataEmpty(r)||(e.addModel(m.default.modelDataToCDJSON(r),"json",{keepH:!0}),e.getModel().selectedAtoms().forEach(function(e){var t=e,o=(r.atoms[e.serial].residue_name||"").replace(/[0-9]+/,"");t.atom=r.atoms[e.serial].name,t.chain=r.atoms[e.serial].chain,t.resi=r.atoms[e.serial].residue_index,t.resn=o}))}},{key:"render3dMolShapes",value:function(e,t){e.removeAllShapes(),t.forEach(function(t){t.type&&e["add"+t.type](y.default.getShapeSpec(t))})}},{key:"render3dMolLabels",value:function(e,t){e.removeAllLabels(),t.forEach(function(t){e.addLabel(t.text,t)})}},{key:"render3dMolOrbital",value:function(e,t){if(t.cube_file){var r=new S.VolumeData(t.cube_file,"cube");e.addIsosurface(r,{isoval:t.iso_val,color:t.positiveVolumetricColor||O,opacity:t.opacity||w}),e.addIsosurface(r,{isoval:-t.iso_val,color:t.negativeVolumetricColor||T,opacity:t.opacity||w})}}}]),s(t,[{key:"componentDidMount",value:function(){this.render3dMol()}},{key:"componentWillReceiveProps",value:function(e){this.setState({selectedAtomIds:e.selectedAtomIds})}},{key:"componentDidUpdate",value:function(){this.render3dMol()}},{key:"render3dMol",value:function(){var e=this;if(this.glviewer||!t.isModelDataEmpty(this.props.modelData)){var r=this.glviewer||S.createViewer((0,p.default)(this.container),{defaultcolors:S.elementColors.rasmol}),o=m.default.modelDataEquivalent(this.oldModelData,this.props.modelData);o||(this.lastStylesByAtom=null,t.render3dMolModel(r,this.props.modelData)),this.props.outlineWidth===this.lastOutline.width&&this.props.outlineColor===this.lastOutline.color||(this.props.outlineWidth?this.lastOutline={style:"outline",width:this.props.outlineWidth,color:this.props.outlineColor}:this.lastOutline={},r.setViewStyle(this.lastOutline));var n=Object.create(null),a=Object.create(null);this.props.modelData.atoms.forEach(function(t,o){var i=e.state.selectedAtomIds.indexOf(t.serial)!==-1,l=y.default.getLibStyle(t,i,e.props.atomLabelsShown,e.props.styles[o]);e.props.atomLabelsShown&&r.addLabel(t.name,{fontSize:g,position:{x:t.positions[0],y:t.positions[1],z:t.positions[2]}});var s=JSON.stringify(l);a[t.serial]=s,e.lastStylesByAtom&&e.lastStylesByAtom[t.serial]===s||(n[s]||(n[s]=[]),n[s].push(t.serial))}),this.lastStylesByAtom=a,Object.entries(n).forEach(function(e){var t=l(e,2),o=t[0],n=t[1];r.setStyle({serial:n},JSON.parse(o))}),t.render3dMolShapes(r,this.props.shapes),t.render3dMolLabels(r,this.props.labels),t.render3dMolOrbital(r,this.props.orbital);var i=!1;if("number"==typeof this.props.nearClip&&"number"==typeof this.props.farClip&&(r.setSlab(this.props.nearClip,this.props.farClip),i=!0),r.setBackgroundColor(y.default.colorStringToNumber(this.props.backgroundColor),this.props.backgroundOpacity),r.setClickable({},!0,this.onClickAtom),r.render(),this.oldModelData||(r.zoom(),r.zoomTo(.8)),o||(i||r.fitSlab(),this.props.onRenderNewData(r)),!this.glviewer)var s=this,u=setInterval(function(){s.container.children.length>0&&s.container.children[0].offsetParent&&(r.resize(),clearInterval(u))},50);this.oldModelData=this.props.modelData,this.glviewer=r}}},{key:"render",value:function(){var e=this;return c.default.createElement("div",{className:"molecule-3d",style:{width:this.props.width,height:this.props.height,position:"relative",margin:"0 auto"},ref:function(t){e.container=t}})}}]),t}(c.default.Component);_.defaultProps={atomLabelsShown:!1,backgroundOpacity:1,backgroundColor:"#73757c",height:"500px",onRenderNewData:function(){},orbital:{},selectedAtomIds:[],selectionType:v.default.ATOM,shapes:[],labels:[],styles:{},width:"500px",outlineWidth:0,outlineColor:"#000000",nearClip:null,farClip:null},_.propTypes={atomLabelsShown:c.default.PropTypes.bool,backgroundColor:c.default.PropTypes.string,backgroundOpacity:c.default.PropTypes.number,height:c.default.PropTypes.string,modelData:c.default.PropTypes.shape({atoms:c.default.PropTypes.array,bonds:c.default.PropTypes.array}).isRequired,onChangeSelection:c.default.PropTypes.func,onRenderNewData:c.default.PropTypes.func,orbital:c.default.PropTypes.shape({cube_file:c.default.PropTypes.string,iso_val:c.default.PropTypes.number,opacity:c.default.PropTypes.number,positiveVolumetricColor:c.default.PropTypes.string,negativeVolumetricColor:c.default.PropTypes.string}),selectedAtomIds:c.default.PropTypes.arrayOf(c.default.PropTypes.number),selectionType:c.default.PropTypes.oneOf([v.default.ATOM,v.default.RESIDUE,v.default.CHAIN]),shapes:c.default.PropTypes.arrayOf(c.default.PropTypes.object),labels:c.default.PropTypes.arrayOf(c.default.PropTypes.object),styles:c.default.PropTypes.objectOf(c.default.PropTypes.object),width:c.default.PropTypes.string,nearClip:c.default.PropTypes.number,farClip:c.default.PropTypes.number,outlineWidth:c.default.PropTypes.number,outlineColor:c.default.PropTypes.string},t.default=_},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={ARROW:"Arrow",SPHERE:"Sphere",CYLINDER:"Cylinder"};t.default=r},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),a=o(n);t.default=a.default},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){var r=[],o=!0,n=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(o=(i=l.next()).done)&&(r.push(i.value),!t||r.length!==t);o=!0);}catch(e){n=!0,a=e}finally{try{!o&&l.return&&l.return()}finally{if(n)throw a}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=r(3),i=o(a),l="stick",s={colorStringToNumber:function(e){if(4!==e.length&&7!==e.length)return e;if("#"!==e[0])return e;var t=parseInt(e.substr(1,e.length-1),16);return isNaN(t)?e:t},getShapeSpec:function(e,t){var r=void 0;e.color&&(r=s.colorStringToNumber(e.color));var o=Object.assign({},{alpha:.8,callback:t,clickable:!1,color:65027,radius:e.radius},e,{color:r});if(e.type===i.default.ARROW)o.start=e.start,o.end=e.end;else if(e.type===i.default.SPHERE)o.center=e.center;else{if(e.type!==i.default.CYLINDER)throw new Error("Invalid shape type.");o.fromCap=!0,o.toCap=!0,o.start=e.start,o.end=e.end}return o},getLibStyle:function(e,t,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a={},i=o.visualization_type||l;return a[i]={},Object.entries(o).forEach(function(e){var t=n(e,2),r=t[0],o=t[1];"visualization_type"!==r&&(a[i][r]=o)}),t&&(a[i].color=2094078),"string"==typeof a[i].color&&(a[i].color=s.colorStringToNumber(a[i].color)),a}};t.default=s},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(8),a=r(1),i=o(a),l={modelDataToCDJSON:function(e){var t=e.atoms.map(function(e){return{l:e.elem,x:e.positions[0],y:e.positions[1],z:e.positions[2],mass:e.mass_magnitude}}),r=e.bonds.map(function(e){return{b:e.atom1_index,e:e.atom2_index,o:e.bond_order}});return{m:[{a:t,b:r}]}},addSelection:function(e,t,r,o){var n=t.slice(),a=t.indexOf(r.serial),s=a===-1;return o===i.default.ATOM?(s?n.push(r.serial):n.splice(a,1),n):(s?e.forEach(function(e){l.isSameGroup(r,e,o)&&n.push(e.serial)}):n=n.filter(function(t){var n=e[t];return!l.isSameGroup(r,n,o)}),n)},isSameGroup:function(e,t,r){if(r===i.default.RESIDUE)return e.residue_index===t.residue_index;if(r===i.default.CHAIN)return e.chain===t.chain;throw new Error("selectionType must be either residue or chain")},modelDataEquivalent:function(e,t){if(!e||!t)return!1;var r=new n.Set(e.atoms.map(function(e){return e.serial})),o=new n.Set(t.atoms.map(function(e){return e.serial})),a=new n.Set(e.bonds.map(function(e){return e.atom1_index+"=>"+e.atom2_index})),i=new n.Set(t.bonds.map(function(e){return e.atom1_index+"=>"+e.atom2_index})),l=r.equals(o),s=a.equals(i);if(!l||!s)return!1;var u=new Map,p=!0,d=!1,c=void 0;try{for(var f,y=e.atoms[Symbol.iterator]();!(p=(f=y.next()).done);p=!0){var h=f.value;u.set(h.serial,h.positions||[])}}catch(e){d=!0,c=e}finally{try{!p&&y.return&&y.return()}finally{if(d)throw c}}return t.atoms.every(function(e){return u.get(e.serial).every(function(t,r){var o=e.positions||[];return o[r]===t})})}};t.default=l},function(e,t){e.exports=__webpack_require__(8)},function(e,t){e.exports=__webpack_require__(10)},function(e,t){e.exports=__webpack_require__(11)},function(e,t){e.exports=__webpack_require__(0)}]);\n//# sourceMappingURL=bundle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n jQuery JavaScript Library v3.2.1\n https://jquery.com/\n\n Includes Sizzle.js\n https://sizzlejs.com/\n\n Copyright JS Foundation and other contributors\n Released under the MIT license\n https://jquery.org/license\n\n Date: 2017-03-20T18:59Z\n Sizzle CSS Selector Engine v2.3.3\n https://sizzlejs.com/\n\n Copyright jQuery Foundation and other contributors\n Released under the MIT license\n http://jquery.org/license\n\n Date: 2016-08-08\n*/\nvar $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(n,C,A){n instanceof String&&(n=String(n));for(var G=n.length,B=0;B<G;B++){var la=n[B];if(C.call(A,la,B,n))return{i:B,v:la}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(n,C,A){n!=Array.prototype&&n!=Object.prototype&&(n[C]=A.value)};\n$jscomp.getGlobal=function(n){return"undefined"!=typeof window&&window===n?n:"undefined"!=typeof global&&null!=global?global:n};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(n,C,A,G){if(C){A=$jscomp.global;n=n.split(".");for(G=0;G<n.length-1;G++){var B=n[G];B in A||(A[B]={});A=A[B]}n=n[n.length-1];G=A[n];C=C(G);C!=G&&null!=C&&$jscomp.defineProperty(A,n,{configurable:!0,writable:!0,value:C})}};\n$jscomp.polyfill("Array.prototype.find",function(n){return n?n:function(n,A){return $jscomp.findInternal(this,n,A).v}},"es6","es3");\n(function(n,C){"object"===typeof module&&"object"===typeof module.exports?module.exports=n.document?C(n,!0):function(n){if(!n.document)throw Error("jQuery requires a window with a document");return C(n)}:C(n)})("undefined"!==typeof window?window:this,function(n,C){function A(a,b){b=b||p;var d=b.createElement("script");d.text=a;b.head.appendChild(d).parentNode.removeChild(d)}function G(a){var b=!!a&&"length"in a&&a.length,d=c.type(a);return"function"===d||c.isWindow(a)?!1:"array"===d||0===b||"number"===\ntypeof b&&0<b&&b-1 in a}function B(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()}function la(a,b,d){if(c.isFunction(b))return c.grep(a,function(a,c){return!!b.call(a,c,a)!==d});if(b.nodeType)return c.grep(a,function(a){return a===b!==d});if("string"!==typeof b)return c.grep(a,function(a){return-1<va.call(b,a)!==d});if(Pb.test(b))return c.filter(b,a,d);b=c.filter(b,a);return c.grep(a,function(a){return-1<va.call(b,a)!==d&&1===a.nodeType})}function Za(a,b){for(;(a=a[b])&&1!==a.nodeType;);\nreturn a}function Qb(a){var b={};c.each(a.match(S)||[],function(a,c){b[c]=!0});return b}function ma(a){return a}function na(a){throw a;}function $a(a,b,d,e){var f;try{a&&c.isFunction(f=a.promise)?f.call(a).done(b).fail(d):a&&c.isFunction(f=a.then)?f.call(a,b,d):b.apply(void 0,[a].slice(e))}catch(g){d.apply(void 0,[g])}}function ca(){p.removeEventListener("DOMContentLoaded",ca);n.removeEventListener("load",ca);c.ready()}function da(){this.expando=c.expando+da.uid++}function ab(a,b,d){if(void 0===d&&\n1===a.nodeType)if(d="data-"+b.replace(Rb,"-$&").toLowerCase(),d=a.getAttribute(d),"string"===typeof d){try{var c=d;d="true"===c?!0:"false"===c?!1:"null"===c?null:c===+c+""?+c:Sb.test(c)?JSON.parse(c):c}catch(f){}M.set(a,b,d)}else d=void 0;return d}function bb(a,b,d,e){var f=1,g=20,h=e?function(){return e.cur()}:function(){return c.css(a,b,"")},l=h(),k=d&&d[3]||(c.cssNumber[b]?"":"px"),m=(c.cssNumber[b]||"px"!==k&&+l)&&oa.exec(c.css(a,b));if(m&&m[3]!==k){k=k||m[3];d=d||[];m=+l||1;do f=f||".5",m/=f,\nc.style(a,b,m+k);while(f!==(f=h()/l)&&1!==f&&--g)}if(d){m=+m||+l||0;var t=d[1]?m+(d[1]+1)*d[2]:+d[2];e&&(e.unit=k,e.start=m,e.end=t)}return t}function pa(a,b){for(var d,e,f=[],g=0,h=a.length;g<h;g++)if(e=a[g],e.style)if(d=e.style.display,b){if("none"===d&&(f[g]=v.get(e,"display")||null,f[g]||(e.style.display="")),""===e.style.display&&wa(e)){d=g;var l=e.ownerDocument;e=e.nodeName;var k=cb[e];k||(l=l.body.appendChild(l.createElement(e)),k=c.css(l,"display"),l.parentNode.removeChild(l),"none"===k&&\n(k="block"),cb[e]=k);l=k;f[d]=l}}else"none"!==d&&(f[g]="none",v.set(e,"display",d));for(g=0;g<h;g++)null!=f[g]&&(a[g].style.display=f[g]);return a}function H(a,b){var d="undefined"!==typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!==typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&B(a,b)?c.merge([a],d):d}function Na(a,b){for(var d=0,c=a.length;d<c;d++)v.set(a[d],"globalEval",!b||v.get(b[d],"globalEval"))}function db(a,b,d,e,f){for(var g,h,l,k=\nb.createDocumentFragment(),m=[],t=0,n=a.length;t<n;t++)if((g=a[t])||0===g)if("object"===c.type(g))c.merge(m,g.nodeType?[g]:g);else if(Tb.test(g)){h=h||k.appendChild(b.createElement("div"));l=(eb.exec(g)||["",""])[1].toLowerCase();l=D[l]||D._default;h.innerHTML=l[1]+c.htmlPrefilter(g)+l[2];for(l=l[0];l--;)h=h.lastChild;c.merge(m,h.childNodes);h=k.firstChild;h.textContent=""}else m.push(b.createTextNode(g));k.textContent="";for(t=0;g=m[t++];)if(e&&-1<c.inArray(g,e))f&&f.push(g);else if(a=c.contains(g.ownerDocument,\ng),h=H(k.appendChild(g),"script"),a&&Na(h),d)for(l=0;g=h[l++];)fb.test(g.type||"")&&d.push(g);return k}function Ba(){return!0}function Z(){return!1}function gb(){try{return p.activeElement}catch(a){}}function Oa(a,b,d,e,f,g){var h;if("object"===typeof b){"string"!==typeof d&&(e=e||d,d=void 0);for(h in b)Oa(a,h,d,e,b[h],g);return a}null==e&&null==f?(f=d,e=d=void 0):null==f&&("string"===typeof d?(f=e,e=void 0):(f=e,e=d,d=void 0));if(!1===f)f=Z;else if(!f)return a;if(1===g){var l=f;f=function(a){c().off(a);\nreturn l.apply(this,arguments)};f.guid=l.guid||(l.guid=c.guid++)}return a.each(function(){c.event.add(this,b,f,e,d)})}function hb(a,b){return B(a,"table")&&B(11!==b.nodeType?b:b.firstChild,"tr")?c(">tbody",a)[0]||a:a}function Ub(a){a.type=(null!==a.getAttribute("type"))+"/"+a.type;return a}function Vb(a){var b=Wb.exec(a.type);b?a.type=b[1]:a.removeAttribute("type");return a}function ib(a,b){var d,e;if(1===b.nodeType){if(v.hasData(a)){var f=v.access(a);var g=v.set(b,f);if(f=f.events)for(e in delete g.handle,\ng.events={},f)for(g=0,d=f[e].length;g<d;g++)c.event.add(b,e,f[e][g])}M.hasData(a)&&(a=M.access(a),a=c.extend({},a),M.set(b,a))}}function qa(a,b,d,e){b=jb.apply([],b);var f,g=0,h=a.length,l=h-1,k=b[0],m=c.isFunction(k);if(m||1<h&&"string"===typeof k&&!q.checkClone&&Xb.test(k))return a.each(function(c){var f=a.eq(c);m&&(b[0]=k.call(this,c,f.html()));qa(f,b,d,e)});if(h){var t=db(b,a[0].ownerDocument,!1,a,e);var n=t.firstChild;1===t.childNodes.length&&(t=n);if(n||e){n=c.map(H(t,"script"),Ub);for(f=n.length;g<\nh;g++){var r=t;g!==l&&(r=c.clone(r,!0,!0),f&&c.merge(n,H(r,"script")));d.call(a[g],r,g)}if(f)for(t=n[n.length-1].ownerDocument,c.map(n,Vb),g=0;g<f;g++)r=n[g],fb.test(r.type||"")&&!v.access(r,"globalEval")&&c.contains(t,r)&&(r.src?c._evalUrl&&c._evalUrl(r.src):A(r.textContent.replace(Yb,""),t))}}return a}function kb(a,b,d){for(var e=b?c.filter(b,a):a,f=0;null!=(b=e[f]);f++)d||1!==b.nodeType||c.cleanData(H(b)),b.parentNode&&(d&&c.contains(b.ownerDocument,b)&&Na(H(b,"script")),b.parentNode.removeChild(b));\nreturn a}function ra(a,b,d){var e=a.style;if(d=d||Ga(a)){var f=d.getPropertyValue(b)||d[b];""!==f||c.contains(a.ownerDocument,a)||(f=c.style(a,b));if(!q.pixelMarginRight()&&Pa.test(f)&&lb.test(b)){a=e.width;b=e.minWidth;var g=e.maxWidth;e.minWidth=e.maxWidth=e.width=f;f=d.width;e.width=a;e.minWidth=b;e.maxWidth=g}}return void 0!==f?f+"":f}function mb(a,b){return{get:function(){if(a())delete this.get;else return(this.get=b).apply(this,arguments)}}}function nb(a){var b=c.cssProps[a];if(!b){b=c.cssProps;\na:{var d=a;if(!(d in ob)){for(var e=d[0].toUpperCase()+d.slice(1),f=pb.length;f--;)if(d=pb[f]+e,d in ob)break a;d=void 0}}b=b[a]=d||a}return b}function qb(a,b,d){return(a=oa.exec(b))?Math.max(0,a[2]-(d||0))+(a[3]||"px"):b}function rb(a,b,d,e,f){var g=0;for(b=d===(e?"border":"content")?4:"width"===b?1:0;4>b;b+=2)"margin"===d&&(g+=c.css(a,d+ba[b],!0,f)),e?("content"===d&&(g-=c.css(a,"padding"+ba[b],!0,f)),"margin"!==d&&(g-=c.css(a,"border"+ba[b]+"Width",!0,f))):(g+=c.css(a,"padding"+ba[b],!0,f),"padding"!==\nd&&(g+=c.css(a,"border"+ba[b]+"Width",!0,f)));return g}function sb(a,b,d){var e=Ga(a),f=ra(a,b,e),g="border-box"===c.css(a,"boxSizing",!1,e);if(Pa.test(f))return f;var h=g&&(q.boxSizingReliable()||f===a.style[b]);"auto"===f&&(f=a["offset"+b[0].toUpperCase()+b.slice(1)]);f=parseFloat(f)||0;return f+rb(a,b,d||(g?"border":"content"),h,e)+"px"}function I(a,b,d,c,f){return new I.prototype.init(a,b,d,c,f)}function Qa(){Ha&&(!1===p.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(Qa):n.setTimeout(Qa,\nc.fx.interval),c.fx.tick())}function tb(){n.setTimeout(function(){sa=void 0});return sa=c.now()}function Ia(a,b){var d=0,c={height:a};for(b=b?1:0;4>d;d+=2-b){var f=ba[d];c["margin"+f]=c["padding"+f]=a}b&&(c.opacity=c.width=a);return c}function ub(a,b,d){for(var c,f=(T.tweeners[b]||[]).concat(T.tweeners["*"]),g=0,h=f.length;g<h;g++)if(c=f[g].call(d,b,a))return c}function Zb(a,b){var d,e;for(d in a){var f=c.camelCase(d);var g=b[f];var h=a[d];Array.isArray(h)&&(g=h[1],h=a[d]=h[0]);d!==f&&(a[f]=h,delete a[d]);\nif((e=c.cssHooks[f])&&"expand"in e)for(d in h=e.expand(h),delete a[f],h)d in a||(a[d]=h[d],b[d]=g);else b[f]=g}}function T(a,b,d){var e,f=0,g=T.prefilters.length,h=c.Deferred().always(function(){delete l.elem}),l=function(){if(e)return!1;var b=sa||tb();b=Math.max(0,k.startTime+k.duration-b);for(var d=1-(b/k.duration||0),c=0,f=k.tweens.length;c<f;c++)k.tweens[c].run(d);h.notifyWith(a,[k,d,b]);if(1>d&&f)return b;f||h.notifyWith(a,[k,1,0]);h.resolveWith(a,[k]);return!1},k=h.promise({elem:a,props:c.extend({},\nb),opts:c.extend(!0,{specialEasing:{},easing:c.easing._default},d),originalProperties:b,originalOptions:d,startTime:sa||tb(),duration:d.duration,tweens:[],createTween:function(b,d){b=c.Tween(a,k.opts,b,d,k.opts.specialEasing[b]||k.opts.easing);k.tweens.push(b);return b},stop:function(b){var d=0,c=b?k.tweens.length:0;if(e)return this;for(e=!0;d<c;d++)k.tweens[d].run(1);b?(h.notifyWith(a,[k,1,0]),h.resolveWith(a,[k,b])):h.rejectWith(a,[k,b]);return this}});d=k.props;for(Zb(d,k.opts.specialEasing);f<\ng;f++)if(b=T.prefilters[f].call(k,a,d,k.opts))return c.isFunction(b.stop)&&(c._queueHooks(k.elem,k.opts.queue).stop=c.proxy(b.stop,b)),b;c.map(d,ub,k);c.isFunction(k.opts.start)&&k.opts.start.call(a,k);k.progress(k.opts.progress).done(k.opts.done,k.opts.complete).fail(k.opts.fail).always(k.opts.always);c.fx.timer(c.extend(l,{elem:a,anim:k,queue:k.opts.queue}));return k}function L(a){return(a.match(S)||[]).join(" ")}function ea(a){return a.getAttribute&&a.getAttribute("class")||""}function Ra(a,b,\nd,e){var f;if(Array.isArray(b))c.each(b,function(b,c){d||$b.test(a)?e(a,c):Ra(a+"["+("object"===typeof c&&null!=c?b:"")+"]",c,d,e)});else if(d||"object"!==c.type(b))e(a,b);else for(f in b)Ra(a+"["+f+"]",b[f],d,e)}function vb(a){return function(b,d){"string"!==typeof b&&(d=b,b="*");var e=0,f=b.toLowerCase().match(S)||[];if(c.isFunction(d))for(;b=f[e++];)"+"===b[0]?(b=b.slice(1)||"*",(a[b]=a[b]||[]).unshift(d)):(a[b]=a[b]||[]).push(d)}}function wb(a,b,d,e){function f(l){var k;g[l]=!0;c.each(a[l]||[],\nfunction(a,c){a=c(b,d,e);if("string"===typeof a&&!h&&!g[a])return b.dataTypes.unshift(a),f(a),!1;if(h)return!(k=a)});return k}var g={},h=a===Sa;return f(b.dataTypes[0])||!g["*"]&&f("*")}function Ta(a,b){var d,e,f=c.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((f[d]?a:e||(e={}))[d]=b[d]);e&&c.extend(!0,a,e);return a}var U=[],p=n.document,ac=Object.getPrototypeOf,fa=U.slice,jb=U.concat,Ua=U.push,va=U.indexOf,Ja={},xb=Ja.toString,Ka=Ja.hasOwnProperty,yb=Ka.toString,bc=yb.call(Object),q={},\nc=function(a,b){return new c.fn.init(a,b)},cc=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,dc=/^-ms-/,ec=/-([a-z])/g,fc=function(a,b){return b.toUpperCase()};c.fn=c.prototype={jquery:"3.2.1",constructor:c,length:0,toArray:function(){return fa.call(this)},get:function(a){return null==a?fa.call(this):0>a?this[a+this.length]:this[a]},pushStack:function(a){a=c.merge(this.constructor(),a);a.prevObject=this;return a},each:function(a){return c.each(this,a)},map:function(a){return this.pushStack(c.map(this,function(b,\nd){return a.call(b,d,b)}))},slice:function(){return this.pushStack(fa.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length;a=+a+(0>a?b:0);return this.pushStack(0<=a&&a<b?[this[a]]:[])},end:function(){return this.prevObject||this.constructor()},push:Ua,sort:U.sort,splice:U.splice};c.extend=c.fn.extend=function(){var a,b,d,e=arguments[0]||{},f=1,g=arguments.length,h=!1;"boolean"===typeof e&&(h=e,e=arguments[f]||{},f++);"object"===\ntypeof e||c.isFunction(e)||(e={});f===g&&(e=this,f--);for(;f<g;f++)if(null!=(a=arguments[f]))for(b in a){var l=e[b];var k=a[b];e!==k&&(h&&k&&(c.isPlainObject(k)||(d=Array.isArray(k)))?(d?(d=!1,l=l&&Array.isArray(l)?l:[]):l=l&&c.isPlainObject(l)?l:{},e[b]=c.extend(h,l,k)):void 0!==k&&(e[b]=k))}return e};c.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\\D/g,""),isReady:!0,error:function(a){throw Error(a);},noop:function(){},isFunction:function(a){return"function"===c.type(a)},isWindow:function(a){return null!=\na&&a===a.window},isNumeric:function(a){var b=c.type(a);return("number"===b||"string"===b)&&!isNaN(a-parseFloat(a))},isPlainObject:function(a){if(!a||"[object Object]"!==xb.call(a))return!1;a=ac(a);if(!a)return!0;a=Ka.call(a,"constructor")&&a.constructor;return"function"===typeof a&&yb.call(a)===bc},isEmptyObject:function(a){for(var b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"===typeof a||"function"===typeof a?Ja[xb.call(a)]||"object":typeof a},globalEval:function(a){A(a)},\ncamelCase:function(a){return a.replace(dc,"ms-").replace(ec,fc)},each:function(a,b){var d,c=0;if(G(a))for(d=a.length;c<d&&!1!==b.call(a[c],c,a[c]);c++);else for(c in a)if(!1===b.call(a[c],c,a[c]))break;return a},trim:function(a){return null==a?"":(a+"").replace(cc,"")},makeArray:function(a,b){b=b||[];null!=a&&(G(Object(a))?c.merge(b,"string"===typeof a?[a]:a):Ua.call(b,a));return b},inArray:function(a,b,d){return null==b?-1:va.call(b,a,d)},merge:function(a,b){for(var d=+b.length,c=0,f=a.length;c<\nd;c++)a[f++]=b[c];a.length=f;return a},grep:function(a,b,c){for(var d=[],f=0,g=a.length,h=!c;f<g;f++)c=!b(a[f],f),c!==h&&d.push(a[f]);return d},map:function(a,b,c){var d,f=0,g=[];if(G(a))for(d=a.length;f<d;f++){var h=b(a[f],f,c);null!=h&&g.push(h)}else for(f in a)h=b(a[f],f,c),null!=h&&g.push(h);return jb.apply([],g)},guid:1,proxy:function(a,b){if("string"===typeof b){var d=a[b];b=a;a=d}if(c.isFunction(a)){var e=fa.call(arguments,2);d=function(){return a.apply(b||this,e.concat(fa.call(arguments)))};\nd.guid=a.guid=a.guid||c.guid++;return d}},now:Date.now,support:q});"function"===typeof Symbol&&(c.fn[Symbol.iterator]=U[Symbol.iterator]);c.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){Ja["[object "+b+"]"]=b.toLowerCase()});var ka=function(a){function b(a,b,c,d){var e,f,g,E,h=b&&b.ownerDocument,w=b?b.nodeType:9;c=c||[];if("string"!==typeof a||!a||1!==w&&9!==w&&11!==w)return c;if(!d&&((b?b.ownerDocument||b:V)!==x&&xa(b),b=b||x,W)){if(11!==w&&\n(E=va.exec(a)))if(e=E[1])if(9===w)if(f=b.getElementById(e)){if(f.id===e)return c.push(f),c}else return c;else{if(h&&(f=h.getElementById(e))&&A(b,f)&&f.id===e)return c.push(f),c}else{if(E[2])return ta.apply(c,b.getElementsByTagName(a)),c;if((e=E[3])&&J.getElementsByClassName&&b.getElementsByClassName)return ta.apply(c,b.getElementsByClassName(e)),c}if(!(!J.qsa||I[a+" "]||Q&&Q.test(a))){if(1!==w){h=b;var K=a}else if("object"!==b.nodeName.toLowerCase()){(g=b.getAttribute("id"))?g=g.replace(oa,ra):b.setAttribute("id",\ng=y);f=ca(a);for(e=f.length;e--;)f[e]="#"+g+" "+v(f[e]);K=f.join(",");h=da.test(a)&&u(b.parentNode)||b}if(K)try{return ta.apply(c,h.querySelectorAll(K)),c}catch(Kc){}finally{g===y&&b.removeAttribute("id")}}}return Ba(a.replace(U,"$1"),b,c,d)}function c(){function a(c,d){b.push(c+" ")>F.cacheLength&&delete a[b.shift()];return a[c+" "]=d}var b=[];return a}function e(a){a[y]=!0;return a}function f(a){var b=x.createElement("fieldset");try{return!!a(b)}catch(w){return!1}finally{b.parentNode&&b.parentNode.removeChild(b)}}\nfunction g(a,b){a=a.split("|");for(var c=a.length;c--;)F.attrHandle[a[c]]=b}function h(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&a.sourceIndex-b.sourceIndex;if(d)return d;if(c)for(;c=c.nextSibling;)if(c===b)return-1;return a?1:-1}function l(a){return function(b){return"input"===b.nodeName.toLowerCase()&&b.type===a}}function k(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function m(a){return function(b){return"form"in b?b.parentNode&&\n!1===b.disabled?"label"in b?"label"in b.parentNode?b.parentNode.disabled===a:b.disabled===a:b.isDisabled===a||b.isDisabled!==!a&&za(b)===a:b.disabled===a:"label"in b?b.disabled===a:!1}}function n(a){return e(function(b){b=+b;return e(function(c,d){for(var e,f=a([],c.length,b),g=f.length;g--;)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function u(a){return a&&"undefined"!==typeof a.getElementsByTagName&&a}function r(){}function v(a){for(var b=0,c=a.length,d="";b<c;b++)d+=a[b].value;return d}function Fa(a,b,\nc){var d=b.dir,e=b.next,f=e||d,g=c&&"parentNode"===f,E=M++;return b.first?function(b,c,e){for(;b=b[d];)if(1===b.nodeType||g)return a(b,c,e);return!1}:function(b,c,h){var w,l=[ha,E];if(h)for(;b=b[d];){if((1===b.nodeType||g)&&a(b,c,h))return!0}else for(;b=b[d];)if(1===b.nodeType||g){var k=b[y]||(b[y]={});k=k[b.uniqueID]||(k[b.uniqueID]={});if(e&&e===b.nodeName.toLowerCase())b=b[d]||b;else{if((w=k[f])&&w[0]===ha&&w[1]===E)return l[2]=w[2];k[f]=l;if(l[2]=a(b,c,h))return!0}}return!1}}function p(a){return 1<\na.length?function(b,c,d){for(var e=a.length;e--;)if(!a[e](b,c,d))return!1;return!0}:a[0]}function q(a,b,c,d,e){for(var f,g=[],E=0,h=a.length,w=null!=b;E<h;E++)if(f=a[E])if(!c||c(f,d,e))g.push(f),w&&b.push(E);return g}function B(a,c,d,f,g,h){f&&!f[y]&&(f=B(f));g&&!g[y]&&(g=B(g,h));return e(function(e,E,h,w){var l,k=[],m=[],K=E.length,P;if(!(P=e)){P=c||"*";for(var n=h.nodeType?[h]:h,t=[],Ca=0,Ea=n.length;Ca<Ea;Ca++)b(P,n[Ca],t);P=t}P=!a||!e&&c?P:q(P,k,a,h,w);n=d?g||(e?a:K||f)?[]:E:P;d&&d(P,n,h,w);if(f){var u=\nq(n,m);f(u,[],h,w);for(h=u.length;h--;)if(l=u[h])n[m[h]]=!(P[m[h]]=l)}if(e){if(g||a){if(g){u=[];for(h=n.length;h--;)(l=n[h])&&u.push(P[h]=l);g(null,n=[],u,w)}for(h=n.length;h--;)(l=n[h])&&-1<(u=g?L(e,l):k[h])&&(e[u]=!(E[u]=l))}}else n=q(n===E?n.splice(K,n.length):n),g?g(null,E,n,w):ta.apply(E,n)})}function z(a){var b,c,d=a.length,e=F.relative[a[0].type];var f=e||F.relative[" "];for(var g=e?1:0,h=Fa(function(a){return a===b},f,!0),E=Fa(function(a){return-1<L(b,a)},f,!0),l=[function(a,c,d){a=!e&&(d||\nc!==N)||((b=c).nodeType?h(a,c,d):E(a,c,d));b=null;return a}];g<d;g++)if(f=F.relative[a[g].type])l=[Fa(p(l),f)];else{f=F.filter[a[g].type].apply(null,a[g].matches);if(f[y]){for(c=++g;c<d&&!F.relative[a[c].type];c++);return B(1<g&&p(l),1<g&&v(a.slice(0,g-1).concat({value:" "===a[g-2].type?"*":""})).replace(U,"$1"),f,g<c&&z(a.slice(g,c)),c<d&&z(a=a.slice(c)),c<d&&v(a))}l.push(f)}return p(l)}function gc(a,c){var d=0<c.length,f=0<a.length,g=function(e,g,h,E,w){var l,k,m=0,K="0",P=e&&[],n=[],t=N,Ca=e||\nf&&F.find.TAG("*",w),u=ha+=null==t?1:Math.random()||.1,r=Ca.length;for(w&&(N=g===x||g||w);K!==r&&null!=(l=Ca[K]);K++){if(f&&l){var Ea=0;g||l.ownerDocument===x||(xa(l),h=!W);for(;k=a[Ea++];)if(k(l,g||x,h)){E.push(l);break}w&&(ha=u)}d&&((l=!k&&l)&&m--,e&&P.push(l))}m+=K;if(d&&K!==m){for(Ea=0;k=c[Ea++];)k(P,n,g,h);if(e){if(0<m)for(;K--;)P[K]||n[K]||(n[K]=T.call(E));n=q(n)}ta.apply(E,n);w&&!e&&0<n.length&&1<m+c.length&&b.uniqueSort(E)}w&&(ha=u,N=t);return P};return d?e(g):g}var O,N,R,Da,x,X,W,Q,ya,C,\nA,y="sizzle"+1*new Date,V=a.document,ha=0,M=0,H=c(),zb=c(),I=c(),G=function(a,b){a===b&&(Da=!0);return 0},S={}.hasOwnProperty,D=[],T=D.pop,aa=D.push,ta=D.push,ba=D.slice,L=function(a,b){for(var c=0,d=a.length;c<d;c++)if(a[c]===b)return c;return-1},ea=/[\\x20\\t\\r\\n\\f]+/g,U=/^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$/g,fa=/^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*/,ka=/^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*/,la=/=[\\x20\\t\\r\\n\\f]*([^\\]\'"]*?)[\\x20\\t\\r\\n\\f]*\\]/g,ma=/:((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+)(?:\\(((\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+)(?:[\\x20\\t\\r\\n\\f]*([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+))|)[\\x20\\t\\r\\n\\f]*\\])*)|.*)\\)|)/,\npa=/^(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+$/,Z={ID:/^#((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+)/,CLASS:/^\\.((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+)/,TAG:/^((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+|[*])/,ATTR:/^\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+)(?:[\\x20\\t\\r\\n\\f]*([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+))|)[\\x20\\t\\r\\n\\f]*\\]/,PSEUDO:/^:((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+)(?:\\(((\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+)(?:[\\x20\\t\\r\\n\\f]*([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+))|)[\\x20\\t\\r\\n\\f]*\\])*)|.*)\\)|)/,\nCHILD:/^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)/i,bool:/^(?:checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$/i,needsContext:/^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)/i},qa=/^(?:input|select|textarea|button)$/i,sa=/^h\\d$/i,Y=/^[^{]+\\{\\s*\\[native \\w/,\nva=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,da=/[+~]/,ia=/\\\\([\\da-f]{1,6}[\\x20\\t\\r\\n\\f]?|([\\x20\\t\\r\\n\\f])|.)/ig,ja=function(a,b,c){a="0x"+b-65536;return a!==a||c?b:0>a?String.fromCharCode(a+65536):String.fromCharCode(a>>10|55296,a&1023|56320)},oa=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,ra=function(a,b){return b?"\\x00"===a?"\\ufffd":a.slice(0,-1)+"\\\\"+a.charCodeAt(a.length-1).toString(16)+" ":"\\\\"+a},ua=function(){xa()},za=Fa(function(a){return!0===a.disabled&&("form"in a||"label"in a)},{dir:"parentNode",\nnext:"legend"});try{ta.apply(D=ba.call(V.childNodes),V.childNodes),D[V.childNodes.length].nodeType}catch(E){ta={apply:D.length?function(a,b){aa.apply(a,ba.call(b))}:function(a,b){for(var c=a.length,d=0;a[c++]=b[d++];);a.length=c-1}}}var J=b.support={};var Aa=b.isXML=function(a){return(a=a&&(a.ownerDocument||a).documentElement)?"HTML"!==a.nodeName:!1};var xa=b.setDocument=function(a){var b;a=a?a.ownerDocument||a:V;if(a===x||9!==a.nodeType||!a.documentElement)return x;x=a;X=x.documentElement;W=!Aa(x);\nV!==x&&(b=x.defaultView)&&b.top!==b&&(b.addEventListener?b.addEventListener("unload",ua,!1):b.attachEvent&&b.attachEvent("onunload",ua));J.attributes=f(function(a){a.className="i";return!a.getAttribute("className")});J.getElementsByTagName=f(function(a){a.appendChild(x.createComment(""));return!a.getElementsByTagName("*").length});J.getElementsByClassName=Y.test(x.getElementsByClassName);J.getById=f(function(a){X.appendChild(a).id=y;return!x.getElementsByName||!x.getElementsByName(y).length});J.getById?\n(F.filter.ID=function(a){var b=a.replace(ia,ja);return function(a){return a.getAttribute("id")===b}},F.find.ID=function(a,b){if("undefined"!==typeof b.getElementById&&W)return(a=b.getElementById(a))?[a]:[]}):(F.filter.ID=function(a){var b=a.replace(ia,ja);return function(a){return(a="undefined"!==typeof a.getAttributeNode&&a.getAttributeNode("id"))&&a.value===b}},F.find.ID=function(a,b){if("undefined"!==typeof b.getElementById&&W){var c,d=b.getElementById(a);if(d){if((c=d.getAttributeNode("id"))&&\nc.value===a)return[d];var e=b.getElementsByName(a);for(b=0;d=e[b++];)if((c=d.getAttributeNode("id"))&&c.value===a)return[d]}return[]}});F.find.TAG=J.getElementsByTagName?function(a,b){if("undefined"!==typeof b.getElementsByTagName)return b.getElementsByTagName(a);if(J.qsa)return b.querySelectorAll(a)}:function(a,b){var c=[],d=0;b=b.getElementsByTagName(a);if("*"===a){for(;a=b[d++];)1===a.nodeType&&c.push(a);return c}return b};F.find.CLASS=J.getElementsByClassName&&function(a,b){if("undefined"!==typeof b.getElementsByClassName&&\nW)return b.getElementsByClassName(a)};ya=[];Q=[];if(J.qsa=Y.test(x.querySelectorAll))f(function(a){X.appendChild(a).innerHTML="<a id=\'"+y+"\'></a><select id=\'"+y+"-\\r\\\\\' msallowcapture=\'\'><option selected=\'\'></option></select>";a.querySelectorAll("[msallowcapture^=\'\']").length&&Q.push("[*^$]=[\\\\x20\\\\t\\\\r\\\\n\\\\f]*(?:\'\'|\\"\\")");a.querySelectorAll("[selected]").length||Q.push("\\\\[[\\\\x20\\\\t\\\\r\\\\n\\\\f]*(?:value|checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)");\na.querySelectorAll("[id~="+y+"-]").length||Q.push("~=");a.querySelectorAll(":checked").length||Q.push(":checked");a.querySelectorAll("a#"+y+"+*").length||Q.push(".#.+[+~]")}),f(function(a){a.innerHTML="<a href=\'\' disabled=\'disabled\'></a><select disabled=\'disabled\'><option/></select>";var b=x.createElement("input");b.setAttribute("type","hidden");a.appendChild(b).setAttribute("name","D");a.querySelectorAll("[name=d]").length&&Q.push("name[\\\\x20\\\\t\\\\r\\\\n\\\\f]*[*^$|!~]?=");2!==a.querySelectorAll(":enabled").length&&\nQ.push(":enabled",":disabled");X.appendChild(a).disabled=!0;2!==a.querySelectorAll(":disabled").length&&Q.push(":enabled",":disabled");a.querySelectorAll("*,:x");Q.push(",.*:")});(J.matchesSelector=Y.test(C=X.matches||X.webkitMatchesSelector||X.mozMatchesSelector||X.oMatchesSelector||X.msMatchesSelector))&&f(function(a){J.disconnectedMatch=C.call(a,"*");C.call(a,"[s!=\'\']:x");ya.push("!=",":((?:\\\\\\\\.|[\\\\w-]|[^\\x00-\\\\xa0])+)(?:\\\\(((\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\\\\[[\\\\x20\\\\t\\\\r\\\\n\\\\f]*((?:\\\\\\\\.|[\\\\w-]|[^\\x00-\\\\xa0])+)(?:[\\\\x20\\\\t\\\\r\\\\n\\\\f]*([*^$|!~]?=)[\\\\x20\\\\t\\\\r\\\\n\\\\f]*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|((?:\\\\\\\\.|[\\\\w-]|[^\\x00-\\\\xa0])+))|)[\\\\x20\\\\t\\\\r\\\\n\\\\f]*\\\\])*)|.*)\\\\)|)")});\nQ=Q.length&&new RegExp(Q.join("|"));ya=ya.length&&new RegExp(ya.join("|"));A=(b=Y.test(X.compareDocumentPosition))||Y.test(X.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a;b=b&&b.parentNode;return a===b||!!(b&&1===b.nodeType&&(c.contains?c.contains(b):a.compareDocumentPosition&&a.compareDocumentPosition(b)&16))}:function(a,b){if(b)for(;b=b.parentNode;)if(b===a)return!0;return!1};G=b?function(a,b){if(a===b)return Da=!0,0;var c=!a.compareDocumentPosition-!b.compareDocumentPosition;\nif(c)return c;c=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1;return c&1||!J.sortDetached&&b.compareDocumentPosition(a)===c?a===x||a.ownerDocument===V&&A(V,a)?-1:b===x||b.ownerDocument===V&&A(V,b)?1:R?L(R,a)-L(R,b):0:c&4?-1:1}:function(a,b){if(a===b)return Da=!0,0;var c=0,d=a.parentNode,e=b.parentNode,f=[a],g=[b];if(!d||!e)return a===x?-1:b===x?1:d?-1:e?1:R?L(R,a)-L(R,b):0;if(d===e)return h(a,b);for(;a=a.parentNode;)f.unshift(a);for(a=b;a=a.parentNode;)g.unshift(a);for(;f[c]===\ng[c];)c++;return c?h(f[c],g[c]):f[c]===V?-1:g[c]===V?1:0};return x};b.matches=function(a,c){return b(a,null,null,c)};b.matchesSelector=function(a,c){(a.ownerDocument||a)!==x&&xa(a);c=c.replace(la,"=\'$1\']");if(!(!J.matchesSelector||!W||I[c+" "]||ya&&ya.test(c)||Q&&Q.test(c)))try{var d=C.call(a,c);if(d||J.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(P){}return 0<b(c,x,null,[a]).length};b.contains=function(a,b){(a.ownerDocument||a)!==x&&xa(a);return A(a,b)};b.attr=function(a,\nb){(a.ownerDocument||a)!==x&&xa(a);var c=F.attrHandle[b.toLowerCase()];c=c&&S.call(F.attrHandle,b.toLowerCase())?c(a,b,!W):void 0;return void 0!==c?c:J.attributes||!W?a.getAttribute(b):(c=a.getAttributeNode(b))&&c.specified?c.value:null};b.escape=function(a){return(a+"").replace(oa,ra)};b.error=function(a){throw Error("Syntax error, unrecognized expression: "+a);};b.uniqueSort=function(a){var b,c=[],d=0,e=0;Da=!J.detectDuplicates;R=!J.sortStable&&a.slice(0);a.sort(G);if(Da){for(;b=a[e++];)b===a[e]&&\n(d=c.push(e));for(;d--;)a.splice(c[d],1)}R=null;return a};var na=b.getText=function(a){var b="",c=0;var d=a.nodeType;if(!d)for(;d=a[c++];)b+=na(d);else if(1===d||9===d||11===d){if("string"===typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)b+=na(a)}else if(3===d||4===d)return a.nodeValue;return b};var F=b.selectors={cacheLength:50,createPseudo:e,match:Z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},\n"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){a[1]=a[1].replace(ia,ja);a[3]=(a[3]||a[4]||a[5]||"").replace(ia,ja);"~="===a[2]&&(a[3]=" "+a[3]+" ");return a.slice(0,4)},CHILD:function(a){a[1]=a[1].toLowerCase();"nth"===a[1].slice(0,3)?(a[3]||b.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&b.error(a[0]);return a},PSEUDO:function(a){var b,c=!a[6]&&a[2];if(Z.CHILD.test(a[0]))return null;a[3]?a[2]=a[4]||a[5]||"":c&&ma.test(c)&&\n(b=ca(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b));return a.slice(0,3)}},filter:{TAG:function(a){var b=a.replace(ia,ja).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=H[a+" "];return b||(b=new RegExp("(^|[\\\\x20\\\\t\\\\r\\\\n\\\\f])"+a+"([\\\\x20\\\\t\\\\r\\\\n\\\\f]|$)"),H(a,function(a){return b.test("string"===typeof a.className&&a.className||"undefined"!==typeof a.getAttribute&&a.getAttribute("class")||\n"")}))},ATTR:function(a,c,d){return function(e){e=b.attr(e,a);if(null==e)return"!="===c;if(!c)return!0;e+="";return"="===c?e===d:"!="===c?e!==d:"^="===c?d&&0===e.indexOf(d):"*="===c?d&&-1<e.indexOf(d):"$="===c?d&&e.slice(-d.length)===d:"~="===c?-1<(" "+e.replace(ea," ")+" ").indexOf(d):"|="===c?e===d||e.slice(0,d.length+1)===d+"-":!1}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,l){var k,\nm;c=f!==g?"nextSibling":"previousSibling";var E=b.parentNode,n=h&&b.nodeName.toLowerCase();l=!l&&!h;var w=!1;if(E){if(f){for(;c;){for(k=b;k=k[c];)if(h?k.nodeName.toLowerCase()===n:1===k.nodeType)return!1;var K=c="only"===a&&!K&&"nextSibling"}return!0}K=[g?E.firstChild:E.lastChild];if(g&&l){k=E;var t=k[y]||(k[y]={});t=t[k.uniqueID]||(t[k.uniqueID]={});w=t[a]||[];w=(m=w[0]===ha&&w[1])&&w[2];for(k=m&&E.childNodes[m];k=++m&&k&&k[c]||(w=m=0)||K.pop();)if(1===k.nodeType&&++w&&k===b){t[a]=[ha,m,w];break}}else if(l&&\n(k=b,t=k[y]||(k[y]={}),t=t[k.uniqueID]||(t[k.uniqueID]={}),w=t[a]||[],w=m=w[0]===ha&&w[1]),!1===w)for(;(k=++m&&k&&k[c]||(w=m=0)||K.pop())&&((h?k.nodeName.toLowerCase()!==n:1!==k.nodeType)||!++w||(l&&(t=k[y]||(k[y]={}),t=t[k.uniqueID]||(t[k.uniqueID]={}),t[a]=[ha,w]),k!==b)););w-=e;return w===d||0===w%d&&0<=w/d}}},PSEUDO:function(a,c){var d=F.pseudos[a]||F.setFilters[a.toLowerCase()]||b.error("unsupported pseudo: "+a);if(d[y])return d(c);if(1<d.length){var f=[a,a,"",c];return F.setFilters.hasOwnProperty(a.toLowerCase())?\ne(function(a,b){for(var e,f=d(a,c),g=f.length;g--;)e=L(a,f[g]),a[e]=!(b[e]=f[g])}):function(a){return d(a,0,f)}}return d}},pseudos:{not:e(function(a){var b=[],c=[],d=wa(a.replace(U,"$1"));return d[y]?e(function(a,b,c,e){e=d(a,null,e,[]);for(var f=a.length;f--;)if(c=e[f])a[f]=!(b[f]=c)}):function(a,e,f){b[0]=a;d(b,null,f,c);b[0]=null;return!c.pop()}}),has:e(function(a){return function(c){return 0<b(a,c).length}}),contains:e(function(a){a=a.replace(ia,ja);return function(b){return-1<(b.textContent||\nb.innerText||na(b)).indexOf(a)}}),lang:e(function(a){pa.test(a||"")||b.error("unsupported lang: "+a);a=a.replace(ia,ja).toLowerCase();return function(b){var c;do if(c=W?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===X},focus:function(a){return a===x.activeElement&&(!x.hasFocus||\nx.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:m(!1),disabled:m(!0),checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return!0===a.selected},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(6>a.nodeType)return!1;return!0},parent:function(a){return!F.pseudos.empty(a)},header:function(a){return sa.test(a.nodeName)},input:function(a){return qa.test(a.nodeName)},\nbutton:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:n(function(){return[0]}),last:n(function(a,b){return[b-1]}),eq:n(function(a,b,c){return[0>c?c+b:c]}),even:n(function(a,b){for(var c=0;c<b;c+=2)a.push(c);return a}),odd:n(function(a,b){for(var c=1;c<b;c+=2)a.push(c);return a}),lt:n(function(a,b,c){for(b=\n0>c?c+b:c;0<=--b;)a.push(b);return a}),gt:n(function(a,b,c){for(c=0>c?c+b:c;++c<b;)a.push(c);return a})}};F.pseudos.nth=F.pseudos.eq;for(O in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})F.pseudos[O]=l(O);for(O in{submit:!0,reset:!0})F.pseudos[O]=k(O);r.prototype=F.filters=F.pseudos;F.setFilters=new r;var ca=b.tokenize=function(a,c){var d,e,f,g,h;if(g=zb[a+" "])return c?0:g.slice(0);g=a;var k=[];for(h=F.preFilter;g;){if(!l||(d=fa.exec(g)))d&&(g=g.slice(d[0].length)||g),k.push(e=[]);var l=!1;\nif(d=ka.exec(g))l=d.shift(),e.push({value:l,type:d[0].replace(U," ")}),g=g.slice(l.length);for(f in F.filter)!(d=Z[f].exec(g))||h[f]&&!(d=h[f](d))||(l=d.shift(),e.push({value:l,type:f,matches:d}),g=g.slice(l.length));if(!l)break}return c?g.length:g?b.error(a):zb(a,k).slice(0)};var wa=b.compile=function(a,b){var c,d=[],e=[],f=I[a+" "];if(!f){b||(b=ca(a));for(c=b.length;c--;)f=z(b[c]),f[y]?d.push(f):e.push(f);f=I(a,gc(e,d));f.selector=a}return f};var Ba=b.select=function(a,b,c,d){var e,f,g,h="function"===\ntypeof a&&a,k=!d&&ca(a=h.selector||a);c=c||[];if(1===k.length){var l=k[0]=k[0].slice(0);if(2<l.length&&"ID"===(f=l[0]).type&&9===b.nodeType&&W&&F.relative[l[1].type]){b=(F.find.ID(f.matches[0].replace(ia,ja),b)||[])[0];if(!b)return c;h&&(b=b.parentNode);a=a.slice(l.shift().value.length)}for(e=Z.needsContext.test(a)?0:l.length;e--;){f=l[e];if(F.relative[g=f.type])break;if(g=F.find[g])if(d=g(f.matches[0].replace(ia,ja),da.test(l[0].type)&&u(b.parentNode)||b)){l.splice(e,1);a=d.length&&v(l);if(!a)return ta.apply(c,\nd),c;break}}}(h||wa(a,k))(d,b,!W,c,!b||da.test(a)&&u(b.parentNode)||b);return c};J.sortStable=y.split("").sort(G).join("")===y;J.detectDuplicates=!!Da;xa();J.sortDetached=f(function(a){return a.compareDocumentPosition(x.createElement("fieldset"))&1});f(function(a){a.innerHTML="<a href=\'#\'></a>";return"#"===a.firstChild.getAttribute("href")})||g("type|href|height|width",function(a,b,c){if(!c)return a.getAttribute(b,"type"===b.toLowerCase()?1:2)});J.attributes&&f(function(a){a.innerHTML="<input/>";\na.firstChild.setAttribute("value","");return""===a.firstChild.getAttribute("value")})||g("value",function(a,b,c){if(!c&&"input"===a.nodeName.toLowerCase())return a.defaultValue});f(function(a){return null==a.getAttribute("disabled")})||g("checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",function(a,b,c){var d;if(!c)return!0===a[b]?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null});return b}(n);c.find=ka;c.expr=\nka.selectors;c.expr[":"]=c.expr.pseudos;c.uniqueSort=c.unique=ka.uniqueSort;c.text=ka.getText;c.isXMLDoc=ka.isXML;c.contains=ka.contains;c.escapeSelector=ka.escape;var Y=function(a,b,d){for(var e=[],f=void 0!==d;(a=a[b])&&9!==a.nodeType;)if(1===a.nodeType){if(f&&c(a).is(d))break;e.push(a)}return e},Ab=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},Bb=c.expr.match.needsContext,Cb=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i,Pb=/^.[^:#\\[\\.,]*$/;\nc.filter=function(a,b,d){var e=b[0];d&&(a=":not("+a+")");return 1===b.length&&1===e.nodeType?c.find.matchesSelector(e,a)?[e]:[]:c.find.matches(a,c.grep(b,function(a){return 1===a.nodeType}))};c.fn.extend({find:function(a){var b,d=this.length,e=this;if("string"!==typeof a)return this.pushStack(c(a).filter(function(){for(b=0;b<d;b++)if(c.contains(e[b],this))return!0}));var f=this.pushStack([]);for(b=0;b<d;b++)c.find(a,e[b],f);return 1<d?c.uniqueSort(f):f},filter:function(a){return this.pushStack(la(this,\na||[],!1))},not:function(a){return this.pushStack(la(this,a||[],!0))},is:function(a){return!!la(this,"string"===typeof a&&Bb.test(a)?c(a):a||[],!1).length}});var ic=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(c.fn.init=function(a,b,d){if(!a)return this;d=d||jc;if("string"===typeof a){var e="<"===a[0]&&">"===a[a.length-1]&&3<=a.length?[null,a,null]:ic.exec(a);if(!e||!e[1]&&b)return!b||b.jquery?(b||d).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof c?b[0]:b,c.merge(this,c.parseHTML(e[1],b&&\nb.nodeType?b.ownerDocument||b:p,!0)),Cb.test(e[1])&&c.isPlainObject(b))for(e in b)if(c.isFunction(this[e]))this[e](b[e]);else this.attr(e,b[e])}else if(a=p.getElementById(e[2]))this[0]=a,this.length=1;return this}return a.nodeType?(this[0]=a,this.length=1,this):c.isFunction(a)?void 0!==d.ready?d.ready(a):a(c):c.makeArray(a,this)}).prototype=c.fn;var jc=c(p);var kc=/^(?:parents|prev(?:Until|All))/,lc={children:!0,contents:!0,next:!0,prev:!0};c.fn.extend({has:function(a){var b=c(a,this),d=b.length;\nreturn this.filter(function(){for(var a=0;a<d;a++)if(c.contains(this,b[a]))return!0})},closest:function(a,b){var d,e=0,f=this.length,g=[],h="string"!==typeof a&&c(a);if(!Bb.test(a))for(;e<f;e++)for(d=this[e];d&&d!==b;d=d.parentNode)if(11>d.nodeType&&(h?-1<h.index(d):1===d.nodeType&&c.find.matchesSelector(d,a))){g.push(d);break}return this.pushStack(1<g.length?c.uniqueSort(g):g)},index:function(a){return a?"string"===typeof a?va.call(c(a),this[0]):va.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?\nthis.first().prevAll().length:-1},add:function(a,b){return this.pushStack(c.uniqueSort(c.merge(this.get(),c(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});c.each({parent:function(a){return(a=a.parentNode)&&11!==a.nodeType?a:null},parents:function(a){return Y(a,"parentNode")},parentsUntil:function(a,b,c){return Y(a,"parentNode",c)},next:function(a){return Za(a,"nextSibling")},prev:function(a){return Za(a,"previousSibling")},nextAll:function(a){return Y(a,\n"nextSibling")},prevAll:function(a){return Y(a,"previousSibling")},nextUntil:function(a,b,c){return Y(a,"nextSibling",c)},prevUntil:function(a,b,c){return Y(a,"previousSibling",c)},siblings:function(a){return Ab((a.parentNode||{}).firstChild,a)},children:function(a){return Ab(a.firstChild)},contents:function(a){if(B(a,"iframe"))return a.contentDocument;B(a,"template")&&(a=a.content||a);return c.merge([],a.childNodes)}},function(a,b){c.fn[a]=function(d,e){var f=c.map(this,b,d);"Until"!==a.slice(-5)&&\n(e=d);e&&"string"===typeof e&&(f=c.filter(e,f));1<this.length&&(lc[a]||c.uniqueSort(f),kc.test(a)&&f.reverse());return this.pushStack(f)}});var S=/[^\\x20\\t\\r\\n\\f]+/g;c.Callbacks=function(a){a="string"===typeof a?Qb(a):c.extend({},a);var b,d,e,f,g=[],h=[],l=-1,k=function(){f=f||a.once;for(e=b=!0;h.length;l=-1)for(d=h.shift();++l<g.length;)!1===g[l].apply(d[0],d[1])&&a.stopOnFalse&&(l=g.length,d=!1);a.memory||(d=!1);b=!1;f&&(g=d?[]:"")},m={add:function(){g&&(d&&!b&&(l=g.length-1,h.push(d)),function u(b){c.each(b,\nfunction(b,d){c.isFunction(d)?a.unique&&m.has(d)||g.push(d):d&&d.length&&"string"!==c.type(d)&&u(d)})}(arguments),d&&!b&&k());return this},remove:function(){c.each(arguments,function(a,b){for(var d;-1<(d=c.inArray(b,g,d));)g.splice(d,1),d<=l&&l--});return this},has:function(a){return a?-1<c.inArray(a,g):0<g.length},empty:function(){g&&(g=[]);return this},disable:function(){f=h=[];g=d="";return this},disabled:function(){return!g},lock:function(){f=h=[];d||b||(g=d="");return this},locked:function(){return!!f},\nfireWith:function(a,c){f||(c=c||[],c=[a,c.slice?c.slice():c],h.push(c),b||k());return this},fire:function(){m.fireWith(this,arguments);return this},fired:function(){return!!e}};return m};c.extend({Deferred:function(a){var b=[["notify","progress",c.Callbacks("memory"),c.Callbacks("memory"),2],["resolve","done",c.Callbacks("once memory"),c.Callbacks("once memory"),0,"resolved"],["reject","fail",c.Callbacks("once memory"),c.Callbacks("once memory"),1,"rejected"]],d="pending",e={state:function(){return d},\nalways:function(){f.done(arguments).fail(arguments);return this},"catch":function(a){return e.then(null,a)},pipe:function(){var a=arguments;return c.Deferred(function(d){c.each(b,function(b,e){var g=c.isFunction(a[e[4]])&&a[e[4]];f[e[1]](function(){var a=g&&g.apply(this,arguments);if(a&&c.isFunction(a.promise))a.promise().progress(d.notify).done(d.resolve).fail(d.reject);else d[e[0]+"With"](this,g?[a]:arguments)})});a=null}).promise()},then:function(a,d,e){function f(a,b,d,e){return function(){var h=\nthis,l=arguments,k=function(){if(!(a<g)){var k=d.apply(h,l);if(k===b.promise())throw new TypeError("Thenable self-resolution");var m=k&&("object"===typeof k||"function"===typeof k)&&k.then;c.isFunction(m)?e?m.call(k,f(g,b,ma,e),f(g,b,na,e)):(g++,m.call(k,f(g,b,ma,e),f(g,b,na,e),f(g,b,ma,b.notifyWith))):(d!==ma&&(h=void 0,l=[k]),(e||b.resolveWith)(h,l))}},m=e?k:function(){try{k()}catch(z){c.Deferred.exceptionHook&&c.Deferred.exceptionHook(z,m.stackTrace),a+1>=g&&(d!==na&&(h=void 0,l=[z]),b.rejectWith(h,\nl))}};a?m():(c.Deferred.getStackHook&&(m.stackTrace=c.Deferred.getStackHook()),n.setTimeout(m))}}var g=0;return c.Deferred(function(g){b[0][3].add(f(0,g,c.isFunction(e)?e:ma,g.notifyWith));b[1][3].add(f(0,g,c.isFunction(a)?a:ma));b[2][3].add(f(0,g,c.isFunction(d)?d:na))}).promise()},promise:function(a){return null!=a?c.extend(a,e):e}},f={};c.each(b,function(a,c){var g=c[2],h=c[5];e[c[1]]=g.add;h&&g.add(function(){d=h},b[3-a][2].disable,b[0][2].lock);g.add(c[3].fire);f[c[0]]=function(){f[c[0]+"With"](this===\nf?void 0:this,arguments);return this};f[c[0]+"With"]=g.fireWith});e.promise(f);a&&a.call(f,f);return f},when:function(a){var b=arguments.length,d=b,e=Array(d),f=fa.call(arguments),g=c.Deferred(),h=function(a){return function(c){e[a]=this;f[a]=1<arguments.length?fa.call(arguments):c;--b||g.resolveWith(e,f)}};if(1>=b&&($a(a,g.done(h(d)).resolve,g.reject,!b),"pending"===g.state()||c.isFunction(f[d]&&f[d].then)))return g.then();for(;d--;)$a(f[d],h(d),g.reject);return g.promise()}});var mc=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\nc.Deferred.exceptionHook=function(a,b){n.console&&n.console.warn&&a&&mc.test(a.name)&&n.console.warn("jQuery.Deferred exception: "+a.message,a.stack,b)};c.readyException=function(a){n.setTimeout(function(){throw a;})};var Va=c.Deferred();c.fn.ready=function(a){Va.then(a).catch(function(a){c.readyException(a)});return this};c.extend({isReady:!1,readyWait:1,ready:function(a){(!0===a?--c.readyWait:c.isReady)||(c.isReady=!0,!0!==a&&0<--c.readyWait||Va.resolveWith(p,[c]))}});c.ready.then=Va.then;"complete"===\np.readyState||"loading"!==p.readyState&&!p.documentElement.doScroll?n.setTimeout(c.ready):(p.addEventListener("DOMContentLoaded",ca),n.addEventListener("load",ca));var aa=function(a,b,d,e,f,g,h){var l=0,k=a.length,m=null==d;if("object"===c.type(d))for(l in f=!0,d)aa(a,b,l,d[l],!0,g,h);else if(void 0!==e&&(f=!0,c.isFunction(e)||(h=!0),m&&(h?(b.call(a,e),b=null):(m=b,b=function(a,b,d){return m.call(c(a),d)})),b))for(;l<k;l++)b(a[l],d,h?e:e.call(a[l],l,b(a[l],d)));return f?a:m?b.call(a):k?b(a[0],d):\ng},La=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};da.uid=1;da.prototype={cache:function(a){var b=a[this.expando];b||(b={},La(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0})));return b},set:function(a,b,d){var e;a=this.cache(a);if("string"===typeof b)a[c.camelCase(b)]=d;else for(e in b)a[c.camelCase(e)]=b[e];return a},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][c.camelCase(b)]},access:function(a,\nb,c){if(void 0===b||b&&"string"===typeof b&&void 0===c)return this.get(a,b);this.set(a,b,c);return void 0!==c?c:b},remove:function(a,b){var d,e=a[this.expando];if(void 0!==e){if(void 0!==b)for(Array.isArray(b)?b=b.map(c.camelCase):(b=c.camelCase(b),b=b in e?[b]:b.match(S)||[]),d=b.length;d--;)delete e[b[d]];if(void 0===b||c.isEmptyObject(e))a.nodeType?a[this.expando]=void 0:delete a[this.expando]}},hasData:function(a){a=a[this.expando];return void 0!==a&&!c.isEmptyObject(a)}};var v=new da,M=new da,\nSb=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,Rb=/[A-Z]/g;c.extend({hasData:function(a){return M.hasData(a)||v.hasData(a)},data:function(a,b,c){return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return v.access(a,b,c)},_removeData:function(a,b){v.remove(a,b)}});c.fn.extend({data:function(a,b){var d,e=this[0],f=e&&e.attributes;if(void 0===a){if(this.length){var g=M.get(e);if(1===e.nodeType&&!v.get(e,"hasDataAttrs")){for(d=f.length;d--;)if(f[d]){var h=f[d].name;0===h.indexOf("data-")&&\n(h=c.camelCase(h.slice(5)),ab(e,h,g[h]))}v.set(e,"hasDataAttrs",!0)}}return g}return"object"===typeof a?this.each(function(){M.set(this,a)}):aa(this,function(b){if(e&&void 0===b){var c=M.get(e,a);if(void 0!==c)return c;c=ab(e,a);if(void 0!==c)return c}else this.each(function(){M.set(this,a,b)})},null,b,1<arguments.length,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}});c.extend({queue:function(a,b,d){if(a){b=(b||"fx")+"queue";var e=v.get(a,b);d&&(!e||Array.isArray(d)?\ne=v.access(a,b,c.makeArray(d)):e.push(d));return e||[]}},dequeue:function(a,b){b=b||"fx";var d=c.queue(a,b),e=d.length,f=d.shift(),g=c._queueHooks(a,b),h=function(){c.dequeue(a,b)};"inprogress"===f&&(f=d.shift(),e--);f&&("fx"===b&&d.unshift("inprogress"),delete g.stop,f.call(a,h,g));!e&&g&&g.empty.fire()},_queueHooks:function(a,b){var d=b+"queueHooks";return v.get(a,d)||v.access(a,d,{empty:c.Callbacks("once memory").add(function(){v.remove(a,[b+"queue",d])})})}});c.fn.extend({queue:function(a,b){var d=\n2;"string"!==typeof a&&(b=a,a="fx",d--);return arguments.length<d?c.queue(this[0],a):void 0===b?this:this.each(function(){var d=c.queue(this,a,b);c._queueHooks(this,a);"fx"===a&&"inprogress"!==d[0]&&c.dequeue(this,a)})},dequeue:function(a){return this.each(function(){c.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var d,e=1,f=c.Deferred(),g=this,h=this.length,l=function(){--e||f.resolveWith(g,[g])};"string"!==typeof a&&(b=a,a=void 0);for(a=a||"fx";h--;)(d=\nv.get(g[h],a+"queueHooks"))&&d.empty&&(e++,d.empty.add(l));l();return f.promise(b)}});var Db=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,oa=new RegExp("^(?:([+-])=|)("+Db+")([a-z%]*)$","i"),ba=["Top","Right","Bottom","Left"],wa=function(a,b){a=b||a;return"none"===a.style.display||""===a.style.display&&c.contains(a.ownerDocument,a)&&"none"===c.css(a,"display")},Eb=function(a,b,c,e){var d,g={};for(d in b)g[d]=a.style[d],a.style[d]=b[d];c=c.apply(a,e||[]);for(d in b)a.style[d]=g[d];return c},cb={};\nc.fn.extend({show:function(){return pa(this,!0)},hide:function(){return pa(this)},toggle:function(a){return"boolean"===typeof a?a?this.show():this.hide():this.each(function(){wa(this)?c(this).show():c(this).hide()})}});var Fb=/^(?:checkbox|radio)$/i,eb=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i,fb=/^$|\\/(?:java|ecma)script/i,D={option:[1,"<select multiple=\'multiple\'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,\n"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};D.optgroup=D.option;D.tbody=D.tfoot=D.colgroup=D.caption=D.thead;D.th=D.td;var Tb=/<|&#?\\w+;/;(function(){var a=p.createDocumentFragment().appendChild(p.createElement("div")),b=p.createElement("input");b.setAttribute("type","radio");b.setAttribute("checked","checked");b.setAttribute("name","t");a.appendChild(b);q.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked;a.innerHTML="<textarea>x</textarea>";q.noCloneChecked=!!a.cloneNode(!0).lastChild.defaultValue})();\nvar Ma=p.documentElement,nc=/^key/,oc=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Gb=/^([^.]*)(?:\\.(.+)|)/;c.event={global:{},add:function(a,b,d,e,f){var g,h,l,k,m;if(l=v.get(a)){if(d.handler){var n=d;d=n.handler;f=n.selector}f&&c.find.matchesSelector(Ma,f);d.guid||(d.guid=c.guid++);(h=l.events)||(h=l.events={});(g=l.handle)||(g=l.handle=function(b){return"undefined"!==typeof c&&c.event.triggered!==b.type?c.event.dispatch.apply(a,arguments):void 0});b=(b||"").match(S)||[""];for(l=b.length;l--;){var u=\nGb.exec(b[l])||[];var r=k=u[1];var p=(u[2]||"").split(".").sort();r&&(u=c.event.special[r]||{},r=(f?u.delegateType:u.bindType)||r,u=c.event.special[r]||{},k=c.extend({type:r,origType:k,data:e,handler:d,guid:d.guid,selector:f,needsContext:f&&c.expr.match.needsContext.test(f),namespace:p.join(".")},n),(m=h[r])||(m=h[r]=[],m.delegateCount=0,u.setup&&!1!==u.setup.call(a,e,p,g)||a.addEventListener&&a.addEventListener(r,g)),u.add&&(u.add.call(a,k),k.handler.guid||(k.handler.guid=d.guid)),f?m.splice(m.delegateCount++,\n0,k):m.push(k),c.event.global[r]=!0)}}},remove:function(a,b,d,e,f){var g,h,l,k,m,n=v.hasData(a)&&v.get(a);if(n&&(l=n.events)){b=(b||"").match(S)||[""];for(k=b.length;k--;){var u=Gb.exec(b[k])||[];var r=m=u[1];var p=(u[2]||"").split(".").sort();if(r){var q=c.event.special[r]||{};r=(e?q.delegateType:q.bindType)||r;var B=l[r]||[];u=u[2]&&new RegExp("(^|\\\\.)"+p.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)");for(h=g=B.length;g--;){var A=B[g];!f&&m!==A.origType||d&&d.guid!==A.guid||u&&!u.test(A.namespace)||e&&e!==A.selector&&\n("**"!==e||!A.selector)||(B.splice(g,1),A.selector&&B.delegateCount--,q.remove&&q.remove.call(a,A))}h&&!B.length&&(q.teardown&&!1!==q.teardown.call(a,p,n.handle)||c.removeEvent(a,r,n.handle),delete l[r])}else for(r in l)c.event.remove(a,r+b[k],d,e,!0)}c.isEmptyObject(l)&&v.remove(a,"handle events")}},dispatch:function(a){var b=c.event.fix(a),d,e,f,g=Array(arguments.length);var h=(v.get(this,"events")||{})[b.type]||[];var l=c.event.special[b.type]||{};g[0]=b;for(d=1;d<arguments.length;d++)g[d]=arguments[d];\nb.delegateTarget=this;if(!l.preDispatch||!1!==l.preDispatch.call(this,b)){var k=c.event.handlers.call(this,b,h);for(d=0;(f=k[d++])&&!b.isPropagationStopped();)for(b.currentTarget=f.elem,h=0;(e=f.handlers[h++])&&!b.isImmediatePropagationStopped();)if(!b.rnamespace||b.rnamespace.test(e.namespace))b.handleObj=e,b.data=e.data,e=((c.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,g),void 0!==e&&!1===(b.result=e)&&(b.preventDefault(),b.stopPropagation());l.postDispatch&&l.postDispatch.call(this,\nb);return b.result}},handlers:function(a,b){var d,e=[],f=b.delegateCount,g=a.target;if(f&&g.nodeType&&!("click"===a.type&&1<=a.button))for(;g!==this;g=g.parentNode||this)if(1===g.nodeType&&("click"!==a.type||!0!==g.disabled)){var h=[];var l={};for(d=0;d<f;d++){var k=b[d];var m=k.selector+" ";void 0===l[m]&&(l[m]=k.needsContext?-1<c(m,this).index(g):c.find(m,this,null,[g]).length);l[m]&&h.push(k)}h.length&&e.push({elem:g,handlers:h})}f<b.length&&e.push({elem:this,handlers:b.slice(f)});return e},addProp:function(a,\nb){Object.defineProperty(c.Event.prototype,a,{enumerable:!0,configurable:!0,get:c.isFunction(b)?function(){if(this.originalEvent)return b(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[a]},set:function(b){Object.defineProperty(this,a,{enumerable:!0,configurable:!0,writable:!0,value:b})}})},fix:function(a){return a[c.expando]?a:new c.Event(a)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==gb()&&this.focus)return this.focus(),!1},delegateType:"focusin"},\nblur:{trigger:function(){if(this===gb()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&B(this,"input"))return this.click(),!1},_default:function(a){return B(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}};c.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)};c.Event=function(a,b){if(!(this instanceof c.Event))return new c.Event(a,\nb);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&!1===a.returnValue?Ba:Z,this.target=a.target&&3===a.target.nodeType?a.target.parentNode:a.target,this.currentTarget=a.currentTarget,this.relatedTarget=a.relatedTarget):this.type=a;b&&c.extend(this,b);this.timeStamp=a&&a.timeStamp||c.now();this[c.expando]=!0};c.Event.prototype={constructor:c.Event,isDefaultPrevented:Z,isPropagationStopped:Z,isImmediatePropagationStopped:Z,isSimulated:!1,\npreventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Ba;a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Ba;a&&!this.isSimulated&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Ba;a&&!this.isSimulated&&a.stopImmediatePropagation();this.stopPropagation()}};c.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,\neventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(a){var b=a.button;return null==a.which&&nc.test(a.type)?null!=a.charCode?a.charCode:a.keyCode:!a.which&&void 0!==b&&oc.test(a.type)?b&1?1:b&2?3:b&4?2:0:a.which}},c.event.addProp);c.each({mouseenter:"mouseover",mouseleave:"mouseout",\npointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){c.event.special[a]={delegateType:b,bindType:b,handle:function(a){var d=a.relatedTarget,f=a.handleObj;if(!d||d!==this&&!c.contains(this,d)){a.type=f.origType;var g=f.handler.apply(this,arguments);a.type=b}return g}}});c.fn.extend({on:function(a,b,c,e){return Oa(this,a,b,c,e)},one:function(a,b,c,e){return Oa(this,a,b,c,e,1)},off:function(a,b,d){if(a&&a.preventDefault&&a.handleObj){var e=a.handleObj;c(a.delegateTarget).off(e.namespace?\ne.origType+"."+e.namespace:e.origType,e.selector,e.handler);return this}if("object"===typeof a){for(e in a)this.off(e,b,a[e]);return this}if(!1===b||"function"===typeof b)d=b,b=void 0;!1===d&&(d=Z);return this.each(function(){c.event.remove(this,a,d,b)})}});var pc=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,qc=/<script|<style|<link/i,Xb=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Wb=/^true\\/(.*)/,Yb=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;c.extend({htmlPrefilter:function(a){return a.replace(pc,\n"<$1></$2>")},clone:function(a,b,d){var e,f=a.cloneNode(!0),g=c.contains(a.ownerDocument,a);if(!(q.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||c.isXMLDoc(a))){var h=H(f);var l=H(a);var k=0;for(e=l.length;k<e;k++){var m=l[k],n=h[k],u=n.nodeName.toLowerCase();if("input"===u&&Fb.test(m.type))n.checked=m.checked;else if("input"===u||"textarea"===u)n.defaultValue=m.defaultValue}}if(b)if(d)for(l=l||H(a),h=h||H(f),k=0,e=l.length;k<e;k++)ib(l[k],h[k]);else ib(a,f);h=H(f,"script");0<h.length&&Na(h,!g&&\nH(a,"script"));return f},cleanData:function(a){for(var b,d,e,f=c.event.special,g=0;void 0!==(d=a[g]);g++)if(La(d)){if(b=d[v.expando]){if(b.events)for(e in b.events)f[e]?c.event.remove(d,e):c.removeEvent(d,e,b.handle);d[v.expando]=void 0}d[M.expando]&&(d[M.expando]=void 0)}}});c.fn.extend({detach:function(a){return kb(this,a,!0)},remove:function(a){return kb(this,a)},text:function(a){return aa(this,function(a){return void 0===a?c.text(this):this.empty().each(function(){if(1===this.nodeType||11===this.nodeType||\n9===this.nodeType)this.textContent=a})},null,a,arguments.length)},append:function(){return qa(this,arguments,function(a){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||hb(this,a).appendChild(a)})},prepend:function(){return qa(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=hb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return qa(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return qa(this,\narguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(c.cleanData(H(a,!1)),a.textContent="");return this},clone:function(a,b){a=null==a?!1:a;b=null==b?a:b;return this.map(function(){return c.clone(this,a,b)})},html:function(a){return aa(this,function(a){var b=this[0]||{},e=0,f=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"===typeof a&&!qc.test(a)&&!D[(eb.exec(a)||["",\n""])[1].toLowerCase()]){a=c.htmlPrefilter(a);try{for(;e<f;e++)b=this[e]||{},1===b.nodeType&&(c.cleanData(H(b,!1)),b.innerHTML=a);b=0}catch(g){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return qa(this,arguments,function(b){var d=this.parentNode;0>c.inArray(this,a)&&(c.cleanData(H(this)),d&&d.replaceChild(b,this))},a)}});c.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){c.fn[a]=\nfunction(a){for(var d=[],f=c(a),g=f.length-1,h=0;h<=g;h++)a=h===g?this:this.clone(!0),c(f[h])[b](a),Ua.apply(d,a.get());return this.pushStack(d)}});var lb=/^margin/,Pa=new RegExp("^("+Db+")(?!px)[a-z%]+$","i"),Ga=function(a){var b=a.ownerDocument.defaultView;b&&b.opener||(b=n);return b.getComputedStyle(a)};(function(){function a(){if(h){h.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%";h.innerHTML="";Ma.appendChild(g);var a=\nn.getComputedStyle(h);b="1%"!==a.top;f="2px"===a.marginLeft;d="4px"===a.width;h.style.marginRight="50%";e="4px"===a.marginRight;Ma.removeChild(g);h=null}}var b,d,e,f,g=p.createElement("div"),h=p.createElement("div");h.style&&(h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",q.clearCloneStyle="content-box"===h.style.backgroundClip,g.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",g.appendChild(h),c.extend(q,{pixelPosition:function(){a();\nreturn b},boxSizingReliable:function(){a();return d},pixelMarginRight:function(){a();return e},reliableMarginLeft:function(){a();return f}}))})();var rc=/^(none|table(?!-c[ea]).+)/,Hb=/^--/,sc={position:"absolute",visibility:"hidden",display:"block"},Ib={letterSpacing:"0",fontWeight:"400"},pb=["Webkit","Moz","ms"],ob=p.createElement("div").style;c.extend({cssHooks:{opacity:{get:function(a,b){if(b)return a=ra(a,"opacity"),""===a?"1":a}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,\nflexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,d,e){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var f,g=c.camelCase(b),h=Hb.test(b),l=a.style;h||(b=nb(g));var k=c.cssHooks[b]||c.cssHooks[g];if(void 0!==d){var m=typeof d;"string"===m&&(f=oa.exec(d))&&f[1]&&(d=bb(a,b,f),m="number");null!=d&&d===d&&("number"===m&&(d+=f&&f[3]||(c.cssNumber[g]?"":"px")),q.clearCloneStyle||""!==d||0!==\nb.indexOf("background")||(l[b]="inherit"),k&&"set"in k&&void 0===(d=k.set(a,d,e))||(h?l.setProperty(b,d):l[b]=d))}else return k&&"get"in k&&void 0!==(f=k.get(a,!1,e))?f:l[b]}},css:function(a,b,d,e){var f;var g=c.camelCase(b);Hb.test(b)||(b=nb(g));(g=c.cssHooks[b]||c.cssHooks[g])&&"get"in g&&(f=g.get(a,!0,d));void 0===f&&(f=ra(a,b,e));"normal"===f&&b in Ib&&(f=Ib[b]);return""===d||d?(a=parseFloat(f),!0===d||isFinite(a)?a||0:f):f}});c.each(["height","width"],function(a,b){c.cssHooks[b]={get:function(a,\ne,f){if(e)return!rc.test(c.css(a,"display"))||a.getClientRects().length&&a.getBoundingClientRect().width?sb(a,b,f):Eb(a,sc,function(){return sb(a,b,f)})},set:function(a,e,f){var d,h=f&&Ga(a);(f=f&&rb(a,b,f,"border-box"===c.css(a,"boxSizing",!1,h),h))&&(d=oa.exec(e))&&"px"!==(d[3]||"px")&&(a.style[b]=e,e=c.css(a,b));return qb(a,e,f)}}});c.cssHooks.marginLeft=mb(q.reliableMarginLeft,function(a,b){if(b)return(parseFloat(ra(a,"marginLeft"))||a.getBoundingClientRect().left-Eb(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+\n"px"});c.each({margin:"",padding:"",border:"Width"},function(a,b){c.cssHooks[a+b]={expand:function(c){var d=0,f={};for(c="string"===typeof c?c.split(" "):[c];4>d;d++)f[a+ba[d]+b]=c[d]||c[d-2]||c[0];return f}};lb.test(a)||(c.cssHooks[a+b].set=qb)});c.fn.extend({css:function(a,b){return aa(this,function(a,b,f){var d,e={},l=0;if(Array.isArray(b)){f=Ga(a);for(d=b.length;l<d;l++)e[b[l]]=c.css(a,b[l],!1,f);return e}return void 0!==f?c.style(a,b,f):c.css(a,b)},a,b,1<arguments.length)}});c.Tween=I;I.prototype=\n{constructor:I,init:function(a,b,d,e,f,g){this.elem=a;this.prop=d;this.easing=f||c.easing._default;this.options=b;this.start=this.now=this.cur();this.end=e;this.unit=g||(c.cssNumber[d]?"":"px")},cur:function(){var a=I.propHooks[this.prop];return a&&a.get?a.get(this):I.propHooks._default.get(this)},run:function(a){var b,d=I.propHooks[this.prop];this.pos=this.options.duration?b=c.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):b=a;this.now=(this.end-this.start)*b+this.start;\nthis.options.step&&this.options.step.call(this.elem,this.now,this);d&&d.set?d.set(this):I.propHooks._default.set(this);return this}};I.prototype.init.prototype=I.prototype;I.propHooks={_default:{get:function(a){return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(a=c.css(a.elem,a.prop,""))&&"auto"!==a?a:0},set:function(a){if(c.fx.step[a.prop])c.fx.step[a.prop](a);else 1!==a.elem.nodeType||null==a.elem.style[c.cssProps[a.prop]]&&!c.cssHooks[a.prop]?a.elem[a.prop]=\na.now:c.style(a.elem,a.prop,a.now+a.unit)}}};I.propHooks.scrollTop=I.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}};c.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"};c.fx=I.prototype.init;c.fx.step={};var sa,Ha,tc=/^(?:toggle|show|hide)$/,uc=/queueHooks$/;c.Animation=c.extend(T,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);bb(c.elem,a,oa.exec(b),c);return c}]},tweener:function(a,\nb){c.isFunction(a)?(b=a,a=["*"]):a=a.match(S);for(var d,e=0,f=a.length;e<f;e++)d=a[e],T.tweeners[d]=T.tweeners[d]||[],T.tweeners[d].unshift(b)},prefilters:[function(a,b,d){var e;var f="width"in b||"height"in b;var g=this,h={},l=a.style,k=a.nodeType&&wa(a),m=v.get(a,"fxshow");if(!d.queue){var n=c._queueHooks(a,"fx");if(null==n.unqueued){n.unqueued=0;var u=n.empty.fire;n.empty.fire=function(){n.unqueued||u()}}n.unqueued++;g.always(function(){g.always(function(){n.unqueued--;c.queue(a,"fx").length||\nn.empty.fire()})})}for(e in b){var r=b[e];if(tc.test(r)){delete b[e];var p=p||"toggle"===r;if(r===(k?"hide":"show"))if("show"===r&&m&&void 0!==m[e])k=!0;else continue;h[e]=m&&m[e]||c.style(a,e)}}if((b=!c.isEmptyObject(b))||!c.isEmptyObject(h)){if(f&&1===a.nodeType){d.overflow=[l.overflow,l.overflowX,l.overflowY];var q=m&&m.display;null==q&&(q=v.get(a,"display"));f=c.css(a,"display");"none"===f&&(q?f=q:(pa([a],!0),q=a.style.display||q,f=c.css(a,"display"),pa([a])));("inline"===f||"inline-block"===\nf&&null!=q)&&"none"===c.css(a,"float")&&(b||(g.done(function(){l.display=q}),null==q&&(f=l.display,q="none"===f?"":f)),l.display="inline-block")}d.overflow&&(l.overflow="hidden",g.always(function(){l.overflow=d.overflow[0];l.overflowX=d.overflow[1];l.overflowY=d.overflow[2]}));b=!1;for(e in h)b||(m?"hidden"in m&&(k=m.hidden):m=v.access(a,"fxshow",{display:q}),p&&(m.hidden=!k),k&&pa([a],!0),g.done(function(){k||pa([a]);v.remove(a,"fxshow");for(e in h)c.style(a,e,h[e])})),b=ub(k?m[e]:0,e,g),e in m||\n(m[e]=b.start,k&&(b.end=b.start,b.start=0))}}],prefilter:function(a,b){b?T.prefilters.unshift(a):T.prefilters.push(a)}});c.speed=function(a,b,d){var e=a&&"object"===typeof a?c.extend({},a):{complete:d||!d&&b||c.isFunction(a)&&a,duration:a,easing:d&&b||b&&!c.isFunction(b)&&b};c.fx.off?e.duration=0:"number"!==typeof e.duration&&(e.duration=e.duration in c.fx.speeds?c.fx.speeds[e.duration]:c.fx.speeds._default);if(null==e.queue||!0===e.queue)e.queue="fx";e.old=e.complete;e.complete=function(){c.isFunction(e.old)&&\ne.old.call(this);e.queue&&c.dequeue(this,e.queue)};return e};c.fn.extend({fadeTo:function(a,b,c,e){return this.filter(wa).css("opacity",0).show().end().animate({opacity:b},a,c,e)},animate:function(a,b,d,e){var f=c.isEmptyObject(a),g=c.speed(b,d,e);b=function(){var b=T(this,c.extend({},a),g);(f||v.get(this,"finish"))&&b.stop(!0)};b.finish=b;return f||!1===g.queue?this.each(b):this.queue(g.queue,b)},stop:function(a,b,d){var e=function(a){var b=a.stop;delete a.stop;b(d)};"string"!==typeof a&&(d=b,b=\na,a=void 0);b&&!1!==a&&this.queue(a||"fx",[]);return this.each(function(){var b=!0,g=null!=a&&a+"queueHooks",h=c.timers,l=v.get(this);if(g)l[g]&&l[g].stop&&e(l[g]);else for(g in l)l[g]&&l[g].stop&&uc.test(g)&&e(l[g]);for(g=h.length;g--;)h[g].elem!==this||null!=a&&h[g].queue!==a||(h[g].anim.stop(d),b=!1,h.splice(g,1));!b&&d||c.dequeue(this,a)})},finish:function(a){!1!==a&&(a=a||"fx");return this.each(function(){var b=v.get(this),d=b[a+"queue"];var e=b[a+"queueHooks"];var f=c.timers,g=d?d.length:0;\nb.finish=!0;c.queue(this,a,[]);e&&e.stop&&e.stop.call(this,!0);for(e=f.length;e--;)f[e].elem===this&&f[e].queue===a&&(f[e].anim.stop(!0),f.splice(e,1));for(e=0;e<g;e++)d[e]&&d[e].finish&&d[e].finish.call(this);delete b.finish})}});c.each(["toggle","show","hide"],function(a,b){var d=c.fn[b];c.fn[b]=function(a,c,g){return null==a||"boolean"===typeof a?d.apply(this,arguments):this.animate(Ia(b,!0),a,c,g)}});c.each({slideDown:Ia("show"),slideUp:Ia("hide"),slideToggle:Ia("toggle"),fadeIn:{opacity:"show"},\nfadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){c.fn[a]=function(a,c,f){return this.animate(b,a,c,f)}});c.timers=[];c.fx.tick=function(){var a=0,b=c.timers;for(sa=c.now();a<b.length;a++){var d=b[a];d()||b[a]!==d||b.splice(a--,1)}b.length||c.fx.stop();sa=void 0};c.fx.timer=function(a){c.timers.push(a);c.fx.start()};c.fx.interval=13;c.fx.start=function(){Ha||(Ha=!0,Qa())};c.fx.stop=function(){Ha=null};c.fx.speeds={slow:600,fast:200,_default:400};c.fn.delay=function(a,b){a=c.fx?\nc.fx.speeds[a]||a:a;return this.queue(b||"fx",function(b,c){var d=n.setTimeout(b,a);c.stop=function(){n.clearTimeout(d)}})};(function(){var a=p.createElement("input"),b=p.createElement("select").appendChild(p.createElement("option"));a.type="checkbox";q.checkOn=""!==a.value;q.optSelected=b.selected;a=p.createElement("input");a.value="t";a.type="radio";q.radioValue="t"===a.value})();var ua=c.expr.attrHandle;c.fn.extend({attr:function(a,b){return aa(this,c.attr,a,b,1<arguments.length)},removeAttr:function(a){return this.each(function(){c.removeAttr(this,\na)})}});c.extend({attr:function(a,b,d){var e,f,g=a.nodeType;if(3!==g&&8!==g&&2!==g){if("undefined"===typeof a.getAttribute)return c.prop(a,b,d);1===g&&c.isXMLDoc(a)||(f=c.attrHooks[b.toLowerCase()]||(c.expr.match.bool.test(b)?vc:void 0));if(void 0!==d){if(null===d){c.removeAttr(a,b);return}if(f&&"set"in f&&void 0!==(e=f.set(a,d,b)))return e;a.setAttribute(b,d+"");return d}if(f&&"get"in f&&null!==(e=f.get(a,b)))return e;e=c.find.attr(a,b);return null==e?void 0:e}},attrHooks:{type:{set:function(a,b){if(!q.radioValue&&\n"radio"===b&&B(a,"input")){var c=a.value;a.setAttribute("type",b);c&&(a.value=c);return b}}}},removeAttr:function(a,b){var c=0,e=b&&b.match(S);if(e&&1===a.nodeType)for(;b=e[c++];)a.removeAttribute(b)}});var vc={set:function(a,b,d){!1===b?c.removeAttr(a,d):a.setAttribute(d,d);return d}};c.each(c.expr.match.bool.source.match(/\\w+/g),function(a,b){var d=ua[b]||c.find.attr;ua[b]=function(a,b,c){var e=b.toLowerCase();if(!c){var f=ua[e];ua[e]=g;var g=null!=d(a,b,c)?e:null;ua[e]=f}return g}});var wc=/^(?:input|select|textarea|button)$/i,\nxc=/^(?:a|area)$/i;c.fn.extend({prop:function(a,b){return aa(this,c.prop,a,b,1<arguments.length)},removeProp:function(a){return this.each(function(){delete this[c.propFix[a]||a]})}});c.extend({prop:function(a,b,d){var e,f=a.nodeType;if(3!==f&&8!==f&&2!==f){if(1!==f||!c.isXMLDoc(a)){b=c.propFix[b]||b;var g=c.propHooks[b]}return void 0!==d?g&&"set"in g&&void 0!==(e=g.set(a,d,b))?e:a[b]=d:g&&"get"in g&&null!==(e=g.get(a,b))?e:a[b]}},propHooks:{tabIndex:{get:function(a){var b=c.find.attr(a,"tabindex");\nreturn b?parseInt(b,10):wc.test(a.nodeName)||xc.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}});q.optSelected||(c.propHooks.selected={get:function(a){(a=a.parentNode)&&a.parentNode&&a.parentNode.selectedIndex;return null},set:function(a){if(a=a.parentNode)a.selectedIndex,a.parentNode&&a.parentNode.selectedIndex}});c.each("tabIndex readOnly maxLength cellSpacing cellPadding rowSpan colSpan useMap frameBorder contentEditable".split(" "),function(){c.propFix[this.toLowerCase()]=\nthis});c.fn.extend({addClass:function(a){var b,d,e,f,g,h=0;if(c.isFunction(a))return this.each(function(b){c(this).addClass(a.call(this,b,ea(this)))});if("string"===typeof a&&a)for(b=a.match(S)||[];d=this[h++];){var l=ea(d);if(e=1===d.nodeType&&" "+L(l)+" "){for(g=0;f=b[g++];)0>e.indexOf(" "+f+" ")&&(e+=f+" ");e=L(e);l!==e&&d.setAttribute("class",e)}}return this},removeClass:function(a){var b,d,e,f,g,h=0;if(c.isFunction(a))return this.each(function(b){c(this).removeClass(a.call(this,b,ea(this)))});\nif(!arguments.length)return this.attr("class","");if("string"===typeof a&&a)for(b=a.match(S)||[];d=this[h++];){var l=ea(d);if(e=1===d.nodeType&&" "+L(l)+" "){for(g=0;f=b[g++];)for(;-1<e.indexOf(" "+f+" ");)e=e.replace(" "+f+" "," ");e=L(e);l!==e&&d.setAttribute("class",e)}}return this},toggleClass:function(a,b){var d=typeof a;return"boolean"===typeof b&&"string"===d?b?this.addClass(a):this.removeClass(a):c.isFunction(a)?this.each(function(d){c(this).toggleClass(a.call(this,d,ea(this),b),b)}):this.each(function(){var b,\nf;if("string"===d){var g=0;var h=c(this);for(f=a.match(S)||[];b=f[g++];)h.hasClass(b)?h.removeClass(b):h.addClass(b)}else if(void 0===a||"boolean"===d)(b=ea(this))&&v.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||!1===a?"":v.get(this,"__className__")||"")})},hasClass:function(a){var b,c=0;for(a=" "+a+" ";b=this[c++];)if(1===b.nodeType&&-1<(" "+L(ea(b))+" ").indexOf(a))return!0;return!1}});var yc=/\\r/g;c.fn.extend({val:function(a){var b,d,e=this[0];if(arguments.length){var f=\nc.isFunction(a);return this.each(function(d){1===this.nodeType&&(d=f?a.call(this,d,c(this).val()):a,null==d?d="":"number"===typeof d?d+="":Array.isArray(d)&&(d=c.map(d,function(a){return null==a?"":a+""})),b=c.valHooks[this.type]||c.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,d,"value")||(this.value=d))})}if(e){if((b=c.valHooks[e.type]||c.valHooks[e.nodeName.toLowerCase()])&&"get"in b&&void 0!==(d=b.get(e,"value")))return d;d=e.value;return"string"===typeof d?d.replace(yc,\n""):null==d?"":d}}});c.extend({valHooks:{option:{get:function(a){var b=c.find.attr(a,"value");return null!=b?b:L(c.text(a))}},select:{get:function(a){var b=a.options,d=a.selectedIndex,e="select-one"===a.type,f=e?null:[],g=e?d+1:b.length;for(a=0>d?g:e?d:0;a<g;a++){var h=b[a];if(!(!h.selected&&a!==d||h.disabled||h.parentNode.disabled&&B(h.parentNode,"optgroup"))){h=c(h).val();if(e)return h;f.push(h)}}return f},set:function(a,b){for(var d,e=a.options,f=c.makeArray(b),g=e.length;g--;)if(b=e[g],b.selected=\n-1<c.inArray(c.valHooks.option.get(b),f))d=!0;d||(a.selectedIndex=-1);return f}}}});c.each(["radio","checkbox"],function(){c.valHooks[this]={set:function(a,b){if(Array.isArray(b))return a.checked=-1<c.inArray(c(a).val(),b)}};q.checkOn||(c.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var Jb=/^(?:focusinfocus|focusoutblur)$/;c.extend(c.event,{trigger:function(a,b,d,e){var f,g,h=[d||p],l=Ka.call(a,"type")?a.type:a;var k=Ka.call(a,"namespace")?a.namespace.split("."):\n[];var m=f=d=d||p;if(3!==d.nodeType&&8!==d.nodeType&&!Jb.test(l+c.event.triggered)){-1<l.indexOf(".")&&(k=l.split("."),l=k.shift(),k.sort());var t=0>l.indexOf(":")&&"on"+l;a=a[c.expando]?a:new c.Event(l,"object"===typeof a&&a);a.isTrigger=e?2:3;a.namespace=k.join(".");a.rnamespace=a.namespace?new RegExp("(^|\\\\.)"+k.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"):null;a.result=void 0;a.target||(a.target=d);b=null==b?[a]:c.makeArray(b,[a]);k=c.event.special[l]||{};if(e||!k.trigger||!1!==k.trigger.apply(d,b)){if(!e&&\n!k.noBubble&&!c.isWindow(d)){var q=k.delegateType||l;Jb.test(q+l)||(m=m.parentNode);for(;m;m=m.parentNode)h.push(m),f=m;f===(d.ownerDocument||p)&&h.push(f.defaultView||f.parentWindow||n)}for(f=0;(m=h[f++])&&!a.isPropagationStopped();)a.type=1<f?q:k.bindType||l,(g=(v.get(m,"events")||{})[a.type]&&v.get(m,"handle"))&&g.apply(m,b),(g=t&&m[t])&&g.apply&&La(m)&&(a.result=g.apply(m,b),!1===a.result&&a.preventDefault());a.type=l;e||a.isDefaultPrevented()||k._default&&!1!==k._default.apply(h.pop(),b)||!La(d)||\n!t||!c.isFunction(d[l])||c.isWindow(d)||((f=d[t])&&(d[t]=null),c.event.triggered=l,d[l](),c.event.triggered=void 0,f&&(d[t]=f));return a.result}}},simulate:function(a,b,d){a=c.extend(new c.Event,d,{type:a,isSimulated:!0});c.event.trigger(a,null,b)}});c.fn.extend({trigger:function(a,b){return this.each(function(){c.event.trigger(a,b,this)})},triggerHandler:function(a,b){var d=this[0];if(d)return c.event.trigger(a,b,d,!0)}});c.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),\nfunction(a,b){c.fn[b]=function(a,c){return 0<arguments.length?this.on(b,null,a,c):this.trigger(b)}});c.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});q.focusin="onfocusin"in n;q.focusin||c.each({focus:"focusin",blur:"focusout"},function(a,b){var d=function(a){c.event.simulate(b,a.target,c.event.fix(a))};c.event.special[b]={setup:function(){var c=this.ownerDocument||this,f=v.access(c,b);f||c.addEventListener(a,d,!0);v.access(c,b,(f||0)+1)},teardown:function(){var c=this.ownerDocument||\nthis,f=v.access(c,b)-1;f?v.access(c,b,f):(c.removeEventListener(a,d,!0),v.remove(c,b))}}});var za=n.location,Kb=c.now(),Wa=/\\?/;c.parseXML=function(a){if(!a||"string"!==typeof a)return null;try{var b=(new n.DOMParser).parseFromString(a,"text/xml")}catch(d){b=void 0}b&&!b.getElementsByTagName("parsererror").length||c.error("Invalid XML: "+a);return b};var $b=/\\[\\]$/,Lb=/\\r?\\n/g,zc=/^(?:submit|button|image|reset|file)$/i,Ac=/^(?:input|select|textarea|keygen)/i;c.param=function(a,b){var d,e=[],f=function(a,\nb){b=c.isFunction(b)?b():b;e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(null==b?"":b)};if(Array.isArray(a)||a.jquery&&!c.isPlainObject(a))c.each(a,function(){f(this.name,this.value)});else for(d in a)Ra(d,a[d],b,f);return e.join("&")};c.fn.extend({serialize:function(){return c.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=c.prop(this,"elements");return a?c.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!c(this).is(":disabled")&&\nAc.test(this.nodeName)&&!zc.test(a)&&(this.checked||!Fb.test(a))}).map(function(a,b){a=c(this).val();return null==a?null:Array.isArray(a)?c.map(a,function(a){return{name:b.name,value:a.replace(Lb,"\\r\\n")}}):{name:b.name,value:a.replace(Lb,"\\r\\n")}}).get()}});var Bc=/%20/g,Cc=/#.*$/,Dc=/([?&])_=[^&]*/,Ec=/^(.*?):[ \\t]*([^\\r\\n]*)$/mg,Fc=/^(?:GET|HEAD)$/,Gc=/^\\/\\//,Mb={},Sa={},Nb="*/".concat("*"),Xa=p.createElement("a");Xa.href=za.href;c.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:za.href,\ntype:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(za.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,\n"text xml":c.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Ta(Ta(a,c.ajaxSettings),b):Ta(c.ajaxSettings,a)},ajaxPrefilter:vb(Mb),ajaxTransport:vb(Sa),ajax:function(a,b){function d(a,b,d,g){var k=b;if(!O){O=!0;h&&n.clearTimeout(h);e=void 0;f=g||"";z.readyState=0<a?4:0;g=200<=a&&300>a||304===a;if(d){var p=m;for(var u=z,r,x,N,y,C=p.contents,D=p.dataTypes;"*"===D[0];)D.shift(),void 0===r&&(r=p.mimeType||u.getResponseHeader("Content-Type"));if(r)for(x in C)if(C[x]&&C[x].test(r)){D.unshift(x);\nbreak}if(D[0]in d)N=D[0];else{for(x in d){if(!D[0]||p.converters[x+" "+D[0]]){N=x;break}y||(y=x)}N=N||y}N?(N!==D[0]&&D.unshift(N),p=d[N]):p=void 0}a:{d=m;r=p;x=z;N=g;var I;u={};C=d.dataTypes.slice();if(C[1])for(H in d.converters)u[H.toLowerCase()]=d.converters[H];for(y=C.shift();y;){d.responseFields[y]&&(x[d.responseFields[y]]=r);!R&&N&&d.dataFilter&&(r=d.dataFilter(r,d.dataType));var R=y;if(y=C.shift())if("*"===y)y=R;else if("*"!==R&&R!==y){var H=u[R+" "+y]||u["* "+y];if(!H)for(I in u)if(p=I.split(" "),\np[1]===y&&(H=u[R+" "+p[0]]||u["* "+p[0]])){!0===H?H=u[I]:!0!==u[I]&&(y=p[0],C.unshift(p[1]));break}if(!0!==H)if(H&&d.throws)r=H(r);else try{r=H(r)}catch(hc){p={state:"parsererror",error:H?hc:"No conversion from "+R+" to "+y};break a}}}p={state:"success",data:r}}if(g)if(m.ifModified&&((k=z.getResponseHeader("Last-Modified"))&&(c.lastModified[G]=k),(k=z.getResponseHeader("etag"))&&(c.etag[G]=k)),204===a||"HEAD"===m.type)k="nocontent";else if(304===a)k="notmodified";else{k=p.state;var M=p.data;var L=\np.error;g=!L}else if(L=k,a||!k)k="error",0>a&&(a=0);z.status=a;z.statusText=(b||k)+"";g?v.resolveWith(t,[M,k,z]):v.rejectWith(t,[z,k,L]);z.statusCode(A);A=void 0;l&&q.trigger(g?"ajaxSuccess":"ajaxError",[z,m,g?M:L]);B.fireWith(t,[z,k]);l&&(q.trigger("ajaxComplete",[z,m]),--c.active||c.event.trigger("ajaxStop"))}}"object"===typeof a&&(b=a,a=void 0);b=b||{};var e,f,g,h,l,k,m=c.ajaxSetup({},b),t=m.context||m,q=m.context&&(t.nodeType||t.jquery)?c(t):c.event,v=c.Deferred(),B=c.Callbacks("once memory"),\nA=m.statusCode||{},C={},D={},I="canceled",z={readyState:0,getResponseHeader:function(a){var b;if(O){if(!g)for(g={};b=Ec.exec(f);)g[b[1].toLowerCase()]=b[2];b=g[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return O?f:null},setRequestHeader:function(a,b){null==O&&(a=D[a.toLowerCase()]=D[a.toLowerCase()]||a,C[a]=b);return this},overrideMimeType:function(a){null==O&&(m.mimeType=a);return this},statusCode:function(a){var b;if(a)if(O)z.always(a[z.status]);else for(b in a)A[b]=\n[A[b],a[b]];return this},abort:function(a){a=a||I;e&&e.abort(a);d(0,a);return this}};v.promise(z);m.url=((a||m.url||za.href)+"").replace(Gc,za.protocol+"//");m.type=b.method||b.type||m.method||m.type;m.dataTypes=(m.dataType||"*").toLowerCase().match(S)||[""];if(null==m.crossDomain){a=p.createElement("a");try{a.href=m.url,a.href=a.href,m.crossDomain=Xa.protocol+"//"+Xa.host!==a.protocol+"//"+a.host}catch(N){m.crossDomain=!0}}m.data&&m.processData&&"string"!==typeof m.data&&(m.data=c.param(m.data,m.traditional));\nwb(Mb,m,b,z);if(O)return z;(l=c.event&&m.global)&&0===c.active++&&c.event.trigger("ajaxStart");m.type=m.type.toUpperCase();m.hasContent=!Fc.test(m.type);var G=m.url.replace(Cc,"");m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Bc,"+")):(a=m.url.slice(G.length),m.data&&(G+=(Wa.test(G)?"&":"?")+m.data,delete m.data),!1===m.cache&&(G=G.replace(Dc,"$1"),a=(Wa.test(G)?"&":"?")+"_="+Kb++ +a),m.url=G+a);m.ifModified&&(c.lastModified[G]&&\nz.setRequestHeader("If-Modified-Since",c.lastModified[G]),c.etag[G]&&z.setRequestHeader("If-None-Match",c.etag[G]));(m.data&&m.hasContent&&!1!==m.contentType||b.contentType)&&z.setRequestHeader("Content-Type",m.contentType);z.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Nb+"; q=0.01":""):m.accepts["*"]);for(k in m.headers)z.setRequestHeader(k,m.headers[k]);if(m.beforeSend&&(!1===m.beforeSend.call(t,z,m)||O))return z.abort();\nI="abort";B.add(m.complete);z.done(m.success);z.fail(m.error);if(e=wb(Sa,m,b,z)){z.readyState=1;l&&q.trigger("ajaxSend",[z,m]);if(O)return z;m.async&&0<m.timeout&&(h=n.setTimeout(function(){z.abort("timeout")},m.timeout));try{var O=!1;e.send(C,d)}catch(N){if(O)throw N;d(-1,N)}}else d(-1,"No Transport");return z},getJSON:function(a,b,d){return c.get(a,b,d,"json")},getScript:function(a,b){return c.get(a,void 0,b,"script")}});c.each(["get","post"],function(a,b){c[b]=function(a,e,f,g){c.isFunction(e)&&\n(g=g||f,f=e,e=void 0);return c.ajax(c.extend({url:a,type:b,dataType:g,data:e,success:f},c.isPlainObject(a)&&a))}});c._evalUrl=function(a){return c.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})};c.fn.extend({wrapAll:function(a){this[0]&&(c.isFunction(a)&&(a=a.call(this[0])),a=c(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&a.insertBefore(this[0]),a.map(function(){for(var a=this;a.firstElementChild;)a=a.firstElementChild;return a}).append(this));return this},\nwrapInner:function(a){return c.isFunction(a)?this.each(function(b){c(this).wrapInner(a.call(this,b))}):this.each(function(){var b=c(this),d=b.contents();d.length?d.wrapAll(a):b.append(a)})},wrap:function(a){var b=c.isFunction(a);return this.each(function(d){c(this).wrapAll(b?a.call(this,d):a)})},unwrap:function(a){this.parent(a).not("body").each(function(){c(this).replaceWith(this.childNodes)});return this}});c.expr.pseudos.hidden=function(a){return!c.expr.pseudos.visible(a)};c.expr.pseudos.visible=\nfunction(a){return!!(a.offsetWidth||a.offsetHeight||a.getClientRects().length)};c.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(a){}};var Hc={0:200,1223:204},Aa=c.ajaxSettings.xhr();q.cors=!!Aa&&"withCredentials"in Aa;q.ajax=Aa=!!Aa;c.ajaxTransport(function(a){var b,c;if(q.cors||Aa&&!a.crossDomain)return{send:function(d,f){var e,h=a.xhr();h.open(a.type,a.url,a.async,a.username,a.password);if(a.xhrFields)for(e in a.xhrFields)h[e]=a.xhrFields[e];a.mimeType&&h.overrideMimeType&&h.overrideMimeType(a.mimeType);\na.crossDomain||d["X-Requested-With"]||(d["X-Requested-With"]="XMLHttpRequest");for(e in d)h.setRequestHeader(e,d[e]);b=function(a){return function(){b&&(b=c=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!==typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Hc[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!==typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}};h.onload=b();\nc=h.onerror=b("error");void 0!==h.onabort?h.onabort=c:h.onreadystatechange=function(){4===h.readyState&&n.setTimeout(function(){b&&c()})};b=b("abort");try{h.send(a.hasContent&&a.data||null)}catch(l){if(b)throw l;}},abort:function(){b&&b()}}});c.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)});c.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{"text script":function(a){c.globalEval(a);\nreturn a}}});c.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1);a.crossDomain&&(a.type="GET")});c.ajaxTransport("script",function(a){if(a.crossDomain){var b,d;return{send:function(e,f){b=c("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",d=function(a){b.remove();d=null;a&&f("error"===a.type?404:200,a.type)});p.head.appendChild(b[0])},abort:function(){d&&d()}}}});var Ob=[],Ya=/(=)\\?(?=&|$)|\\?\\?/;c.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Ob.pop()||\nc.expando+"_"+Kb++;this[a]=!0;return a}});c.ajaxPrefilter("json jsonp",function(a,b,d){var e,f=!1!==a.jsonp&&(Ya.test(a.url)?"url":"string"===typeof a.data&&0===(a.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ya.test(a.data)&&"data");if(f||"jsonp"===a.dataTypes[0]){var g=a.jsonpCallback=c.isFunction(a.jsonpCallback)?a.jsonpCallback():a.jsonpCallback;f?a[f]=a[f].replace(Ya,"$1"+g):!1!==a.jsonp&&(a.url+=(Wa.test(a.url)?"&":"?")+a.jsonp+"="+g);a.converters["script json"]=function(){e||\nc.error(g+" was not called");return e[0]};a.dataTypes[0]="json";var h=n[g];n[g]=function(){e=arguments};d.always(function(){void 0===h?c(n).removeProp(g):n[g]=h;a[g]&&(a.jsonpCallback=b.jsonpCallback,Ob.push(g));e&&c.isFunction(h)&&h(e[0]);e=h=void 0});return"script"}});q.createHTMLDocument=function(){var a=p.implementation.createHTMLDocument("").body;a.innerHTML="<form></form><form></form>";return 2===a.childNodes.length}();c.parseHTML=function(a,b,d){if("string"!==typeof a)return[];"boolean"===\ntypeof b&&(d=b,b=!1);if(!b)if(q.createHTMLDocument){b=p.implementation.createHTMLDocument("");var e=b.createElement("base");e.href=p.location.href;b.head.appendChild(e)}else b=p;e=Cb.exec(a);d=!d&&[];if(e)return[b.createElement(e[1])];e=db([a],b,d);d&&d.length&&c(d).remove();return c.merge([],e.childNodes)};c.fn.load=function(a,b,d){var e,f,g=this,h=a.indexOf(" ");if(-1<h){var l=L(a.slice(h));a=a.slice(0,h)}c.isFunction(b)?(d=b,b=void 0):b&&"object"===typeof b&&(e="POST");0<g.length&&c.ajax({url:a,\ntype:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments;g.html(l?c("<div>").append(c.parseHTML(a)).find(l):a)}).always(d&&function(a,b){g.each(function(){d.apply(this,f||[a.responseText,b,a])})});return this};c.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){c.fn[b]=function(a){return this.on(b,a)}});c.expr.pseudos.animated=function(a){return c.grep(c.timers,function(b){return a===b.elem}).length};c.offset={setOffset:function(a,b,d){var e=\nc.css(a,"position"),f=c(a),g={};"static"===e&&(a.style.position="relative");var h=f.offset();var l=c.css(a,"top");var k=c.css(a,"left");("absolute"===e||"fixed"===e)&&-1<(l+k).indexOf("auto")?(k=f.position(),l=k.top,k=k.left):(l=parseFloat(l)||0,k=parseFloat(k)||0);c.isFunction(b)&&(b=b.call(a,d,c.extend({},h)));null!=b.top&&(g.top=b.top-h.top+l);null!=b.left&&(g.left=b.left-h.left+k);"using"in b?b.using.call(a,g):f.css(g)}};c.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:\nthis.each(function(b){c.offset.setOffset(this,a,b)});var b;if(b=this[0]){if(!b.getClientRects().length)return{top:0,left:0};var d=b.getBoundingClientRect();var e=b.ownerDocument;b=e.documentElement;e=e.defaultView;return{top:d.top+e.pageYOffset-b.clientTop,left:d.left+e.pageXOffset-b.clientLeft}}},position:function(){if(this[0]){var a=this[0],b={top:0,left:0};if("fixed"===c.css(a,"position"))var d=a.getBoundingClientRect();else{var e=this.offsetParent();d=this.offset();B(e[0],"html")||(b=e.offset());\nb={top:b.top+c.css(e[0],"borderTopWidth",!0),left:b.left+c.css(e[0],"borderLeftWidth",!0)}}return{top:d.top-b.top-c.css(a,"marginTop",!0),left:d.left-b.left-c.css(a,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var a=this.offsetParent;a&&"static"===c.css(a,"position");)a=a.offsetParent;return a||Ma})}});c.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var d="pageYOffset"===b;c.fn[a]=function(e){return aa(this,function(a,e,h){if(c.isWindow(a))var f=\na;else 9===a.nodeType&&(f=a.defaultView);if(void 0===h)return f?f[b]:a[e];f?f.scrollTo(d?f.pageXOffset:h,d?h:f.pageYOffset):a[e]=h},a,e,arguments.length)}});c.each(["top","left"],function(a,b){c.cssHooks[b]=mb(q.pixelPosition,function(a,e){if(e)return e=ra(a,b),Pa.test(e)?c(a).position()[b]+"px":e})});c.each({Height:"height",Width:"width"},function(a,b){c.each({padding:"inner"+a,content:b,"":"outer"+a},function(d,e){c.fn[e]=function(f,g){var h=arguments.length&&(d||"boolean"!==typeof f),l=d||(!0===\nf||!0===g?"margin":"border");return aa(this,function(b,d,f){return c.isWindow(b)?0===e.indexOf("outer")?b["inner"+a]:b.document.documentElement["client"+a]:9===b.nodeType?(d=b.documentElement,Math.max(b.body["scroll"+a],d["scroll"+a],b.body["offset"+a],d["offset"+a],d["client"+a])):void 0===f?c.css(b,d,l):c.style(b,d,f,l)},b,h?f:void 0,h)}})});c.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,e){return this.on(b,a,\nc,e)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});c.holdReady=function(a){a?c.readyWait++:c.ready(!0)};c.isArray=Array.isArray;c.parseJSON=JSON.parse;c.nodeName=B;"function"==="function"&&__webpack_require__(1)&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return c}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var Ic=n.jQuery,Jc=n.$;c.noConflict=function(a){n.$===c&&(n.$=Jc);a&&n.jQuery===c&&(n.jQuery=Ic);return c};C||(n.jQuery=n.$=c);return c});\nvar $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(g,l,m){g!=Array.prototype&&g!=Object.prototype&&(g[l]=m.value)};$jscomp.getGlobal=function(g){return"undefined"!=typeof window&&window===g?g:"undefined"!=typeof global&&null!=global?global:g};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";\n$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(g){return $jscomp.SYMBOL_PREFIX+(g||"")+$jscomp.symbolCounter_++};\n$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var g=$jscomp.global.Symbol.iterator;g||(g=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[g]&&$jscomp.defineProperty(Array.prototype,g,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(g){var l=0;return $jscomp.iteratorPrototype(function(){return l<g.length?{done:!1,value:g[l++]}:{done:!0}})};\n$jscomp.iteratorPrototype=function(g){$jscomp.initSymbolIterator();g={next:g};g[$jscomp.global.Symbol.iterator]=function(){return this};return g};$jscomp.iteratorFromArray=function(g,l){$jscomp.initSymbolIterator();g instanceof String&&(g+="");var m=0,n={next:function(){if(m<g.length){var q=m++;return{value:l(q,g[q]),done:!1}}n.next=function(){return{done:!0,value:void 0}};return n.next()}};n[Symbol.iterator]=function(){return n};return n};\n$jscomp.polyfill=function(g,l,m,n){if(l){m=$jscomp.global;g=g.split(".");for(n=0;n<g.length-1;n++){var q=g[n];q in m||(m[q]={});m=m[q]}g=g[g.length-1];n=m[g];l=l(n);l!=n&&null!=l&&$jscomp.defineProperty(m,g,{configurable:!0,writable:!0,value:l})}};$jscomp.polyfill("Array.prototype.keys",function(g){return g?g:function(){return $jscomp.iteratorFromArray(this,function(g){return g})}},"es6","es3");\n(function(g,l){l(g.MMTF=g.MMTF||{})})(this,function(g){function l(a,b,c){for(var d=0,f=c.length;d<f;d++){var e=c.charCodeAt(d);if(128>e)a.setUint8(b++,e>>>0&127|0);else if(2048>e)a.setUint8(b++,e>>>6&31|192),a.setUint8(b++,e>>>0&63|128);else if(65536>e)a.setUint8(b++,e>>>12&15|224),a.setUint8(b++,e>>>6&63|128),a.setUint8(b++,e>>>0&63|128);else if(1114112>e)a.setUint8(b++,e>>>18&7|240),a.setUint8(b++,e>>>12&63|128),a.setUint8(b++,e>>>6&63|128),a.setUint8(b++,e>>>0&63|128);else throw Error("bad codepoint "+\ne);}}function m(a){for(var b=0,c=0,d=a.length;c<d;c++){var f=a.charCodeAt(c);if(128>f)b+=1;else if(2048>f)b+=2;else if(65536>f)b+=3;else if(1114112>f)b+=4;else throw Error("bad codepoint "+f);}return b}function n(a,b,c){var d=typeof a;if("string"===d){var f=m(a);if(32>f)return b.setUint8(c,f|160),l(b,c+1,a),1+f;if(256>f)return b.setUint8(c,217),b.setUint8(c+1,f),l(b,c+2,a),2+f;if(65536>f)return b.setUint8(c,218),b.setUint16(c+1,f),l(b,c+3,a),3+f;if(4294967296>f)return b.setUint8(c,219),b.setUint32(c+\n1,f),l(b,c+5,a),5+f}if(a instanceof Uint8Array){f=a.byteLength;var e=new Uint8Array(b.buffer);if(256>f)return b.setUint8(c,196),b.setUint8(c+1,f),e.set(a,c+2),2+f;if(65536>f)return b.setUint8(c,197),b.setUint16(c+1,f),e.set(a,c+3),3+f;if(4294967296>f)return b.setUint8(c,198),b.setUint32(c+1,f),e.set(a,c+5),5+f}if("number"===d){if(!isFinite(a))throw Error("Number not finite: "+a);if(Math.floor(a)!==a)return b.setUint8(c,203),b.setFloat64(c+1,a),9;if(0<=a){if(128>a)return b.setUint8(c,a),1;if(256>a)return b.setUint8(c,\n204),b.setUint8(c+1,a),2;if(65536>a)return b.setUint8(c,205),b.setUint16(c+1,a),3;if(4294967296>a)return b.setUint8(c,206),b.setUint32(c+1,a),5;throw Error("Number too big 0x"+a.toString(16));}if(-32<=a)return b.setInt8(c,a),1;if(-128<=a)return b.setUint8(c,208),b.setInt8(c+1,a),2;if(-32768<=a)return b.setUint8(c,209),b.setInt16(c+1,a),3;if(-2147483648<=a)return b.setUint8(c,210),b.setInt32(c+1,a),5;throw Error("Number too small -0x"+(-a).toString(16).substr(1));}if(null===a)return b.setUint8(c,192),\n1;if("boolean"===d)return b.setUint8(c,a?195:194),1;if("object"===d){d=0;if(e=Array.isArray(a))f=a.length;else{var h=Object.keys(a);f=h.length}16>f?(b.setUint8(c,f|(e?144:128)),d=1):65536>f?(b.setUint8(c,e?220:222),b.setUint16(c+1,f),d=3):4294967296>f&&(b.setUint8(c,e?221:223),b.setUint32(c+1,f),d=5);if(e)for(e=0;e<f;e++)d+=n(a[e],b,c+d);else for(e=0;e<f;e++){var g=h[e];d+=n(g,b,c+d);d+=n(a[g],b,c+d)}return d}throw Error("Unknown type "+d);}function q(a){var b=typeof a;if("string"===b){var c=m(a);\nif(32>c)return 1+c;if(256>c)return 2+c;if(65536>c)return 3+c;if(4294967296>c)return 5+c}if(a instanceof Uint8Array){c=a.byteLength;if(256>c)return 2+c;if(65536>c)return 3+c;if(4294967296>c)return 5+c}if("number"===b){if(Math.floor(a)!==a)return 9;if(0<=a){if(128>a)return 1;if(256>a)return 2;if(65536>a)return 3;if(4294967296>a)return 5;throw Error("Number too big 0x"+a.toString(16));}if(-32<=a)return 1;if(-128<=a)return 2;if(-32768<=a)return 3;if(-2147483648<=a)return 5;throw Error("Number too small -0x"+\na.toString(16).substr(1));}if("boolean"===b||null===a)return 1;if("object"===b){b=0;if(Array.isArray(a)){c=a.length;for(var d=0;d<c;d++)b+=q(a[d])}else{var f=Object.keys(a);c=f.length;for(d=0;d<c;d++){var e=f[d];b+=q(e)+q(a[e])}}if(16>c)return 1+b;if(65536>c)return 3+b;if(4294967296>c)return 5+b;throw Error("Array or object too long 0x"+c.toString(16));}throw Error("Unknown type "+b);}function H(a){var b=new ArrayBuffer(q(a)),c=new DataView(b);n(a,c,0);return new Uint8Array(b)}function k(a,b,c){return b?\nnew a(b.buffer,b.byteOffset,b.byteLength/(c||1)):void 0}function A(a,b){var c=a.length/2;b||(b=new Int16Array(c));for(var d=0,f=0;d<c;++d,f+=2)b[d]=a[f]<<8^a[f+1]<<0;return b}function r(a,b){var c=a.length/4;b||(b=new Int32Array(c));for(var d=0,f=0;d<c;++d,f+=4)b[d]=a[f]<<24^a[f+1]<<16^a[f+2]<<8^a[f+3]<<0;return b}function t(a,b){var c=a.length;b||(b=new Uint8Array(4*c));for(var d=k(DataView,b),f=0;f<c;++f)d.setInt32(4*f,a[f]);return k(Uint8Array,b)}function x(a,b,c){var d=a.length;b=1/b;c||(c=new Float32Array(d));\nfor(var f=0;f<d;++f)c[f]=a[f]*b;return c}function I(a,b,c){var d=a.length;c||(c=new Int32Array(d));for(var f=0;f<d;++f)c[f]=Math.round(a[f]*b);return c}function B(a,b){var c;if(!b){var d=b=0;for(c=a.length;d<c;d+=2)b+=a[d+1];b=new a.constructor(b)}var f=0;d=0;for(c=a.length;d<c;d+=2)for(var e=a[d],h=a[d+1],g=0;g<h;++g)b[f]=e,++f;return b}function D(a){if(0===a.length)return new Int32Array;var b,c=2;var d=1;for(b=a.length;d<b;++d)a[d-1]!==a[d]&&(c+=2);c=new Int32Array(c);var f=0,e=1;d=1;for(b=a.length;d<\nb;++d)a[d-1]!==a[d]?(c[f]=a[d-1],c[f+1]=e,e=1,f+=2):++e;c[f]=a[a.length-1];c[f+1]=e;return c}function J(a,b){var c=a.length;b||(b=new a.constructor(c));c&&(b[0]=a[0]);for(var d=1;d<c;++d)b[d]=a[d]+b[d-1];return b}function K(a,b){var c=a.length;b||(b=new a.constructor(c));b[0]=a[0];for(var d=1;d<c;++d)b[d]=a[d]-a[d-1];return b}function y(a,b){var c=a instanceof Int8Array?127:32767,d=-c-1,f=a.length,e,h;if(!b){for(e=b=0;e<f;++e)a[e]<c&&a[e]>d&&++b;b=new Int32Array(b)}for(h=e=0;e<f;){for(var g=0;a[e]===\nc||a[e]===d;)g+=a[e],++e;g+=a[e];++e;b[h]=g;++h}return b}function Y(a){var b=k(DataView,a),c=b.getInt32(0);b=b.getInt32(4);var d=a.subarray(8,12);a=a.subarray(12);return[c,a,b,d]}function u(a,b,c,d){var f=new ArrayBuffer(12+d.byteLength),e=new Uint8Array(f);f=new DataView(f);f.setInt32(0,a);f.setInt32(4,b);c&&e.set(c,8);e.set(d,12);return e}function O(a){var b=a.length;a=k(Uint8Array,a);return u(2,b,void 0,a)}function P(a){var b=a.length;a=t(a);return u(4,b,void 0,a)}function Q(a,b){var c=a.length/\nb;b=t([b]);a=k(Uint8Array,a);return u(5,c,b,a)}function R(a){var b=a.length;a=t(D(a));return u(6,b,void 0,a)}function E(a){var b=a.length;a=t(D(K(a)));return u(8,b,void 0,a)}function Z(a,b){var c=a.length,d=t([b]);a=t(D(I(a,b)));return u(9,c,d,a)}function C(a,b){var c=a.length,d=t([b]);b=K(I(a,b),void 0);var f,e=b.length;for(f=a=0;f<e;++f){var h=b[f];0===h?++a:a=32767===h||-32768===h?a+2:0<h?a+Math.ceil(h/32767):a+Math.ceil(h/-32768)}a=new Int16Array(a);var g=0;for(f=0;f<e;++f){h=b[f];if(0<=h)for(;32767<=\nh;)a[g]=32767,++g,h-=32767;else for(;-32768>=h;)a[g]=-32768,++g,h-=-32768;a[g]=h;++g}b=void 0;h=a.length;b||(b=new Uint8Array(2*h));f=k(DataView,b);for(e=0;e<h;++e)f.setInt16(2*e,a[e]);a=k(Uint8Array,b);return u(10,c,d,a)}function S(a){var b={};T.forEach(function(c){void 0!==a[c]&&(b[c]=a[c])});a.bondAtomList&&(b.bondAtomList=P(a.bondAtomList));a.bondOrderList&&(b.bondOrderList=O(a.bondOrderList));b.xCoordList=C(a.xCoordList,1E3);b.yCoordList=C(a.yCoordList,1E3);b.zCoordList=C(a.zCoordList,1E3);a.bFactorList&&\n(b.bFactorList=C(a.bFactorList,100));a.atomIdList&&(b.atomIdList=E(a.atomIdList));a.altLocList&&(b.altLocList=R(a.altLocList));a.occupancyList&&(b.occupancyList=Z(a.occupancyList,100));b.groupIdList=E(a.groupIdList);b.groupTypeList=P(a.groupTypeList);a.secStructList&&(b.secStructList=O(a.secStructList,1));a.insCodeList&&(b.insCodeList=R(a.insCodeList));a.sequenceIndexList&&(b.sequenceIndexList=E(a.sequenceIndexList));b.chainIdList=Q(a.chainIdList,4);a.chainNameList&&(b.chainNameList=Q(a.chainNameList,\n4));return b}function U(a){function b(a){for(var b={},c=0;c<a;c++){var d=e();b[d]=e()}return b}function c(b){var c=a.subarray(h,h+b);h+=b;return c}function d(b){var c=a.subarray(h,h+b);h+=b;if(65535<b){b=[];for(var d=0;d<c.length;d+=65535)b.push(String.fromCharCode.apply(null,c.subarray(d,d+65535)));return b.join("")}return String.fromCharCode.apply(null,c)}function f(a){for(var b=Array(a),c=0;c<a;c++)b[c]=e();return b}function e(){var e=a[h];if(0===(e&128))return h++,e;if(128===(e&240))return h++,\nb(e&15);if(144===(e&240))return h++,f(e&15);if(160===(e&224))return h++,d(e&31);if(224===(e&224))return e=g.getInt8(h),h++,e;switch(e){case 192:return h++,null;case 194:return h++,!1;case 195:return h++,!0;case 196:return e=g.getUint8(h+1),h+=2,c(e);case 197:return e=g.getUint16(h+1),h+=3,c(e);case 198:return e=g.getUint32(h+1),h+=5,c(e);case 202:return e=g.getFloat32(h+1),h+=5,e;case 203:return e=g.getFloat64(h+1),h+=9,e;case 204:return e=a[h+1],h+=2,e;case 205:return e=g.getUint16(h+1),h+=3,e;case 206:return e=\ng.getUint32(h+1),h+=5,e;case 208:return e=g.getInt8(h+1),h+=2,e;case 209:return e=g.getInt16(h+1),h+=3,e;case 210:return e=g.getInt32(h+1),h+=5,e;case 217:return e=g.getUint8(h+1),h+=2,d(e);case 218:return e=g.getUint16(h+1),h+=3,d(e);case 219:return e=g.getUint32(h+1),h+=5,d(e);case 220:return e=g.getUint16(h+1),h+=3,f(e);case 221:return e=g.getUint32(h+1),h+=5,f(e);case 222:return e=g.getUint16(h+1),h+=3,b(e);case 223:return e=g.getUint32(h+1),h+=5,b(e)}throw Error("Unknown type 0x"+e.toString(16));\n}var h=0,g=new DataView(a.buffer);return e()}function aa(a,b,c,d){switch(a){case 1:d=void 0;c=b.length;d||(d=new Float32Array(c/4));a=k(DataView,d);b=k(DataView,b);var f=0,e=0;for(c/=4;f<c;++f,e+=4)a.setFloat32(e,b.getFloat32(e),!0);return d;case 2:return k(Int8Array,b);case 3:return A(b);case 4:return r(b);case 5:return k(Uint8Array,b);case 6:return B(r(b),new Uint8Array(c));case 7:return B(r(b));case 8:return d=r(b),J(B(d),void 0);case 9:return a=r(b),d=r(d)[0],x(B(a,k(Int32Array,void 0,4)),d,void 0);\ncase 10:return a=A(b),d=r(d)[0],a=y(a,k(Int32Array,void 0,4)),b=k(Float32Array,a,4),x(J(a,k(Int32Array,b,4)),d,b);case 11:return x(A(b),r(d)[0]);case 12:return a=A(b),d=r(d)[0],x(y(a,k(Int32Array,void 0,4)),d,void 0);case 13:return a=k(Int8Array,b),d=r(d)[0],x(y(a,k(Int32Array,void 0,4)),d,void 0);case 14:return y(A(b));case 15:return y(k(Int8Array,b))}}function V(a,b){b=b||{};var c=b.ignoreFields,d={};ba.forEach(function(b){var e=c?-1!==c.indexOf(b):!1,f=a[b];e||void 0===f||(d[b]=f instanceof Uint8Array?\naa.apply(null,Y(f)):f)});return d}function W(a,b){a instanceof ArrayBuffer&&(a=new Uint8Array(a));a=a instanceof Uint8Array?U(a):a;return V(a,b)}function X(a,b,c,d){var f=new XMLHttpRequest;f.addEventListener("load",function(){try{var a=W(f.response);c(a)}catch(h){d(h)}},!0);f.addEventListener("error",d,!0);f.responseType="arraybuffer";f.open("GET",b+a.toUpperCase());f.send()}var T="mmtfVersion mmtfProducer unitCell spaceGroup structureId title depositionDate releaseDate experimentalMethods resolution rFree rWork bioAssemblyList ncsOperatorList entityList groupList numBonds numAtoms numGroups numChains numModels groupsPerChain chainsPerModel".split(" "),\nba=T.concat("xCoordList yCoordList zCoordList groupIdList groupTypeList chainIdList bFactorList atomIdList altLocList occupancyList secStructList insCodeList sequenceIndexList chainNameList bondAtomList bondOrderList".split(" "));g.encode=function(a){return H(S(a))};g.decode=W;g.traverse=function(a,b,c){c=c||{};c=c.firstModelOnly;var d=b.onModel,f=b.onChain,e=b.onGroup,g=b.onAtom;b=b.onBond;var l=0,k=0,n=0,m=0,q,r=-1,t=a.chainNameList,u=a.secStructList,A=a.insCodeList,x=a.sequenceIndexList,y=a.atomIdList,\nB=a.bFactorList,C=a.altLocList,D=a.occupancyList,L=a.bondAtomList,E=a.bondOrderList,H;var I=0;for(H=a.chainsPerModel.length;I<H&&!(c&&0<l);++I){var F=a.chainsPerModel[l];d&&d({chainCount:F,modelIndex:l});for(q=0;q<F;++q){var G=a.groupsPerChain[k];if(f){var M=String.fromCharCode.apply(null,a.chainIdList.subarray(4*k,4*k+4)).replace(/\\0/g,"");var p=null;t&&(p=String.fromCharCode.apply(null,t.subarray(4*k,4*k+4)).replace(/\\0/g,""));f({groupCount:G,chainIndex:k,modelIndex:l,chainId:M,chainName:p})}for(M=\n0;M<G;++M){var v=a.groupList[a.groupTypeList[n]],N=v.atomNameList.length;if(e){p=null;u&&(p=u[n]);var w=null;a.insCodeList&&(w=String.fromCharCode(A[n]));var z=null;x&&(z=x[n]);e({atomCount:N,groupIndex:n,chainIndex:k,modelIndex:l,groupId:a.groupIdList[n],groupType:a.groupTypeList[n],groupName:v.groupName,singleLetterCode:v.singleLetterCode,chemCompType:v.chemCompType,secStruct:p,insCode:w,sequenceIndex:z})}for(p=0;p<N;++p){if(g){w=null;y&&(w=y[m]);z=null;B&&(z=B[m]);var J=null;C&&(J=String.fromCharCode(C[m]));\nvar K=null;D&&(K=D[m]);g({atomIndex:m,groupIndex:n,chainIndex:k,modelIndex:l,atomId:w,element:v.elementList[p],atomName:v.atomNameList[p],formalCharge:v.formalChargeList[p],xCoord:a.xCoordList[m],yCoord:a.yCoordList[m],zCoord:a.zCoordList[m],bFactor:z,altLoc:J,occupancy:K})}m+=1}if(b)for(z=v.bondAtomList,p=0,w=v.bondOrderList.length;p<w;++p)b({atomIndex1:m-N+z[2*p],atomIndex2:m-N+z[2*p+1],bondOrder:v.bondOrderList[p]});n+=1}k+=1}q=r+1;r=m-1;if(b&&L)for(p=0,w=L.length;p<w;p+=2)F=L[p],G=L[p+1],(F>=\nq&&F<=r||G>=q&&G<=r)&&b({atomIndex1:F,atomIndex2:G,bondOrder:E?E[p/2]:null});l+=1}};g.fetch=function(a,b,c){X(a,"http://mmtf.rcsb.org/v1.0/full/",b,c)};g.fetchReduced=function(a,b,c){X(a,"http://mmtf.rcsb.org/v1.0/reduced/",b,c)};g.version="v1.0.0";g.fetchUrl="http://mmtf.rcsb.org/v1.0/full/";g.fetchReducedUrl="http://mmtf.rcsb.org/v1.0/reduced/";g.encodeMsgpack=H;g.encodeMmtf=S;g.decodeMsgpack=U;g.decodeMmtf=V;Object.defineProperty(g,"__esModule",{value:!0})});\n(function(O){ true?module.exports=O():undefined})(function(){return function x(w,g,E){function z(h,d){if(!g[h]){if(!w[h]){var c="function"==typeof require&&require;if(!d&&c)return require(h,!0);if(m)return m(h,!0);d=Error("Cannot find module \'"+h+"\'");throw d.code="MODULE_NOT_FOUND",d;}d=g[h]=\n{exports:{}};w[h][0].call(d.exports,function(c){var n=w[h][1][c];return z(n?n:c)},d,d.exports,x,w,g,E)}return g[h].exports}for(var m="function"==typeof require&&require,k=0;k<E.length;k++)z(E[k]);return z}({1:[function(x,w,g){x="undefined"!==typeof Uint8Array&&"undefined"!==typeof Uint16Array&&"undefined"!==typeof Int32Array;g.assign=function(m){for(var k=Array.prototype.slice.call(arguments,1);k.length;){var h=k.shift();if(h){if("object"!==typeof h)throw new TypeError(h+"must be non-object");for(var d in h)h.hasOwnProperty(d)&&\n(m[d]=h[d])}}return m};g.shrinkBuf=function(m,k){if(m.length===k)return m;if(m.subarray)return m.subarray(0,k);m.length=k;return m};var E={arraySet:function(m,k,h,d,c){if(k.subarray&&m.subarray)m.set(k.subarray(h,h+d),c);else for(var n=0;n<d;n++)m[c+n]=k[h+n]},flattenChunks:function(m){var k,h;var d=h=0;for(k=m.length;d<k;d++)h+=m[d].length;var c=new Uint8Array(h);d=h=0;for(k=m.length;d<k;d++){var n=m[d];c.set(n,h);h+=n.length}return c}},z={arraySet:function(m,k,h,d,c){for(var n=0;n<d;n++)m[c+n]=\nk[h+n]},flattenChunks:function(m){return[].concat.apply([],m)}};g.setTyped=function(m){m?(g.Buf8=Uint8Array,g.Buf16=Uint16Array,g.Buf32=Int32Array,g.assign(g,E)):(g.Buf8=Array,g.Buf16=Array,g.Buf32=Array,g.assign(g,z))};g.setTyped(x)},{}],2:[function(x,w,g){function E(h,c){if(65537>c&&(h.subarray&&k||!h.subarray&&m))return String.fromCharCode.apply(null,z.shrinkBuf(h,c));for(var n="",d=0;d<c;d++)n+=String.fromCharCode(h[d]);return n}var z=x("./common"),m=!0,k=!0;try{String.fromCharCode.apply(null,\n[0])}catch(d){m=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(d){k=!1}var h=new z.Buf8(256);for(x=0;256>x;x++)h[x]=252<=x?6:248<=x?5:240<=x?4:224<=x?3:192<=x?2:1;h[254]=h[254]=1;g.string2buf=function(h){var c,n,m=h.length,d=0;for(c=0;c<m;c++){var y=h.charCodeAt(c);if(55296===(y&64512)&&c+1<m){var C=h.charCodeAt(c+1);56320===(C&64512)&&(y=65536+(y-55296<<10)+(C-56320),c++)}d+=128>y?1:2048>y?2:65536>y?3:4}var k=new z.Buf8(d);for(c=n=0;n<d;c++)y=h.charCodeAt(c),55296===(y&64512)&&c+\n1<m&&(C=h.charCodeAt(c+1),56320===(C&64512)&&(y=65536+(y-55296<<10)+(C-56320),c++)),128>y?k[n++]=y:(2048>y?k[n++]=192|y>>>6:(65536>y?k[n++]=224|y>>>12:(k[n++]=240|y>>>18,k[n++]=128|y>>>12&63),k[n++]=128|y>>>6&63),k[n++]=128|y&63);return k};g.buf2binstring=function(h){return E(h,h.length)};g.binstring2buf=function(h){for(var c=new z.Buf8(h.length),n=0,m=c.length;n<m;n++)c[n]=h.charCodeAt(n);return c};g.buf2string=function(m,c){var n,k=c||m.length,d=Array(2*k);for(c=n=0;c<k;){var y=m[c++];if(128>y)d[n++]=\ny;else{var C=h[y];if(4<C)d[n++]=65533,c+=C-1;else{for(y&=2===C?31:3===C?15:7;1<C&&c<k;)y=y<<6|m[c++]&63,C--;1<C?d[n++]=65533:65536>y?d[n++]=y:(y-=65536,d[n++]=55296|y>>10&1023,d[n++]=56320|y&1023)}}}return E(d,n)};g.utf8border=function(m,c){var n;c=c||m.length;c>m.length&&(c=m.length);for(n=c-1;0<=n&&128===(m[n]&192);)n--;return 0>n||0===n?c:n+h[m[n]]>c?n:c}},{"./common":1}],3:[function(x,w,g){w.exports=function(g,x,m,k){var h=g&65535|0;g=g>>>16&65535|0;for(var d;0!==m;){d=2E3<m?2E3:m;m-=d;do h=h+\nx[k++]|0,g=g+h|0;while(--d);h%=65521;g%=65521}return h|g<<16|0}},{}],4:[function(x,w,g){w.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],5:[function(x,\nw,g){var E=function(){for(var g,m=[],k=0;256>k;k++){g=k;for(var h=0;8>h;h++)g=g&1?3988292384^g>>>1:g>>>1;m[k]=g}return m}();w.exports=function(g,m,k,h){k=h+k;for(g^=-1;h<k;h++)g=g>>>8^E[(g^m[h])&255];return g^-1}},{}],6:[function(x,w,g){w.exports=function(){this.os=this.xflags=this.time=this.text=0;this.extra=null;this.extra_len=0;this.comment=this.name="";this.hcrc=0;this.done=!1}},{}],7:[function(x,w,g){w.exports=function(g,x){var m=g.state;var k=g.next_in;var h=g.input;var d=k+(g.avail_in-5);var c=\ng.next_out;var n=g.output;x=c-(x-g.avail_out);var A=c+(g.avail_out-257);var w=m.dmax;var y=m.wsize;var C=m.whave;var H=m.wnext;var L=m.window;var b=m.hold;var p=m.bits;var Q=m.lencode;var F=m.distcode;var E=(1<<m.lenbits)-1;var a=(1<<m.distbits)-1;a:do{15>p&&(b+=h[k++]<<p,p+=8,b+=h[k++]<<p,p+=8);var D=Q[b&E];b:for(;;){var u=D>>>24;b>>>=u;p-=u;u=D>>>16&255;if(0===u)n[c++]=D&65535;else if(u&16){var q=D&65535;if(u&=15)p<u&&(b+=h[k++]<<p,p+=8),q+=b&(1<<u)-1,b>>>=u,p-=u;15>p&&(b+=h[k++]<<p,p+=8,b+=h[k++]<<\np,p+=8);D=F[b&a];c:for(;;){u=D>>>24;b>>>=u;p-=u;u=D>>>16&255;if(u&16){D&=65535;u&=15;p<u&&(b+=h[k++]<<p,p+=8,p<u&&(b+=h[k++]<<p,p+=8));D+=b&(1<<u)-1;if(D>w){g.msg="invalid distance too far back";m.mode=30;break a}b>>>=u;p-=u;u=c-x;if(D>u){u=D-u;if(u>C&&m.sane){g.msg="invalid distance too far back";m.mode=30;break a}var t=0;var J=L;if(0===H){if(t+=y-u,u<q){q-=u;do n[c++]=L[t++];while(--u);t=c-D;J=n}}else if(H<u){if(t+=y+H-u,u-=H,u<q){q-=u;do n[c++]=L[t++];while(--u);t=0;if(H<q){u=H;q-=u;do n[c++]=\nL[t++];while(--u);t=c-D;J=n}}}else if(t+=H-u,u<q){q-=u;do n[c++]=L[t++];while(--u);t=c-D;J=n}for(;2<q;)n[c++]=J[t++],n[c++]=J[t++],n[c++]=J[t++],q-=3;q&&(n[c++]=J[t++],1<q&&(n[c++]=J[t++]))}else{t=c-D;do n[c++]=n[t++],n[c++]=n[t++],n[c++]=n[t++],q-=3;while(2<q);q&&(n[c++]=n[t++],1<q&&(n[c++]=n[t++]))}}else if(0===(u&64)){D=F[(D&65535)+(b&(1<<u)-1)];continue c}else{g.msg="invalid distance code";m.mode=30;break a}break}}else if(0===(u&64)){D=Q[(D&65535)+(b&(1<<u)-1)];continue b}else{u&32?m.mode=12:\n(g.msg="invalid literal/length code",m.mode=30);break a}break}}while(k<d&&c<A);q=p>>3;k-=q;p-=q<<3;g.next_in=k;g.next_out=c;g.avail_in=k<d?5+(d-k):5-(k-d);g.avail_out=c<A?257+(A-c):257-(c-A);m.hold=b&(1<<p)-1;m.bits=p}},{}],8:[function(x,w,g){function E(b){return(b>>>24&255)+(b>>>8&65280)+((b&65280)<<8)+((b&255)<<24)}function z(){this.mode=0;this.last=!1;this.wrap=0;this.havedict=!1;this.total=this.check=this.dmax=this.flags=0;this.head=null;this.wnext=this.whave=this.wsize=this.wbits=0;this.window=\nnull;this.extra=this.offset=this.length=this.bits=this.hold=0;this.distcode=this.lencode=null;this.have=this.ndist=this.nlen=this.ncode=this.distbits=this.lenbits=0;this.next=null;this.lens=new c.Buf16(320);this.work=new c.Buf16(288);this.distdyn=this.lendyn=null;this.was=this.back=this.sane=0}function m(b){if(!b||!b.state)return-2;var p=b.state;b.total_in=b.total_out=p.total=0;b.msg="";p.wrap&&(b.adler=p.wrap&1);p.mode=1;p.last=0;p.havedict=0;p.dmax=32768;p.head=null;p.hold=0;p.bits=0;p.lencode=\np.lendyn=new c.Buf32(852);p.distcode=p.distdyn=new c.Buf32(592);p.sane=1;p.back=-1;return 0}function k(b){if(!b||!b.state)return-2;var p=b.state;p.wsize=0;p.whave=0;p.wnext=0;return m(b)}function h(b,p){if(!b||!b.state)return-2;var c=b.state;if(0>p){var h=0;p=-p}else h=(p>>4)+1,48>p&&(p&=15);if(p&&(8>p||15<p))return-2;null!==c.window&&c.wbits!==p&&(c.window=null);c.wrap=h;c.wbits=p;return k(b)}function d(b,c){if(!b)return-2;var p=new z;b.state=p;p.window=null;c=h(b,c);0!==c&&(b.state=null);return c}\nvar c=x("../utils/common"),n=x("./adler32"),A=x("./crc32"),I=x("./inffast"),y=x("./inftrees"),C=!0,H,L;g.inflateReset=k;g.inflateReset2=h;g.inflateResetKeep=m;g.inflateInit=function(b){return d(b,15)};g.inflateInit2=d;g.inflate=function(b,p){var h,m=new c.Buf8(4),g=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!b||!b.state||!b.output||!b.input&&0!==b.avail_in)return-2;var a=b.state;12===a.mode&&(a.mode=13);var k=b.next_out;var u=b.output;var q=b.avail_out;var t=b.next_in;var d=b.input;var r=\nb.avail_in;var f=a.hold;var e=a.bits;var x=r;var w=q;var z=0;a:for(;;)switch(a.mode){case 1:if(0===a.wrap){a.mode=13;break}for(;16>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}if(a.wrap&2&&35615===f){a.check=0;m[0]=f&255;m[1]=f>>>8&255;a.check=A(a.check,m,2,0);e=f=0;a.mode=2;break}a.flags=0;a.head&&(a.head.done=!1);if(!(a.wrap&1)||(((f&255)<<8)+(f>>8))%31){b.msg="incorrect header check";a.mode=30;break}if(8!==(f&15)){b.msg="unknown compression method";a.mode=30;break}f>>>=4;e-=4;var v=(f&15)+8;if(0===\na.wbits)a.wbits=v;else if(v>a.wbits){b.msg="invalid window size";a.mode=30;break}a.dmax=1<<v;b.adler=a.check=1;a.mode=f&512?10:12;e=f=0;break;case 2:for(;16>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}a.flags=f;if(8!==(a.flags&255)){b.msg="unknown compression method";a.mode=30;break}if(a.flags&57344){b.msg="unknown header flags set";a.mode=30;break}a.head&&(a.head.text=f>>8&1);a.flags&512&&(m[0]=f&255,m[1]=f>>>8&255,a.check=A(a.check,m,2,0));e=f=0;a.mode=3;case 3:for(;32>e;){if(0===r)break a;r--;f+=\nd[t++]<<e;e+=8}a.head&&(a.head.time=f);a.flags&512&&(m[0]=f&255,m[1]=f>>>8&255,m[2]=f>>>16&255,m[3]=f>>>24&255,a.check=A(a.check,m,4,0));e=f=0;a.mode=4;case 4:for(;16>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}a.head&&(a.head.xflags=f&255,a.head.os=f>>8);a.flags&512&&(m[0]=f&255,m[1]=f>>>8&255,a.check=A(a.check,m,2,0));e=f=0;a.mode=5;case 5:if(a.flags&1024){for(;16>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}a.length=f;a.head&&(a.head.extra_len=f);a.flags&512&&(m[0]=f&255,m[1]=f>>>8&255,a.check=A(a.check,\nm,2,0));e=f=0}else a.head&&(a.head.extra=null);a.mode=6;case 6:if(a.flags&1024){var l=a.length;l>r&&(l=r);l&&(a.head&&(v=a.head.extra_len-a.length,a.head.extra||(a.head.extra=Array(a.head.extra_len)),c.arraySet(a.head.extra,d,t,l,v)),a.flags&512&&(a.check=A(a.check,d,l,t)),r-=l,t+=l,a.length-=l);if(a.length)break a}a.length=0;a.mode=7;case 7:if(a.flags&2048){if(0===r)break a;l=0;do v=d[t+l++],a.head&&v&&65536>a.length&&(a.head.name+=String.fromCharCode(v));while(v&&l<r);a.flags&512&&(a.check=A(a.check,\nd,l,t));r-=l;t+=l;if(v)break a}else a.head&&(a.head.name=null);a.length=0;a.mode=8;case 8:if(a.flags&4096){if(0===r)break a;l=0;do v=d[t+l++],a.head&&v&&65536>a.length&&(a.head.comment+=String.fromCharCode(v));while(v&&l<r);a.flags&512&&(a.check=A(a.check,d,l,t));r-=l;t+=l;if(v)break a}else a.head&&(a.head.comment=null);a.mode=9;case 9:if(a.flags&512){for(;16>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}if(f!==(a.check&65535)){b.msg="header crc mismatch";a.mode=30;break}e=f=0}a.head&&(a.head.hcrc=a.flags>>\n9&1,a.head.done=!0);b.adler=a.check=0;a.mode=12;break;case 10:for(;32>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}b.adler=a.check=E(f);e=f=0;a.mode=11;case 11:if(0===a.havedict)return b.next_out=k,b.avail_out=q,b.next_in=t,b.avail_in=r,a.hold=f,a.bits=e,2;b.adler=a.check=1;a.mode=12;case 12:if(5===p||6===p)break a;case 13:if(a.last){f>>>=e&7;e-=e&7;a.mode=27;break}for(;3>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}a.last=f&1;f>>>=1;--e;switch(f&3){case 0:a.mode=14;break;case 1:v=a;if(C){H=new c.Buf32(512);\nL=new c.Buf32(32);for(l=0;144>l;)v.lens[l++]=8;for(;256>l;)v.lens[l++]=9;for(;280>l;)v.lens[l++]=7;for(;288>l;)v.lens[l++]=8;y(1,v.lens,0,288,H,0,v.work,{bits:9});for(l=0;32>l;)v.lens[l++]=5;y(2,v.lens,0,32,L,0,v.work,{bits:5});C=!1}v.lencode=H;v.lenbits=9;v.distcode=L;v.distbits=5;a.mode=20;if(6===p){f>>>=2;e-=2;break a}break;case 2:a.mode=17;break;case 3:b.msg="invalid block type",a.mode=30}f>>>=2;e-=2;break;case 14:f>>>=e&7;for(e-=e&7;32>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}if((f&65535)!==\n(f>>>16^65535)){b.msg="invalid stored block lengths";a.mode=30;break}a.length=f&65535;e=f=0;a.mode=15;if(6===p)break a;case 15:a.mode=16;case 16:if(l=a.length){l>r&&(l=r);l>q&&(l=q);if(0===l)break a;c.arraySet(u,d,t,l,k);r-=l;t+=l;q-=l;k+=l;a.length-=l;break}a.mode=12;break;case 17:for(;14>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}a.nlen=(f&31)+257;f>>>=5;e-=5;a.ndist=(f&31)+1;f>>>=5;e-=5;a.ncode=(f&15)+4;f>>>=4;e-=4;if(286<a.nlen||30<a.ndist){b.msg="too many length or distance symbols";a.mode=30;\nbreak}a.have=0;a.mode=18;case 18:for(;a.have<a.ncode;){for(;3>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}a.lens[g[a.have++]]=f&7;f>>>=3;e-=3}for(;19>a.have;)a.lens[g[a.have++]]=0;a.lencode=a.lendyn;a.lenbits=7;l={bits:a.lenbits};z=y(0,a.lens,0,19,a.lencode,0,a.work,l);a.lenbits=l.bits;if(z){b.msg="invalid code lengths set";a.mode=30;break}a.have=0;a.mode=19;case 19:for(;a.have<a.nlen+a.ndist;){for(;;){var B=a.lencode[f&(1<<a.lenbits)-1];l=B>>>24;B&=65535;if(l<=e)break;if(0===r)break a;r--;f+=d[t++]<<\ne;e+=8}if(16>B)f>>>=l,e-=l,a.lens[a.have++]=B;else{if(16===B){for(v=l+2;e<v;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}f>>>=l;e-=l;if(0===a.have){b.msg="invalid bit length repeat";a.mode=30;break}v=a.lens[a.have-1];l=3+(f&3);f>>>=2;e-=2}else if(17===B){for(v=l+3;e<v;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}f>>>=l;e-=l;v=0;l=3+(f&7);f>>>=3;e-=3}else{for(v=l+7;e<v;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}f>>>=l;e-=l;v=0;l=11+(f&127);f>>>=7;e-=7}if(a.have+l>a.nlen+a.ndist){b.msg="invalid bit length repeat";\na.mode=30;break}for(;l--;)a.lens[a.have++]=v}}if(30===a.mode)break;if(0===a.lens[256]){b.msg="invalid code -- missing end-of-block";a.mode=30;break}a.lenbits=9;l={bits:a.lenbits};z=y(1,a.lens,0,a.nlen,a.lencode,0,a.work,l);a.lenbits=l.bits;if(z){b.msg="invalid literal/lengths set";a.mode=30;break}a.distbits=6;a.distcode=a.distdyn;l={bits:a.distbits};z=y(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,l);a.distbits=l.bits;if(z){b.msg="invalid distances set";a.mode=30;break}a.mode=20;if(6===p)break a;case 20:a.mode=\n21;case 21:if(6<=r&&258<=q){b.next_out=k;b.avail_out=q;b.next_in=t;b.avail_in=r;a.hold=f;a.bits=e;I(b,w);k=b.next_out;u=b.output;q=b.avail_out;t=b.next_in;d=b.input;r=b.avail_in;f=a.hold;e=a.bits;12===a.mode&&(a.back=-1);break}for(a.back=0;;){B=a.lencode[f&(1<<a.lenbits)-1];l=B>>>24;v=B>>>16&255;B&=65535;if(l<=e)break;if(0===r)break a;r--;f+=d[t++]<<e;e+=8}if(v&&0===(v&240)){var G=l;var M=v;for(h=B;;){B=a.lencode[h+((f&(1<<G+M)-1)>>G)];l=B>>>24;v=B>>>16&255;B&=65535;if(G+l<=e)break;if(0===r)break a;\nr--;f+=d[t++]<<e;e+=8}f>>>=G;e-=G;a.back+=G}f>>>=l;e-=l;a.back+=l;a.length=B;if(0===v){a.mode=26;break}if(v&32){a.back=-1;a.mode=12;break}if(v&64){b.msg="invalid literal/length code";a.mode=30;break}a.extra=v&15;a.mode=22;case 22:if(a.extra){for(v=a.extra;e<v;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}a.length+=f&(1<<a.extra)-1;f>>>=a.extra;e-=a.extra;a.back+=a.extra}a.was=a.length;a.mode=23;case 23:for(;;){B=a.distcode[f&(1<<a.distbits)-1];l=B>>>24;v=B>>>16&255;B&=65535;if(l<=e)break;if(0===r)break a;\nr--;f+=d[t++]<<e;e+=8}if(0===(v&240)){G=l;M=v;for(h=B;;){B=a.distcode[h+((f&(1<<G+M)-1)>>G)];l=B>>>24;v=B>>>16&255;B&=65535;if(G+l<=e)break;if(0===r)break a;r--;f+=d[t++]<<e;e+=8}f>>>=G;e-=G;a.back+=G}f>>>=l;e-=l;a.back+=l;if(v&64){b.msg="invalid distance code";a.mode=30;break}a.offset=B;a.extra=v&15;a.mode=24;case 24:if(a.extra){for(v=a.extra;e<v;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}a.offset+=f&(1<<a.extra)-1;f>>>=a.extra;e-=a.extra;a.back+=a.extra}if(a.offset>a.dmax){b.msg="invalid distance too far back";\na.mode=30;break}a.mode=25;case 25:if(0===q)break a;l=w-q;if(a.offset>l){l=a.offset-l;if(l>a.whave&&a.sane){b.msg="invalid distance too far back";a.mode=30;break}l>a.wnext?(l-=a.wnext,v=a.wsize-l):v=a.wnext-l;l>a.length&&(l=a.length);G=a.window}else G=u,v=k-a.offset,l=a.length;l>q&&(l=q);q-=l;a.length-=l;do u[k++]=G[v++];while(--l);0===a.length&&(a.mode=21);break;case 26:if(0===q)break a;u[k++]=a.length;q--;a.mode=21;break;case 27:if(a.wrap){for(;32>e;){if(0===r)break a;r--;f|=d[t++]<<e;e+=8}w-=q;\nb.total_out+=w;a.total+=w;w&&(b.adler=a.check=a.flags?A(a.check,u,w,k-w):n(a.check,u,w,k-w));w=q;if((a.flags?f:E(f))!==a.check){b.msg="incorrect data check";a.mode=30;break}e=f=0}a.mode=28;case 28:if(a.wrap&&a.flags){for(;32>e;){if(0===r)break a;r--;f+=d[t++]<<e;e+=8}if(f!==(a.total&4294967295)){b.msg="incorrect length check";a.mode=30;break}e=f=0}a.mode=29;case 29:z=1;break a;case 30:z=-3;break a;case 31:return-4;default:return-2}b.next_out=k;b.avail_out=q;b.next_in=t;b.avail_in=r;a.hold=f;a.bits=\ne;if(a.wsize||w!==b.avail_out&&30>a.mode&&(27>a.mode||4!==p))d=b.output,t=b.next_out,k=w-b.avail_out,q=b.state,null===q.window&&(q.wsize=1<<q.wbits,q.wnext=0,q.whave=0,q.window=new c.Buf8(q.wsize)),k>=q.wsize?(c.arraySet(q.window,d,t-q.wsize,q.wsize,0),q.wnext=0,q.whave=q.wsize):(r=q.wsize-q.wnext,r>k&&(r=k),c.arraySet(q.window,d,t-k,r,q.wnext),(k-=r)?(c.arraySet(q.window,d,t-k,k,0),q.wnext=k,q.whave=q.wsize):(q.wnext+=r,q.wnext===q.wsize&&(q.wnext=0),q.whave<q.wsize&&(q.whave+=r)));x-=b.avail_in;\nw-=b.avail_out;b.total_in+=x;b.total_out+=w;a.total+=w;a.wrap&&w&&(b.adler=a.check=a.flags?A(a.check,u,w,b.next_out-w):n(a.check,u,w,b.next_out-w));b.data_type=a.bits+(a.last?64:0)+(12===a.mode?128:0)+(20===a.mode||15===a.mode?256:0);(0===x&&0===w||4===p)&&0===z&&(z=-5);return z};g.inflateEnd=function(b){if(!b||!b.state)return-2;var c=b.state;c.window&&(c.window=null);b.state=null;return 0};g.inflateGetHeader=function(b,c){if(!b||!b.state)return-2;b=b.state;if(0===(b.wrap&2))return-2;b.head=c;c.done=\n!1;return 0};g.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":1,"./adler32":3,"./crc32":5,"./inffast":7,"./inftrees":9}],9:[function(x,w,g){var E=x("../utils/common"),z=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],m=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],k=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],h=\n[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];w.exports=function(d,c,g,w,x,y,C,H){var n=H.bits,b,p,A,F,K,a,D=0,u=new E.Buf16(16);var q=new E.Buf16(16);var t,J=0;for(b=0;15>=b;b++)u[b]=0;for(p=0;p<w;p++)u[c[g+p]]++;var r=n;for(A=15;1<=A&&0===u[A];A--);r>A&&(r=A);if(0===A)return x[y++]=20971520,x[y++]=20971520,H.bits=1,0;for(n=1;n<A&&0===u[n];n++);r<n&&(r=n);for(b=F=1;15>=b;b++)if(F<<=1,F-=u[b],0>F)return-1;if(0<F&&(0===d||1!==A))return-1;q[1]=0;for(b=\n1;15>b;b++)q[b+1]=q[b]+u[b];for(p=0;p<w;p++)0!==c[g+p]&&(C[q[c[g+p]]++]=p);if(0===d){var f=t=C;var e=19}else 1===d?(f=z,D-=257,t=m,J-=257,e=256):(f=k,t=h,e=-1);p=K=0;b=n;var I=y;w=r;q=0;var P=-1;var N=1<<r;var v=N-1;if(1===d&&852<N||2===d&&592<N)return 1;for(var l=0;;){l++;var B=b-q;if(C[p]<e){var G=0;var M=C[p]}else C[p]>e?(G=t[J+C[p]],M=f[D+C[p]]):(G=96,M=0);F=1<<b-q;n=a=1<<w;do a-=F,x[I+(K>>q)+a]=B<<24|G<<16|M|0;while(0!==a);for(F=1<<b-1;K&F;)F>>=1;0!==F?(K&=F-1,K+=F):K=0;p++;if(0===--u[b]){if(b===\nA)break;b=c[g+C[p]]}if(b>r&&(K&v)!==P){0===q&&(q=r);I+=n;w=b-q;for(F=1<<w;w+q<A;){F-=u[w+q];if(0>=F)break;w++;F<<=1}N+=1<<w;if(1===d&&852<N||2===d&&592<N)return 1;P=K&v;x[P]=r<<24|w<<16|I-y|0}}0!==K&&(x[I+K]=b-q<<24|4194304);H.bits=r;return 0}},{"../utils/common":1}],10:[function(x,w,g){w.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],11:[function(x,w,g){w.exports=\nfunction(){this.input=null;this.total_in=this.avail_in=this.next_in=0;this.output=null;this.total_out=this.avail_out=this.next_out=0;this.msg="";this.state=null;this.data_type=2;this.adler=0}},{}],"/lib/inflate.js":[function(x,w,g){function E(c,h){h=new I(h);h.push(c,!0);if(h.err)throw h.msg;return h.result}var z=x("./zlib/inflate.js"),m=x("./utils/common"),k=x("./utils/strings"),h=x("./zlib/constants"),d=x("./zlib/messages"),c=x("./zlib/zstream"),n=x("./zlib/gzheader"),A=Object.prototype.toString,\nI=function(g){var k=this.options=m.assign({chunkSize:16384,windowBits:0,to:""},g||{});k.raw&&0<=k.windowBits&&16>k.windowBits&&(k.windowBits=-k.windowBits,0===k.windowBits&&(k.windowBits=-15));!(0<=k.windowBits&&16>k.windowBits)||g&&g.windowBits||(k.windowBits+=32);15<k.windowBits&&48>k.windowBits&&0===(k.windowBits&15)&&(k.windowBits|=15);this.err=0;this.msg="";this.ended=!1;this.chunks=[];this.strm=new c;this.strm.avail_out=0;g=z.inflateInit2(this.strm,k.windowBits);if(g!==h.Z_OK)throw Error(d[g]);\nthis.header=new n;z.inflateGetHeader(this.strm,this.header)};I.prototype.push=function(c,g){var d=this.strm,n=this.options.chunkSize;if(this.ended)return!1;g=g===~~g?g:!0===g?h.Z_FINISH:h.Z_NO_FLUSH;"string"===typeof c?d.input=k.binstring2buf(c):"[object ArrayBuffer]"===A.call(c)?d.input=new Uint8Array(c):d.input=c;d.next_in=0;d.avail_in=d.input.length;do{0===d.avail_out&&(d.output=new m.Buf8(n),d.next_out=0,d.avail_out=n);c=z.inflate(d,h.Z_NO_FLUSH);if(c!==h.Z_STREAM_END&&c!==h.Z_OK)return this.onEnd(c),\nthis.ended=!0,!1;if(d.next_out&&(0===d.avail_out||c===h.Z_STREAM_END||0===d.avail_in&&(g===h.Z_FINISH||g===h.Z_SYNC_FLUSH)))if("string"===this.options.to){var b=k.utf8border(d.output,d.next_out);var p=d.next_out-b;var w=k.buf2string(d.output,b);d.next_out=p;d.avail_out=n-p;p&&m.arraySet(d.output,d.output,b,p,0);this.onData(w)}else this.onData(m.shrinkBuf(d.output,d.next_out))}while(0<d.avail_in&&c!==h.Z_STREAM_END);c===h.Z_STREAM_END&&(g=h.Z_FINISH);if(g===h.Z_FINISH)return c=z.inflateEnd(this.strm),\nthis.onEnd(c),this.ended=!0,c===h.Z_OK;g===h.Z_SYNC_FLUSH&&(this.onEnd(h.Z_OK),d.avail_out=0);return!0};I.prototype.onData=function(c){this.chunks.push(c)};I.prototype.onEnd=function(c){c===h.Z_OK&&(this.result="string"===this.options.to?this.chunks.join(""):m.flattenChunks(this.chunks));this.chunks=[];this.err=c;this.msg=this.strm.msg};g.Inflate=I;g.inflate=E;g.inflateRaw=function(c,d){d=d||{};d.raw=!0;return E(c,d)};g.ungzip=E},{"./utils/common":1,"./utils/strings":2,"./zlib/constants":4,"./zlib/gzheader":6,\n"./zlib/inflate.js":8,"./zlib/messages":10,"./zlib/zstream":11}]},{},[])("/lib/inflate.js")});\nvar $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(b,c,d){b!=Array.prototype&&b!=Object.prototype&&(b[c]=d.value)};$jscomp.getGlobal=function(b){return"undefined"!=typeof window&&window===b?b:"undefined"!=typeof global&&null!=global?global:b};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";\n$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(b){return $jscomp.SYMBOL_PREFIX+(b||"")+$jscomp.symbolCounter_++};\n$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var b=$jscomp.global.Symbol.iterator;b||(b=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[b]&&$jscomp.defineProperty(Array.prototype,b,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(b){var c=0;return $jscomp.iteratorPrototype(function(){return c<b.length?{done:!1,value:b[c++]}:{done:!0}})};\n$jscomp.iteratorPrototype=function(b){$jscomp.initSymbolIterator();b={next:b};b[$jscomp.global.Symbol.iterator]=function(){return this};return b};$jscomp.makeIterator=function(b){$jscomp.initSymbolIterator();var c=b[Symbol.iterator];return c?c.call(b):$jscomp.arrayIterator(b)};\n$jscomp.polyfill=function(b,c,d,e){if(c){d=$jscomp.global;b=b.split(".");for(e=0;e<b.length-1;e++){var f=b[e];f in d||(d[f]={});d=d[f]}b=b[b.length-1];e=d[b];c=c(e);c!=e&&null!=c&&$jscomp.defineProperty(d,b,{configurable:!0,writable:!0,value:c})}};$jscomp.FORCE_POLYFILL_PROMISE=!1;\n$jscomp.polyfill("Promise",function(b){function c(){this.batch_=null}function d(b){return b instanceof f?b:new f(function(c,d){c(b)})}if(b&&!$jscomp.FORCE_POLYFILL_PROMISE)return b;c.prototype.asyncExecute=function(b){null==this.batch_&&(this.batch_=[],this.asyncExecuteBatch_());this.batch_.push(b);return this};c.prototype.asyncExecuteBatch_=function(){var b=this;this.asyncExecuteFunction(function(){b.executeBatch_()})};var e=$jscomp.global.setTimeout;c.prototype.asyncExecuteFunction=function(b){e(b,\n0)};c.prototype.executeBatch_=function(){for(;this.batch_&&this.batch_.length;){var b=this.batch_;this.batch_=[];for(var c=0;c<b.length;++c){var d=b[c];delete b[c];try{d()}catch(w){this.asyncThrow_(w)}}}this.batch_=null};c.prototype.asyncThrow_=function(b){this.asyncExecuteFunction(function(){throw b;})};var f=function(b){this.state_=0;this.result_=void 0;this.onSettledCallbacks_=[];var c=this.createResolveAndReject_();try{b(c.resolve,c.reject)}catch(p){c.reject(p)}};f.prototype.createResolveAndReject_=\nfunction(){function b(b){return function(e){d||(d=!0,b.call(c,e))}}var c=this,d=!1;return{resolve:b(this.resolveTo_),reject:b(this.reject_)}};f.prototype.resolveTo_=function(b){if(b===this)this.reject_(new TypeError("A Promise cannot resolve to itself"));else if(b instanceof f)this.settleSameAsPromise_(b);else{a:switch(typeof b){case "object":var c=null!=b;break a;case "function":c=!0;break a;default:c=!1}c?this.resolveToNonPromiseObj_(b):this.fulfill_(b)}};f.prototype.resolveToNonPromiseObj_=function(b){var c=\nvoid 0;try{c=b.then}catch(p){this.reject_(p);return}"function"==typeof c?this.settleSameAsThenable_(c,b):this.fulfill_(b)};f.prototype.reject_=function(b){this.settle_(2,b)};f.prototype.fulfill_=function(b){this.settle_(1,b)};f.prototype.settle_=function(b,c){if(0!=this.state_)throw Error("Cannot settle("+b+", "+c|"): Promise already settled in state"+this.state_);this.state_=b;this.result_=c;this.executeOnSettledCallbacks_()};f.prototype.executeOnSettledCallbacks_=function(){if(null!=this.onSettledCallbacks_){for(var b=\nthis.onSettledCallbacks_,c=0;c<b.length;++c)b[c].call(),b[c]=null;this.onSettledCallbacks_=null}};var q=new c;f.prototype.settleSameAsPromise_=function(b){var c=this.createResolveAndReject_();b.callWhenSettled_(c.resolve,c.reject)};f.prototype.settleSameAsThenable_=function(b,c){var d=this.createResolveAndReject_();try{b.call(c,d.resolve,d.reject)}catch(w){d.reject(w)}};f.prototype.then=function(b,c){function d(b,c){return"function"==typeof b?function(c){try{e(b(c))}catch(x){g(x)}}:c}var e,g,h=new f(function(b,\nc){e=b;g=c});this.callWhenSettled_(d(b,e),d(c,g));return h};f.prototype.catch=function(b){return this.then(void 0,b)};f.prototype.callWhenSettled_=function(b,c){function d(){switch(e.state_){case 1:b(e.result_);break;case 2:c(e.result_);break;default:throw Error("Unexpected state: "+e.state_);}}var e=this;null==this.onSettledCallbacks_?q.asyncExecute(d):this.onSettledCallbacks_.push(function(){q.asyncExecute(d)})};f.resolve=d;f.reject=function(b){return new f(function(c,d){d(b)})};f.race=function(b){return new f(function(c,\ne){for(var l=$jscomp.makeIterator(b),g=l.next();!g.done;g=l.next())d(g.value).callWhenSettled_(c,e)})};f.all=function(b){var c=$jscomp.makeIterator(b),e=c.next();return e.done?d([]):new f(function(b,g){function h(c){return function(h){n[c]=h;l--;0==l&&b(n)}}var n=[],l=0;do n.push(void 0),l++,d(e.value).callWhenSettled_(h(n.length-1),g),e=c.next();while(!e.done)})};return f},"es6","es3");\n$jscomp.checkStringArgs=function(b,c,d){if(null==b)throw new TypeError("The \'this\' value for String.prototype."+d+" must not be null or undefined");if(c instanceof RegExp)throw new TypeError("First argument to String.prototype."+d+" must not be a regular expression");return b+""};\n$jscomp.polyfill("String.prototype.repeat",function(b){return b?b:function(b){var c=$jscomp.checkStringArgs(this,null,"repeat");if(0>b||1342177279<b)throw new RangeError("Invalid count value");b|=0;for(var e="";b;)if(b&1&&(e+=c),b>>>=1)c+=c;return e}},"es6","es3");\n$jscomp.polyfill("String.prototype.startsWith",function(b){return b?b:function(b,d){var c=$jscomp.checkStringArgs(this,b,"startsWith");b+="";var f=c.length,q=b.length;d=Math.max(0,Math.min(d|0,c.length));for(var l=0;l<q&&d<f;)if(c[d++]!=b[l++])return!1;return l>=q}},"es6","es3");\n$jscomp.polyfill("String.prototype.endsWith",function(b){return b?b:function(b,d){var c=$jscomp.checkStringArgs(this,b,"endsWith");b+="";void 0===d&&(d=c.length);d=Math.max(0,Math.min(d|0,c.length));for(var f=b.length;0<f&&0<d;)if(c[--d]!=b[--f])return!1;return 0>=f}},"es6","es3");\n$jscomp.polyfill("Array.prototype.fill",function(b){return b?b:function(b,d,e){var c=this.length||0;0>d&&(d=Math.max(0,c+d));if(null==e||e>c)e=c;e=Number(e);0>e&&(e=Math.max(0,c+e));for(d=Number(d||0);d<e;d++)this[d]=b;return this}},"es6","es3");\n$jscomp.iteratorFromArray=function(b,c){$jscomp.initSymbolIterator();b instanceof String&&(b+="");var d=0,e={next:function(){if(d<b.length){var f=d++;return{value:c(f,b[f]),done:!1}}e.next=function(){return{done:!0,value:void 0}};return e.next()}};e[Symbol.iterator]=function(){return e};return e};$jscomp.polyfill("Array.prototype.keys",function(b){return b?b:function(){return $jscomp.iteratorFromArray(this,function(b){return b})}},"es6","es3");\n$jscomp.polyfill("Object.is",function(b){return b?b:function(b,d){return b===d?0!==b||1/b===1/d:b!==b&&d!==d}},"es6","es3");$jscomp.polyfill("Array.prototype.includes",function(b){return b?b:function(b,d){var c=this;c instanceof String&&(c=String(c));var f=c.length;for(d=d||0;d<f;d++)if(c[d]==b||Object.is(c[d],b))return!0;return!1}},"es7","es3");\n$jscomp.polyfill("String.prototype.includes",function(b){return b?b:function(b,d){return-1!==$jscomp.checkStringArgs(this,b,"includes").indexOf(b,d||0)}},"es6","es3");$jscomp.polyfill("Number.isFinite",function(b){return b?b:function(b){return"number"!==typeof b?!1:!isNaN(b)&&Infinity!==b&&-Infinity!==b}},"es6","es3");$jscomp.polyfill("Number.isInteger",function(b){return b?b:function(b){return Number.isFinite(b)?b===Math.floor(b):!1}},"es6","es3");$3Dmol=function(b){return b.$3Dmol||{}}(window);\n"object"===typeof module&&"object"===typeof module.exports&&(module.exports=$3Dmol);$3Dmol.notrack||$.get("https://3dmol.csb.pitt.edu/track/report.cgi");String.prototype.startsWith||(String.prototype.startsWith=function(b){return 0===this.lastIndexOf(b,0)});String.prototype.endsWith||(String.prototype.endsWith=function(b){return-1!==this.indexOf(b,this.length-b.length)});\n$.ajaxTransport("+binary",function(b,c,d){if(window.FormData&&(b.dataType&&"binary"==b.dataType||b.data&&(window.ArrayBuffer&&b.data instanceof ArrayBuffer||window.Blob&&b.data instanceof Blob)))return{send:function(c,d){var e=new XMLHttpRequest,l=b.url,f=b.type,p=b.async||!0,w=b.responseType||"blob",g=b.data||null,h=b.username||null,n=b.password||null,y=function(){var c={};c[b.dataType]=e.response;d(e.status,e.statusText,c,e.getAllResponseHeaders())};e.addEventListener("load",y);e.addEventListener("error",\ny);e.addEventListener("abort",y);e.open(f,l,p,h,n);for(var m in c)e.setRequestHeader(m,c[m]);e.responseType=w;e.send(g)},abort:function(){d.abort()}}});$3Dmol.createViewer=function(b,c){"string"===$.type(b)&&(b=$("#"+b));if(b){c=c||{};try{return new $3Dmol.GLViewer(b,c)}catch(d){throw"error creating viewer: "+d;}}};\n$3Dmol.createViewerGrid=function(b,c,d){"string"===$.type(b)&&(b=$("#"+b));if(b){c=c||{};d=d||{};var e=[],f=document.createElement("canvas");d.rows=c.rows;d.cols=c.cols;d.control_all=void 0!=c.control_all?c.control_all:!1;$(b).append($(f));try{for(var q=0;q<c.rows;q++){for(var l=[],t=0;t<c.cols;t++){d.row=q;d.col=t;d.canvas=f;d.viewers=e;d.control_all=c.control_all;var p=$3Dmol.createViewer(b,d);l.push(p)}e.unshift(l)}}catch(w){throw"error creating viewer grid: "+w;}return e}};$3Dmol.viewers={};\n$3Dmol.getbin=function(b,c,d,e){var f=new Promise(function(c,l){d=void 0==d?"GET":d;$.ajax({url:b,dataType:"binary",method:d,data:e,responseType:"arraybuffer",processData:!1}).done(function(b,d,e){c(b)}).fail(function(b,c){console.log(c);l()})});return c?f.then(c):f};$3Dmol.base64ToArray=function(b){b=window.atob(b);for(var c=b.length,d=new Uint8Array(c),e=0;e<c;e++)d[e]=b.charCodeAt(e);return d};\n$3Dmol.download=function(b,c,d,e){var f="",q="";q="";var l=c.addModel();if("mmtf:"===b.substr(0,5)){q=d&&d.pdbUri?d.pdbUri:"https://mmtf.rcsb.org/v1.0/full/";b=b.substr(5).toUpperCase();var t=q+b;d&&"undefined"===typeof d.noComputeSecondaryStructure&&(d.noComputeSecondaryStructure=!0);b=new Promise(function(b,e){$3Dmol.getbin(t).then(function(h){l.addMolData(h,"mmtf",d);c.zoomTo();c.render();b(l)})})}else{if("pdb:"===b.substr(0,4)){f="mmtf";d&&d.format&&(f=d.format);d&&"undefined"===typeof d.noComputeSecondaryStructure&&\n(d.noComputeSecondaryStructure=!0);b=b.substr(4).toUpperCase();if(!b.match(/^[1-9][A-Za-z0-9]{3}$/)){alert("Wrong PDB ID");return}"mmtf"==f?(q=d&&d.mmtfUri?d.mmtfUri:"https://mmtf.rcsb.org/v1.0/full/",t=q+b.toUpperCase()):(q=d&&d.pdbUri?d.pdbUri:"https://files.rcsb.org/view/",t=q+b+"."+f)}else if("cid:"==b.substr(0,4)){f="sdf";b=b.substr(4);if(!b.match(/^[0-9]+$/)){alert("Wrong Compound ID");return}t="https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/"+b+"/SDF?record_type=3d"}else"url:"==b.substr(0,\n4)&&(f=t=b.substr(4));var p=function(b){l.addMolData(b,f,d);c.zoomTo();c.render()};b=new Promise(function(b,c){"mmtf"==f?$3Dmol.getbin(t).then(function(c){p(c);b(l)}):$.get(t,function(c){p(c);b(l)}).fail(function(b){console.log("fetch of "+t+" failed: "+b.statusText)})})}return e?(b.then(function(b){e(b)}),l):b};$3Dmol.SurfaceType={VDW:1,MS:2,SAS:3,SES:4};$3Dmol.mergeGeos=function(b,c){c=c.geometry;void 0!==c&&b.geometryGroups.push(c.geometryGroups[0])};\n$3Dmol.multiLineString=function(b){return b.toString().replace(/^[^\\/]+\\/\\*!?/,"").replace(/\\*\\/[^\\/]+$/,"")};$3Dmol.syncSurface=!1;if(0<=window.navigator.userAgent.indexOf("MSIE ")||0<=window.navigator.userAgent.indexOf("Trident/"))$3Dmol.syncSurface=!0;\n$3Dmol.specStringToObject=function(b){if("object"===typeof b||"undefined"===typeof b||null==b)return b;b=b.replace(/%7E/,"~");var c=function(b){return $.isNumeric(b)?Math.floor(parseFloat(b))==parseInt(b)?parseFloat(b):0<=b.indexOf(".")?parseFloat(b):parseInt(b):"true"===b?!0:"false"===b?!1:b},d={};if("all"===b)return d;b=b.split(";");for(var e=0;e<b.length;e++){var f=b[e].split(":"),q=f[0],l={};if(f=f[1])if(f=f.replace(/~/g,"="),-1!==f.indexOf("=")){f=f.split(",");for(var t=0;t<f.length;t++){var p=\nf[t].split("=",2);l[p[0]]=c(p[1])}}else l=-1!==f.indexOf(",")?f.split(","):c(f);d[q]=l}return d};\n$3Dmol.getExtent=function(b,c){var d,e,f,q,l,t,p,w=!c;c=d=e=9999;var g=f=q=-9999;var h=l=t=p=0;if(0===b.length)return[[0,0,0],[0,0,0],[0,0,0]];for(var n=0;n<b.length;n++){var y=b[n];if("undefined"!==typeof y&&isFinite(y.x)&&isFinite(y.y)&&isFinite(y.z)&&(p++,h+=y.x,l+=y.y,t+=y.z,c=c<y.x?c:y.x,d=d<y.y?d:y.y,e=e<y.z?e:y.z,g=g>y.x?g:y.x,f=f>y.y?f:y.y,q=q>y.z?q:y.z,y.symmetries&&w))for(var m=0;m<y.symmetries.length;m++)p++,h+=y.symmetries[m].x,l+=y.symmetries[m].y,t+=y.symmetries[m].z,c=c<y.symmetries[m].x?\nc:y.symmetries[m].x,d=d<y.symmetries[m].y?d:y.symmetries[m].y,e=e<y.symmetries[m].z?e:y.symmetries[m].z,g=g>y.symmetries[m].x?g:y.symmetries[m].x,f=f>y.symmetries[m].y?f:y.symmetries[m].y,q=q>y.symmetries[m].z?q:y.symmetries[m].z}return[[c,d,e],[g,f,q],[h/p,l/p,t/p]]};$3Dmol.getAtomProperty=function(b,c){var d=null;b.properties&&"undefined"!=typeof b.properties[c]?d=b.properties[c]:"undefined"!=typeof b[c]&&(d=b[c]);return d};\n$3Dmol.getPropertyRange=function(b,c){for(var d=Number.POSITIVE_INFINITY,e=Number.NEGATIVE_INFINITY,f=0,q=b.length;f<q;f++){var l=$3Dmol.getAtomProperty(b[f],c);null!=l&&(l<d&&(d=l),l>e&&(e=l))}isFinite(d)||isFinite(e)?isFinite(d)?isFinite(e)||(e=d):d=e:d=e=0;return[d,e]};"function"==="function"&&__webpack_require__(1)&&!(__WEBPACK_AMD_DEFINE_FACTORY__ = ($3Dmol),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n$3Dmol.createStereoViewer=function(b){var c=this;"string"===$.type(b)&&(b=$("#"+b));if(b){b=$3Dmol.createViewerGrid(b,{rows:1,cols:2,control_all:!0});this.glviewer1=b[0][0];this.glviewer2=b[0][1];this.glviewer1.setAutoEyeSeparation(!1);this.glviewer2.setAutoEyeSeparation(!0);this.glviewer1.linkViewer(this.glviewer2);this.glviewer2.linkViewer(this.glviewer1);b=Object.getOwnPropertyNames(this.glviewer1).filter(function(b){return"function"==typeof c.glviewer1[b]});for(var d=0;d<b.length;d++)this[b[d]]=\nfunction(b){return function(){var c=this.glviewer1[b].apply(this.glviewer1,arguments),d=this.glviewer2[b].apply(this.glviewer2,arguments);return[c,d]}}(b[d]);this.setCoordinates=function(b,c,d){for(var e=0;e<b.length;e++)b[e].setCoordinates(c,d)};this.surfacesFinished=function(){return this.glviewer1.surfacesFinished()&&this.glviewer2.surfacesFinished()};this.isAnimated=function(){return this.glviewer1.isAnimated()||this.glviewer2.isAnimated()};this.render=function(b){this.glviewer1.render();this.glviewer2.render();\nb&&b(this)};this.getCanvas=function(){return this.glviewer1.getCanvas()}}};var $3Dmol=$3Dmol||{};$3Dmol.Math={clamp:function(b,c,d){return Math.min(Math.max(b,c),d)},degToRad:function(){var b=Math.PI/180;return function(c){return c*b}}()};$3Dmol.Quaternion=function(b,c,d,e){this.x=b||0;this.y=c||0;this.z=d||0;this.w=void 0!==e?e:1};\n$3Dmol.Quaternion.prototype={constructor:$3Dmol.Quaternion,set:function(b,c,d,e){this.x=b;this.y=c;this.z=d;this.w=e;return this},copy:function(b){this.x=b.x;this.y=b.y;this.z=b.z;this.w=b.w;return this},conjugate:function(){this.x*=-1;this.y*=-1;this.z*=-1;return this},inverse:function(){return this.conjugate().normalize()},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},normalize:function(){var b=this.length();0===b?(this.z=this.y=this.x=0,this.w=1):\n(b=1/b,this.x*=b,this.y*=b,this.z*=b,this.w*=b);return this},multiply:function(b){return this.multiplyQuaternions(this,b)},multiplyScalar:function(b){this.x*=b;this.y*=b;this.z*=b;this.w*=b;return this},multiplyQuaternions:function(b,c){var d=b.x,e=b.y,f=b.z;b=b.w;var q=c.x,l=c.y,t=c.z;c=c.w;this.x=d*c+b*q+e*t-f*l;this.y=e*c+b*l+f*q-d*t;this.z=f*c+b*t+d*l-e*q;this.w=b*c-d*q-e*l-f*t;return this},sub:function(b){this.x-=b.x;this.y-=b.y;this.z-=b.z;this.w-=b.w;return this},clone:function(){return new $3Dmol.Quaternion(this.x,\nthis.y,this.z,this.w)},setFromEuler:function(b){var c=Math.cos(b.x/2),d=Math.cos(b.y/2),e=Math.cos(b.z/2),f=Math.sin(b.x/2),q=Math.sin(b.y/2);b=Math.sin(b.z/2);this.x=f*d*e+c*q*b;this.y=c*q*e-f*d*b;this.z=c*d*b+f*q*e;this.w=c*d*e-f*q*b;return this}};$3Dmol.Vector2=function(b,c){this.x=b||0;this.y=c||0};\n$3Dmol.Vector2.prototype={constructor:$3Dmol.Vector2,set:function(b,c){this.x=b;this.y=c;return this},subVectors:function(b,c){this.x=b.x-c.x;this.y=b.y-c.y;return this},copy:function(b){this.x=b.x;this.y=b.y;return this},clone:function(){return new $3Dmol.Vector2(this.x,this.y)}};$3Dmol.Vector3=function(b,c,d){this.x=b||0;this.y=c||0;this.z=d||0};\n$3Dmol.Vector3.prototype={constructor:$3Dmol.Vector3,set:function(b,c,d){this.x=b;this.y=c;this.z=d;return this},copy:function(b){this.x=b.x;this.y=b.y;this.z=b.z;return this},add:function(b){this.x+=b.x;this.y+=b.y;this.z+=b.z;return this},addVectors:function(b,c){this.x=b.x+c.x;this.y=b.y+c.y;this.z=b.z+c.z;return this},sub:function(b){this.x-=b.x;this.y-=b.y;this.z-=b.z;return this},subVectors:function(b,c){this.x=b.x-c.x;this.y=b.y-c.y;this.z=b.z-c.z;return this},multiplyScalar:function(b){this.x*=\nb;this.y*=b;this.z*=b;return this},divideScalar:function(b){0!==b?(this.x/=b,this.y/=b,this.z/=b):this.z=this.y=this.x=0;return this},max:function(b){this.x=Math.max(this.x,b.x);this.y=Math.max(this.y,b.y);this.z=Math.max(this.z,b.z);return this},min:function(b){this.x=Math.min(this.x,b.x);this.y=Math.min(this.y,b.y);this.z=Math.min(this.z,b.z);return this},distanceTo:function(b){return Math.sqrt(this.distanceToSquared(b))},distanceToSquared:function(b){var c=this.x-b.x,d=this.y-b.y;b=this.z-b.z;\nreturn c*c+d*d+b*b},applyMatrix4:function(b){var c=this.x,d=this.y,e=this.z;b=b.elements;this.x=b[0]*c+b[4]*d+b[8]*e+b[12];this.y=b[1]*c+b[5]*d+b[9]*e+b[13];this.z=b[2]*c+b[6]*d+b[10]*e+b[14];return this},applyProjection:function(b){var c=this.x,d=this.y,e=this.z;b=b.elements;var f=b[3]*c+b[7]*d+b[11]*e+b[15];this.x=(b[0]*c+b[4]*d+b[8]*e+b[12])/f;this.y=(b[1]*c+b[5]*d+b[9]*e+b[13])/f;this.z=(b[2]*c+b[6]*d+b[10]*e+b[14])/f;return this},applyQuaternion:function(b){var c=this.x,d=this.y,e=this.z,f=b.x,\nq=b.y,l=b.z;var t=2*(d*l-e*q);var p=2*(e*f-c*l);var w=2*(c*q-d*f);this.x=c+b.w*t+(p*l-w*q);this.y=d+b.w*p+(w*f-t*l);this.z=e+b.w*w+(t*q-p*f);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(b){return this.x*b.x+this.y*b.y+this.z*b.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},normalize:function(){return this.divideScalar(this.length())},cross:function(b){var c=this.x,\nd=this.y,e=this.z;this.x=d*b.z-e*b.y;this.y=e*b.x-c*b.z;this.z=c*b.y-d*b.x;return this},crossVectors:function(b,c){this.x=b.y*c.z-b.z*c.y;this.y=b.z*c.x-b.x*c.z;this.z=b.x*c.y-b.y*c.x;return this},getPositionFromMatrix:function(b){this.x=b.elements[12];this.y=b.elements[13];this.z=b.elements[14];return this},setEulerFromRotationMatrix:function(b,c){var d=b.elements;b=d[0];var e=d[4],f=d[8],q=d[5],l=d[9],t=d[6];d=d[10];void 0===c||"XYZ"===c?(this.y=Math.asin($3Dmol.Math.clamp(f,-1,1)),.99999>Math.abs(f)?\n(this.x=Math.atan2(-l,d),this.z=Math.atan2(-e,b)):(this.x=Math.atan2(t,q),this.z=0)):console.error("Error with vector\'s setEulerFromRotationMatrix: Unknown order: "+c);return this},rotateAboutVector:function(b,c){b.normalize();var d=Math.cos(c),e=Math.sin(c);c=this.clone().multiplyScalar(d);e=b.clone().cross(this).multiplyScalar(e);b=b.clone().multiplyScalar(b.clone().dot(this)).multiplyScalar(1-d);b=c.add(e).add(b);this.x=b.x;this.y=b.y;this.z=b.z;return this},setFromMatrixPosition:function(b){b=\nb.elements;this.x=b[12];this.y=b[13];this.z=b[14];return this},transformDirection:function(b){var c=this.x,d=this.y,e=this.z;b=b.elements;this.x=b[0]*c+b[4]*d+b[8]*e;this.y=b[1]*c+b[5]*d+b[9]*e;this.z=b[2]*c+b[6]*d+b[10]*e;return this.normalize()},clone:function(){return new $3Dmol.Vector3(this.x,this.y,this.z)}};$3Dmol.Matrix3=function(b,c,d,e,f,q,l,t,p){this.elements=new Float32Array(9);this.set(void 0!==b?b:1,c||0,d||0,e||0,void 0!==f?f:1,q||0,l||0,t||0,void 0!==p?p:1)};\n$3Dmol.Matrix3.prototype={constructor:$3Dmol.Matrix3,set:function(b,c,d,e,f,q,l,t,p){var w=this.elements;w[0]=b;w[3]=c;w[6]=d;w[1]=e;w[4]=f;w[7]=q;w[2]=l;w[5]=t;w[8]=p;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},copy:function(b){b=b.elements;this.set(b[0],b[3],b[6],b[1],b[4],b[7],b[2],b[5],b[8])},multiplyScalar:function(b){var c=this.elements;c[0]*=b;c[3]*=b;c[6]*=b;c[1]*=b;c[4]*=b;c[7]*=b;c[2]*=b;c[5]*=b;c[8]*=b;return this},getInverse:function(b,c){b=b.elements;var d=\nthis.elements;d[0]=b[10]*b[5]-b[6]*b[9];d[1]=-b[10]*b[1]+b[2]*b[9];d[2]=b[6]*b[1]-b[2]*b[5];d[3]=-b[10]*b[4]+b[6]*b[8];d[4]=b[10]*b[0]-b[2]*b[8];d[5]=-b[6]*b[0]+b[2]*b[4];d[6]=b[9]*b[4]-b[5]*b[8];d[7]=-b[9]*b[0]+b[1]*b[8];d[8]=b[5]*b[0]-b[1]*b[4];b=b[0]*d[0]+b[1]*d[3]+b[2]*d[6];if(0===b){if(c)throw Error("Matrix3.getInverse(): can\'t invert matrix, determinant is 0");console.warn("Matrix3.getInverse(): can\'t invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/b);return this},\ngetDeterminant:function(){var b=this.elements;return b[0]*b[4]*b[8]+b[1]*b[5]*b[6]+b[2]*b[3]*b[7]-b[2]*b[4]*b[6]-b[1]*b[3]*b[8]-b[0]*b[5]*b[7]},transpose:function(){var b=this.elements;var c=b[1];b[1]=b[3];b[3]=c;c=b[2];b[2]=b[6];b[6]=c;c=b[5];b[5]=b[7];b[7]=c;return this},clone:function(){var b=this.elements;return new $3Dmol.Matrix3(b[0],b[3],b[6],b[1],b[4],b[7],b[2],b[5],b[8])}};\n$3Dmol.Matrix4=function(b,c,d,e,f,q,l,t,p,w,g,h,n,y,m,x){if("undefined"===typeof c&&"undefined"!==typeof b)this.elements=new Float32Array(b);else{var u=this.elements=new Float32Array(16);u[0]=void 0!==b?b:1;u[4]=c||0;u[8]=d||0;u[12]=e||0;u[1]=f||0;u[5]=void 0!==q?q:1;u[9]=l||0;u[13]=t||0;u[2]=p||0;u[6]=w||0;u[10]=void 0!==g?g:1;u[14]=h||0;u[3]=n||0;u[7]=y||0;u[11]=m||0;u[15]=void 0!==x?x:1}};\n$3Dmol.Matrix4.prototype={constructor:$3Dmol.Matrix4,set:function(b,c,d,e,f,q,l,t,p,w,g,h,n,y,m,x){var u=this.elements;u[0]=b;u[4]=c;u[8]=d;u[12]=e;u[1]=f;u[5]=q;u[9]=l;u[13]=t;u[2]=p;u[6]=w;u[10]=g;u[14]=h;u[3]=n;u[7]=y;u[11]=m;u[15]=x;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(b){b=b.elements;this.set(b[0],b[4],b[8],b[12],b[1],b[5],b[9],b[13],b[2],b[6],b[10],b[14],b[3],b[7],b[11],b[15]);return this},matrix3FromTopLeft:function(){var b=this.elements;\nreturn new $3Dmol.Matrix3(b[0],b[4],b[8],b[1],b[5],b[9],b[2],b[6],b[10])},setRotationFromEuler:function(b,c){var d=this.elements,e=b.x,f=b.y,q=b.z;b=Math.cos(e);e=Math.sin(e);var l=Math.cos(f);f=Math.sin(f);var t=Math.cos(q);q=Math.sin(q);if(void 0===c||"XYZ"===c){c=b*t;var p=b*q,w=e*t,g=e*q;d[0]=l*t;d[4]=-l*q;d[8]=f;d[1]=p+w*f;d[5]=c-g*f;d[9]=-e*l;d[2]=g-c*f;d[6]=w+p*f;d[10]=b*l}else console.error("Error with matrix4 setRotationFromEuler. Order: "+c);return this},setRotationFromQuaternion:function(b){var c=\nthis.elements,d=b.x,e=b.y,f=b.z,q=b.w,l=d+d,t=e+e,p=f+f;b=d*l;var w=d*t;d*=p;var g=e*t;e*=p;f*=p;l*=q;t*=q;q*=p;c[0]=1-(g+f);c[4]=w-q;c[8]=d+t;c[1]=w+q;c[5]=1-(b+f);c[9]=e-l;c[2]=d-t;c[6]=e+l;c[10]=1-(b+g);return this},lookAt:function(){var b=new $3Dmol.Vector3,c=new $3Dmol.Vector3,d=new $3Dmol.Vector3;return function(e,f,q){var l=this.elements;d.subVectors(e,f).normalize();0===d.length()&&(d.z=1);b.crossVectors(q,d).normalize();0===b.length()&&(d.x+=1E-4,b.crossVectors(q,d).normalize());c.crossVectors(d,\nb);l[0]=b.x;l[4]=c.x;l[8]=d.x;l[1]=b.y;l[5]=c.y;l[9]=d.y;l[2]=b.z;l[6]=c.z;l[10]=d.z;return this}}(),multiplyMatrices:function(b,c){var d=b.elements,e=c.elements;c=this.elements;b=d[0];var f=d[4],q=d[8],l=d[12],t=d[1],p=d[5],w=d[9],g=d[13],h=d[2],n=d[6],y=d[10],m=d[14],x=d[3],u=d[7],M=d[11];d=d[15];var O=e[0],B=e[4],S=e[8],H=e[12],z=e[1],A=e[5],D=e[9],G=e[13],L=e[2],K=e[6],F=e[10],Q=e[14],I=e[3],N=e[7],E=e[11];e=e[15];c[0]=b*O+f*z+q*L+l*I;c[4]=b*B+f*A+q*K+l*N;c[8]=b*S+f*D+q*F+l*E;c[12]=b*H+f*G+q*\nQ+l*e;c[1]=t*O+p*z+w*L+g*I;c[5]=t*B+p*A+w*K+g*N;c[9]=t*S+p*D+w*F+g*E;c[13]=t*H+p*G+w*Q+g*e;c[2]=h*O+n*z+y*L+m*I;c[6]=h*B+n*A+y*K+m*N;c[10]=h*S+n*D+y*F+m*E;c[14]=h*H+n*G+y*Q+m*e;c[3]=x*O+u*z+M*L+d*I;c[7]=x*B+u*A+M*K+d*N;c[11]=x*S+u*D+M*F+d*E;c[15]=x*H+u*G+M*Q+d*e;return this},multiplyScalar:function(b){var c=this.elements;c[0]*=b;c[4]*=b;c[8]*=b;c[12]*=b;c[1]*=b;c[5]*=b;c[9]*=b;c[13]*=b;c[2]*=b;c[6]*=b;c[10]*=b;c[14]*=b;c[3]*=b;c[7]*=b;c[11]*=b;c[15]*=b;return this},makeTranslation:function(b,c,d){this.set(1,\n0,0,b,0,1,0,c,0,0,1,d,0,0,0,1);return this},transpose:function(){var b=this.elements;var c=b[1];b[1]=b[4];b[4]=c;c=b[2];b[2]=b[8];b[8]=c;c=b[6];b[6]=b[9];b[9]=c;c=b[3];b[3]=b[12];b[12]=c;c=b[7];b[7]=b[13];b[13]=c;c=b[11];b[11]=b[14];b[14]=c;return this},getPosition:function(){var b=new $3Dmol.Vector3;return function(){console.warn("DEPRECATED: Matrix4\'s .getPosition() has been removed. Use Vector3.getPositionFromMatrix( matrix ) instead.");var c=this.elements;return b.set(c[12],c[13],c[14])}}(),setPosition:function(b){var c=\nthis.elements;c[12]=b.x;c[13]=b.y;c[14]=b.z;return this},getInverse:function(b,c){var d=this.elements;b=b.elements;var e=b[0],f=b[4],q=b[8],l=b[12],t=b[1],p=b[5],w=b[9],g=b[13],h=b[2],n=b[6],y=b[10],m=b[14],x=b[3],u=b[7],M=b[11],O=b[15];d[0]=w*m*u-g*y*u+g*n*M-p*m*M-w*n*O+p*y*O;d[4]=l*y*u-q*m*u-l*n*M+f*m*M+q*n*O-f*y*O;d[8]=q*g*u-l*w*u+l*p*M-f*g*M-q*p*O+f*w*O;d[12]=l*w*n-q*g*n-l*p*y+f*g*y+q*p*m-f*w*m;d[1]=g*y*x-w*m*x-g*h*M+t*m*M+w*h*O-t*y*O;d[5]=q*m*x-l*y*x+l*h*M-e*m*M-q*h*O+e*y*O;d[9]=l*w*x-q*g*x-\nl*t*M+e*g*M+q*t*O-e*w*O;d[13]=q*g*h-l*w*h+l*t*y-e*g*y-q*t*m+e*w*m;d[2]=p*m*x-g*n*x+g*h*u-t*m*u-p*h*O+t*n*O;d[6]=l*n*x-f*m*x-l*h*u+e*m*u+f*h*O-e*n*O;d[10]=f*g*x-l*p*x+l*t*u-e*g*u-f*t*O+e*p*O;d[14]=l*p*h-f*g*h-l*t*n+e*g*n+f*t*m-e*p*m;d[3]=w*n*x-p*y*x-w*h*u+t*y*u+p*h*M-t*n*M;d[7]=f*y*x-q*n*x+q*h*u-e*y*u-f*h*M+e*n*M;d[11]=q*p*x-f*w*x-q*t*u+e*w*u+f*t*M-e*p*M;d[15]=f*w*h-q*p*h+q*t*n-e*w*n-f*t*y+e*p*y;d=b[0]*d[0]+b[1]*d[4]+b[2]*d[8]+b[3]*d[12];if(0===d){if(c)throw Error("Matrix4.getInverse(): can\'t invert matrix, determinant is 0");\nconsole.warn("Matrix4.getInverse(): can\'t invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/d);return this},isReflected:function(){return 0>this.matrix3FromTopLeft().getDeterminant()},compose:function(){var b=new $3Dmol.Matrix4,c=new $3Dmol.Matrix4;return function(d,e,f){var q=this.elements;b.identity();b.setRotationFromQuaternion(e);c.makeScale(f.x,f.y,f.z);this.multiplyMatrices(b,c);q[12]=d.x;q[13]=d.y;q[14]=d.z;return this}}(),decompose:function(){var b=new $3Dmol.Vector3,\nc=new $3Dmol.Vector3,d=new $3Dmol.Vector3,e=new $3Dmol.Matrix4;return function(f,q,l){var t=this.elements;b.set(t[0],t[1],t[2]);c.set(t[4],t[5],t[6]);d.set(t[8],t[9],t[10]);f=f instanceof $3Dmol.Vector3?f:new $3Dmol.Vector3;q=q instanceof $3Dmol.Quaternion?q:new $3Dmol.Quaternion;l=l instanceof $3Dmol.Vector3?l:new $3Dmol.Vector3;l.x=b.length();l.y=c.length();l.z=d.length();f.x=t[12];f.y=t[13];f.z=t[14];e.copy(this);e.elements[0]/=l.x;e.elements[1]/=l.x;e.elements[2]/=l.x;e.elements[4]/=l.y;e.elements[5]/=\nl.y;e.elements[6]/=l.y;e.elements[8]/=l.z;e.elements[9]/=l.z;e.elements[10]/=l.z;q.setFromRotationMatrix(e);return[f,q,l]}}(),scale:function(b){var c=this.elements,d=b.x,e=b.y;b=b.z;c[0]*=d;c[4]*=e;c[8]*=b;c[1]*=d;c[5]*=e;c[9]*=b;c[2]*=d;c[6]*=e;c[10]*=b;c[3]*=d;c[7]*=e;c[11]*=b;return this},getMaxScaleOnAxis:function(){var b=this.elements;return Math.sqrt(Math.max(b[0]*b[0]+b[1]*b[1]+b[2]*b[2],Math.max(b[4]*b[4]+b[5]*b[5]+b[6]*b[6],b[8]*b[8]+b[9]*b[9]+b[10]*b[10])))},makeFrustum:function(b,c,d,e,\nf,q){var l=this.elements;l[0]=2*f/(c-b);l[4]=0;l[8]=(c+b)/(c-b);l[12]=0;l[1]=0;l[5]=2*f/(e-d);l[9]=(e+d)/(e-d);l[13]=0;l[2]=0;l[6]=0;l[10]=-(q+f)/(q-f);l[14]=-2*q*f/(q-f);l[3]=0;l[7]=0;l[11]=-1;l[15]=0;return this},makePerspective:function(b,c,d,e){b=d*Math.tan($3Dmol.Math.degToRad(.5*b));var f=-b;return this.makeFrustum(f*c,b*c,f,b,d,e)},makeOrthographic:function(b,c,d,e,f,q){var l=this.elements,t=1/(c-b),p=1/(d-e),w=1/(q-f);l[0]=2*t;l[4]=0;l[8]=0;l[12]=-((c+b)*t);l[1]=0;l[5]=2*p;l[9]=0;l[13]=-((d+\ne)*p);l[2]=0;l[6]=0;l[10]=-2*w;l[14]=-((q+f)*w);l[3]=0;l[7]=0;l[11]=0;l[15]=1;return this},isEqual:function(b){b=b.elements;var c=this.elements;return c[0]==b[0]&&c[4]==b[4]&&c[8]==b[8]&&c[12]==b[12]&&c[1]==b[1]&&c[5]==b[5]&&c[9]==b[9]&&c[13]==b[13]&&c[2]==b[2]&&c[6]==b[6]&&c[10]==b[10]&&c[14]==b[14]&&c[3]==b[3]&&c[7]==b[7]&&c[11]==b[11]&&c[15]==b[15]?!0:!1},clone:function(){var b=this.elements;return new $3Dmol.Matrix4(b[0],b[4],b[8],b[12],b[1],b[5],b[9],b[13],b[2],b[6],b[10],b[14],b[3],b[7],b[11],\nb[15])},isIdentity:function(){var b=this.elements;return 1==b[0]&&0==b[4]&&0==b[8]&&0==b[12]&&0==b[1]&&1==b[5]&&0==b[9]&&0==b[13]&&0==b[2]&&0==b[6]&&1==b[10]&&0==b[14]&&0==b[3]&&0==b[7]&&0==b[11]&&1==b[15]?!0:!1}};$3Dmol.Vector3.prototype.unproject=function(){var b=new $3Dmol.Matrix4;return function(c){b.multiplyMatrices(c.matrixWorld,b.getInverse(c.projectionMatrix));return this.applyMatrix4(b)}}();$3Dmol.Ray=function(b,c){this.origin=void 0!==b?b:new $3Dmol.Vector3;this.direction=void 0!==c?c:new $3Dmol.Vector3};\n$3Dmol.Ray.prototype={constructor:$3Dmol.Ray,set:function(b,c){this.origin.copy(b);this.direction.copy(c);return this},copy:function(b){this.origin.copy(b.origin);this.direction.copy(b.direction);return this},at:function(b,c){return(c||new $3Dmol.Vector3).copy(this.direction).multiplyScalar(b).add(this.origin)},recast:function(){var b=new $3Dmol.Vector3;return function(c){this.origin.copy(this.at(c,b));return this}}(),closestPointToPoint:function(b,c){c=c||new $3Dmol.Vector3;c.subVectors(b,this.origin);\nb=c.dot(this.direction);return c.copy(this.direction).multiplyScalar(b).add(this.origin)},distanceToPoint:function(b){var c=new $3Dmol.Vector3;return function(b){var d=c.subVectors(b,this.origin).dot(this.direction);c.copy(this.direction).multiplyScalar(d).add(this.origin);return c.distanceTo(b)}}(),isIntersectionCylinder:function(){},isIntersectionSphere:function(b){return this.distanceToPoint(b.center)<=b.radius},isIntersectionPlane:function(b){return 0!==b.normal.dot(this.direction)||0===b.distanceToPoint(this.origin)?\n!0:!1},distanceToPlane:function(b){var c=b.normal.dot(this.direction);if(0===c){if(0===b.distanceToPoint(this.origin))return 0}else return-(this.origin.dot(b.normal)+b.constant)/c},intersectPlane:function(b,c){b=this.distanceToPlane(b);if(void 0!==b)return this.at(b,c)},applyMatrix4:function(b){this.direction.add(this.origin).applyMatrix4(b);this.origin.applyMatrix4(b);this.direction.sub(this.origin);return this},equals:function(b){return b.origin.equals(this.origin)&&b.direction.equals(this.direction)},\nclone:function(){return(new $3Dmol.Ray).copy(this)}};$3Dmol.Sphere=function(b,c){this.center=void 0!==b?b:new $3Dmol.Vector3;this.radius=void 0!==c?c:0};\n$3Dmol.Sphere.prototype={constructor:$3Dmol.Sphere,set:function(b,c){this.center.copy(b);this.radius=c;return this},copy:function(b){this.center.copy(b.center);this.radius=b.radius;return this},applyMatrix4:function(b){this.center.applyMatrix4(b);this.radius*=b.getMaxScaleOnAxis();return this},translate:function(b){this.center.add(b);return this},equals:function(b){return b.center.equals(this.center)&&b.radius===this.radius},clone:function(){return(new $3Dmol.Sphere).copy(this)}};\n$3Dmol.Cylinder=function(b,c,d){this.c1=void 0!==b?b:new $3Dmol.Vector3;this.c2=void 0!==c?c:new $3Dmol.Vector3;this.direction=(new $3Dmol.Vector3).subVectors(this.c2,this.c1).normalize();this.radius=void 0!==d?d:0};\n$3Dmol.Cylinder.prototype={constructor:$3Dmol.Cylinder,copy:function(b){this.c1.copy(b.c1);this.c2.copy(b.c2);this.direction.copy(b.direction);this.radius=b.radius;return this},lengthSq:function(){var b=new $3Dmol.Vector3;return function(){return b.subVectors(this.c2,this.c1).lengthSq()}}(),applyMatrix4:function(b){this.direction.add(this.c1).applyMatrix4(b);this.c1.applyMatrix4(b);this.c2.applyMatrix4(b);this.direction.sub(this.c1).normalize();this.radius*=b.getMaxScaleOnAxis();return this}};\n$3Dmol.Triangle=function(b,c,d){this.a=void 0!==b?b:new $3Dmol.Vector3;this.b=void 0!==c?c:new $3Dmol.Vector3;this.c=void 0!==d?d:new $3Dmol.Vector3};\n$3Dmol.Triangle.prototype={constructor:$3Dmol.Triangle,copy:function(b){this.a.copy(b.a);this.b.copy(b.b);this.c.copy(b.c);return this},applyMatrix4:function(b){this.a.applyMatrix4(b);this.b.applyMatrix4(b);this.c.applyMatrix4(b);return this},getNormal:function(){var b=new $3Dmol.Vector3;return function(){var c=this.a.clone();c.sub(this.b);b.subVectors(this.c,this.b);c.cross(b);c.normalize();return c}}()};\n$3Dmol.EventDispatcher=function(){var b={};this.addEventListener=function(c,d){void 0===b[c]&&(b[c]=[]);-1===b[c].indexOf(d)&&b[c].push(d)};this.removeEventListener=function(c,d){d=b[c].indexOf(d);-1!==d&&b[c].splice(d,1)};this.dispatchEvent=function(c){var d=b[c.type];if(void 0!==d){c.target=this;for(var e=0,f=d.length;e<f;e++)d[e].call(this,c)}}};$3Dmol.Color=function(b){return 1<arguments.length?(this.r=arguments[0]||0,this.g=arguments[1]||0,this.b=arguments[2]||0,this):this.set(b)};\n$3Dmol.Color.prototype={constructor:$3Dmol.Color,r:0,g:0,b:0,set:function(b){if(b instanceof $3Dmol.Color)return b.clone();"number"===typeof b?this.setHex(b):"object"===typeof b&&"r"in b&&"g"in b&&"b"in b&&(this.r=b.r,this.g=b.g,this.b=b.b)},setHex:function(b){b=Math.floor(b);this.r=(b>>16&255)/255;this.g=(b>>8&255)/255;this.b=(b&255)/255;return this},getHex:function(){return Math.round(255*this.r)<<16|Math.round(255*this.g)<<8|Math.round(255*this.b)},clone:function(){return new $3Dmol.Color(this.r,\nthis.g,this.b)},copy:function(b){this.r=b.r;this.g=b.g;this.b=b.b;return this},scaled:function(){var b={};b.r=Math.round(255*this.r);b.g=Math.round(255*this.g);b.b=Math.round(255*this.b);b.a=1;return b}};\n$3Dmol.Object3D=function(){this.id=$3Dmol.Object3DIDCount++;this.name="";this.parent=void 0;this.children=[];this.position=new $3Dmol.Vector3;this.rotation=new $3Dmol.Vector3;this.matrix=new $3Dmol.Matrix4;this.matrixWorld=new $3Dmol.Matrix4;this.quaternion=new $3Dmol.Quaternion;this.eulerOrder="XYZ";this.up=new $3Dmol.Vector3(0,1,0);this.scale=new $3Dmol.Vector3(1,1,1);this.rotationAutoUpdate=this.matrixWorldNeedsUpdate=this.matrixAutoUpdate=!0;this.useQuaternion=!1;this.visible=!0};\n$3Dmol.Object3D.prototype={constructor:$3Dmol.Object3D,lookAt:function(b){this.matrix.lookAt(b,this.position,this.up);this.rotationAutoUpdate&&(!0===this.useQuaternion?this.quaternion.copy(this.matrix.decompose()[1]):this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder))},add:function(b){if(b===this)console.error("Can\'t add $3Dmol.Object3D to itself");else{b.parent=this;this.children.push(b);for(var c=this;void 0!==c.parent;)c=c.parent;void 0!==c&&c instanceof $3Dmol.Scene&&c.__addObject(b)}},\nremove:function(b){var c=this.children.indexOf(b);if(-1!==c){b.parent=void 0;this.children.splice(c,1);for(c=this;void 0!==c.parent;)c=c.parent;void 0!==c&&c instanceof $3Dmol.Scene&&c.__removeObject(b)}},updateMatrix:function(){this.matrix.setPosition(this.position);!1===this.useQuaternion?this.matrix.setRotationFromEuler(this.rotation,this.eulerOrder):this.matrix.setRotationFromQuaternion(this.quaternion);1===this.scale.x&&1===this.scale.y&&1===this.scale.z||this.matrix.scale(this.scale);this.matrixWorldNeedsUpdate=\n!0},updateMatrixWorld:function(b){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===b)void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);this.matrixWorldNeedsUpdate=!1;for(b=0;b<this.children.length;b++)this.children[b].updateMatrixWorld(!0)},clone:function(b){void 0===b&&(b=new $3Dmol.Object3D);b.name=this.name;b.up.copy(this.up);b.position.copy(this.position);b.rotation.copy(this.rotation);\nb.eulerOrder=this.eulerOrder;b.scale.copy(this.scale);b.rotationAutoUpdate=this.rotationAutoUpdate;b.matrix.copy(this.matrix);b.matrixWorld.copy(this.matrixWorld);b.quaternion.copy(this.quaternion);b.matrixAutoUpdate=this.matrixAutoUpdate;b.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate;b.useQuaternion=this.useQuaternion;b.visible=this.visible;for(var c=0;c<this.children.length;c++)b.add(this.children[c].clone());return b},setVisible:function(b){this.visible=b;for(var c=0;c<this.children.length;c++)this.children[c].setVisible(b)}};\n$3Dmol.Object3DIDCount=0;\n$3Dmol.Geometry=function(){var b=function(b){this.id=b||0;this.lineArray=this.radiusArray=this.faceArray=this.normalArray=this.colorArray=this.vertexArray=null;this.lineidx=this.faceidx=this.vertices=0};b.prototype.setColors=function(b){var c=this.vertexArray,d=this.colorArray;if(c.length!=d.length)console.log("Cannot re-color geometry group due to mismatched lengths.");else for(var e=0;e<c.length;e+=3){var t=b(c[e],c[e+1],c[e+2]);t instanceof $3Dmol.Color||(t=$3Dmol.CC.color(t));d[e]=t.r;d[e+1]=\nt.g;d[e+2]=t.b}};b.prototype.getNumVertices=function(){return this.vertices};b.prototype.getVertices=function(){return this.vertexArray};b.prototype.getCentroid=function(){for(var b=new $3Dmol.Vector3,c,d,l,t=0;t<this.vertices;++t)c=3*t,d=this.vertexArray[c],l=this.vertexArray[c+1],c=this.vertexArray[c+2],b.x+=d,b.y+=l,b.z+=c;b.divideScalar(this.vertices);return b};b.prototype.setNormals=function(){var b=this.faceArray,c=this.vertexArray,d=this.normalArray;if(this.vertices&&this.faceidx)for(var l,\nt,p,w,g,h,n=0;n<b.length/3;++n)l=3*b[3*n],t=3*b[3*n+1],p=3*b[3*n+2],w=new $3Dmol.Vector3(c[l],c[l+1],c[l+2]),g=new $3Dmol.Vector3(c[t],c[t+1],c[t+2]),h=new $3Dmol.Vector3(c[p],c[p+1],c[p+2]),w.subVectors(w,g),h.subVectors(h,g),h.cross(w),w=h,w.normalize(),d[l]+=w.x,d[t]+=w.x,d[p]+=w.x,d[l+1]+=w.y,d[t+1]+=w.y,d[p+1]+=w.y,d[l+2]+=w.z,d[t+2]+=w.z,d[p+2]+=w.z};b.prototype.setLineIndices=function(){if(this.faceidx&&(!this.lineArray||this.lineArray.length!=2*this.faceidx||this.lineidx!=2*this.faceidx)){var b=\nthis.faceArray,c=this.lineArray=new Uint16Array(2*this.faceidx);this.lineidx=2*this.faceidx;for(var d=0;d<this.faceidx/3;++d){var l=3*d,t=2*l,p=b[l],w=b[l+1];l=b[l+2];c[t]=p;c[t+1]=w;c[t+2]=p;c[t+3]=l;c[t+4]=w;c[t+5]=l}}};b.prototype.truncateArrayBuffers=function(b,c){b=!0===b?!0:!1;var d=this.colorArray,e=this.normalArray,f=this.faceArray,p=this.lineArray,w=this.radiusArray;this.vertexArray=this.vertexArray.subarray(0,3*this.vertices);this.colorArray=d.subarray(0,3*this.vertices);b?(this.normalArray=\ne.subarray(0,3*this.vertices),this.faceArray=f.subarray(0,this.faceidx),this.lineArray=0<this.lineidx?p.subarray(0,this.lineidx):new Uint16Array(0)):(this.normalArray=new Float32Array(0),this.faceArray=new Uint16Array(0),this.lineArray=new Uint16Array(0));w&&(this.radiusArray=w.subarray(0,this.vertices));c&&(this.normalArray&&(this.normalArray=new Float32Array(this.normalArray)),this.faceArray&&(this.faceArray=new Uint16Array(this.faceArray)),this.lineArray&&(this.lineArray=new Uint16Array(this.lineArray)),\nthis.vertexArray&&(this.vertexArray=new Float32Array(this.vertexArray)),this.colorArray&&(this.colorArray=new Float32Array(this.colorArray)),this.radiusArray&&(this.radiusArray=new Float32Array(this.radiusArray)));this.__inittedArrays=!0};var c=function(c){var d=new b(c.geometryGroups.length);c.geometryGroups.push(d);c.groups=c.geometryGroups.length;d.vertexArray=new Float32Array(196605);d.colorArray=new Float32Array(196605);c.mesh&&(d.normalArray=new Float32Array(196605),d.faceArray=new Uint16Array(393210),\nd.lineArray=new Uint16Array(393210));c.radii&&(d.radiusArray=new Float32Array(65535));d.useOffset=c.offset;return d},d=function(b,c,d){$3Dmol.EventDispatcher.call(this);this.id=$3Dmol.GeometryIDCount++;this.name="";this.hasTangents=!1;this.dynamic=!0;this.mesh=!0===b?!0:!1;this.radii=c||!1;this.offset=d||!1;this.buffersNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1;this.geometryGroups=[];this.groups=0};d.prototype={constructor:d,updateGeoGroup:function(b){var d=\n0<this.groups?this.geometryGroups[this.groups-1]:null;if(!d||d.vertices+(b||0)>d.vertexArray.length/3)d=c(this);return d},addGeoGroup:function(){return c(this)},setUpNormals:function(b){b=b||!1;for(var c=0;c<this.groups;c++)this.geometryGroups[c].setNormals(b)},setColors:function(b){for(var c=this.geometryGroups.length,d=0;d<c;d++)this.geometryGroups[d].setColors(b)},setUpWireframe:function(){for(var b=0;b<this.groups;b++)this.geometryGroups[b].setLineIndices()},initTypedArrays:function(){for(var b=\n0;b<this.groups;b++){var c=this.geometryGroups[b];!0!==c.__inittedArrays&&c.truncateArrayBuffers(this.mesh,!1)}},dispose:function(){this.dispatchEvent({type:"dispose"})}};return d}();Object.defineProperty($3Dmol.Geometry.prototype,"vertices",{get:function(){for(var b=0,c=0;c<this.groups;c++)b+=this.geometryGroups[c].vertices;return b}});$3Dmol.GeometryIDCount=0;\n$3Dmol.Raycaster=function(){var b=function(b,c,n,d){this.ray=new $3Dmol.Ray(b,c);0<this.ray.direction.lengthSq()&&this.ray.direction.normalize();this.near=d||0;this.far=n||Infinity},c=new $3Dmol.Sphere,d=new $3Dmol.Cylinder,e=new $3Dmol.Triangle,f=new $3Dmol.Vector3,q=new $3Dmol.Vector3,l=new $3Dmol.Vector3,t=new $3Dmol.Vector3;new $3Dmol.Ray;new $3Dmol.Vector3;var p=new $3Dmol.Vector3;new $3Dmol.Matrix4;var w=function(b,c){return b.distance-c.distance};b.prototype.precision=1E-4;b.prototype.linePrecision=\n.2;b.prototype.set=function(b,c){this.ray.set(b,c)};b.prototype.setFromCamera=function(){var b=new $3Dmol.Matrix4;return function(c,n){n.ortho?(this.ray.origin.set(c.x,c.y,(n.near+n.far)/(n.near-n.far)).unproject(n),this.ray.direction.set(0,0,-1).transformDirection(n.matrixWorld)):(this.ray.origin.setFromMatrixPosition(n.matrixWorld),this.ray.direction.set(c.x,c.y,c.z),n.projectionMatrixInverse.getInverse(n.projectionMatrix),b.multiplyMatrices(n.matrixWorld,n.projectionMatrixInverse),this.ray.direction.applyProjection(b),\nthis.ray.direction.sub(this.ray.origin).normalize())}}();b.prototype.intersectObjects=function(b,h){for(var n=[],g=0,m=h.length;g<m;g++)a:{var x=b,u=h[g],M=n;p.getPositionFromMatrix(x.matrixWorld);if(void 0!==u.intersectionShape){var O=u.intersectionShape;var B=this.linePrecision;B*=x.matrixWorld.getMaxScaleOnAxis();var S=B*B;if(void 0!==u.boundingSphere&&u.boundingSphere instanceof $3Dmol.Sphere&&(c.copy(u.boundingSphere),c.applyMatrix4(x.matrixWorld),!this.ray.isIntersectionSphere(c)))break a;var H=\n0;for(B=O.triangle.length;H<B;H++)if(O.triangle[H]instanceof $3Dmol.Triangle){e.copy(O.triangle[H]);e.applyMatrix4(x.matrixWorld);var z=e.getNormal();var A=this.ray.direction.dot(z);if(!(0<=A)){f.subVectors(e.a,this.ray.origin);var D=z.dot(f)/A;if(!(0>D)){q.copy(this.ray.direction).multiplyScalar(D).add(this.ray.origin);q.sub(e.a);l.copy(e.b).sub(e.a);t.copy(e.c).sub(e.a);A=l.dot(t);var G=l.lengthSq();z=t.lengthSq();z=(G*q.dot(t)-A*q.dot(l))/(G*z-A*A);0>z||1<z||(A=(q.dot(l)-z*A)/G,0>A||1<A||1<A+z||\nM.push({clickable:u,distance:D}))}}}H=0;for(B=O.cylinder.length;H<B;H++)if(O.cylinder[H]instanceof $3Dmol.Cylinder){d.copy(O.cylinder[H]);d.applyMatrix4(x.matrixWorld);f.subVectors(d.c1,this.ray.origin);var L=f.dot(d.direction);G=f.dot(this.ray.direction);A=Math.min(Math.max(this.ray.direction.dot(d.direction),-1),1);z=1-A*A;if(0!==z){var K=(A*G-L)/z;var F=(G-A*L)/z;q.copy(d.direction).multiplyScalar(K).add(d.c1);l.copy(this.ray.direction).multiplyScalar(F).add(this.ray.origin);var Q=t.subVectors(q,\nl).lengthSq();K=d.radius*d.radius;Q<=K&&(K=(A*L-G)*(A*L-G)-z*(f.lengthSq()-L*L-K),z=0>=K?D=Math.sqrt(Q):D=(G-A*L-Math.sqrt(K))/z,A=A*z-L,0>A||A*A>d.lengthSq()||0>z||M.push({clickable:u,distance:D}))}}H=0;for(B=O.line.length;H<B;H+=2)q.copy(O.line[H]),q.applyMatrix4(x.matrixWorld),l.copy(O.line[H+1]),l.applyMatrix4(x.matrixWorld),t.subVectors(l,q),L=t.lengthSq(),t.normalize(),f.subVectors(q,this.ray.origin),Q=f.dot(t),G=f.dot(this.ray.direction),A=Math.min(Math.max(this.ray.direction.dot(t),-1),1),\nz=1-A*A,0!==z&&(K=(A*G-Q)/z,F=(G-A*Q)/z,q.add(t.multiplyScalar(K)),l.copy(this.ray.direction).multiplyScalar(F).add(this.ray.origin),Q=t.subVectors(l,q).lengthSq(),Q<S&&K*K<L&&M.push({clickable:u,distance:F}));H=0;for(B=O.sphere.length;H<B;H++)if(O.sphere[H]instanceof $3Dmol.Sphere&&(c.copy(O.sphere[H]),c.applyMatrix4(x.matrixWorld),this.ray.isIntersectionSphere(c))){q.subVectors(c.center,this.ray.origin);x=q.dot(this.ray.direction);K=x*x-(q.lengthSq()-c.radius*c.radius);if(0>x)break a;D=0>=K?x:x-\nMath.sqrt(K);M.push({clickable:u,distance:D});break a}}}n.sort(w);return n};return b}();$3Dmol.Projector=function(){new $3Dmol.Matrix4;var b=new $3Dmol.Matrix4;this.projectVector=function(c,d){d.matrixWorldInverse.getInverse(d.matrixWorld);b.multiplyMatrices(d.projectionMatrix,d.matrixWorldInverse);return c.applyProjection(b)};this.unprojectVector=function(c,d){d.projectionMatrixInverse.getInverse(d.projectionMatrix);b.multiplyMatrices(d.matrixWorld,d.projectionMatrixInverse);return c.applyProjection(b)}};\n$3Dmol.Camera=function(b,c,d,e,f){$3Dmol.Object3D.call(this);this.fov=void 0!==b?b:50;this.aspect=void 0!==c?c:1;this.near=void 0!==d?d:.1;this.far=void 0!==e?e:2E3;this.projectionMatrix=new $3Dmol.Matrix4;this.projectionMatrixInverse=new $3Dmol.Matrix4;this.matrixWorldInverse=new $3Dmol.Matrix4;this.right=this.position.z*Math.tan(Math.PI/180*b);this.left=-this.right;this.top=this.right/this.aspect;this.bottom=-this.top;this.ortho=!!f;this.updateProjectionMatrix()};$3Dmol.Camera.prototype=Object.create($3Dmol.Object3D.prototype);\n$3Dmol.Camera.prototype.lookAt=function(b){this.matrix.lookAt(this.position,b,this.up);this.rotationAutoUpdate&&(!1===this.useQuaternion?this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder):this.quaternion.copy(this.matrix.decompose()[1]))};\n$3Dmol.Camera.prototype.updateProjectionMatrix=function(){this.ortho?this.projectionMatrix.makeOrthographic(this.left,this.right,this.top,this.bottom,this.near,this.far):this.projectionMatrix.makePerspective(this.fov,this.aspect,this.near,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix)};\n$3Dmol.SpritePlugin=function(){function b(b,c){return b.z!==c.z?c.z-b.z:c.id-b.id}var c,d,e,f,q,l,t,p,w,g;this.init=function(b){c=b.context;d=b;e=b.getPrecision();f=new Float32Array(16);q=new Uint16Array(6);b=0;f[b++]=-1;f[b++]=-1;f[b++]=0;f[b++]=0;f[b++]=1;f[b++]=-1;f[b++]=1;f[b++]=0;f[b++]=1;f[b++]=1;f[b++]=1;f[b++]=1;f[b++]=-1;f[b++]=1;f[b++]=0;f[b++]=1;b=0;q[b++]=0;q[b++]=1;q[b++]=2;q[b++]=0;q[b++]=2;q[b++]=3;l=c.createBuffer();t=c.createBuffer();c.bindBuffer(c.ARRAY_BUFFER,l);c.bufferData(c.ARRAY_BUFFER,\nf,c.STATIC_DRAW);c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,t);c.bufferData(c.ELEMENT_ARRAY_BUFFER,q,c.STATIC_DRAW);b=$3Dmol.ShaderLib.sprite;var n=e,h=c.createProgram(),m=c.createShader(c.FRAGMENT_SHADER),x=c.createShader(c.VERTEX_SHADER);n="precision "+n+" float;\\n";c.shaderSource(m,n+b.fragmentShader);c.shaderSource(x,n+b.vertexShader);c.compileShader(m);c.compileShader(x);c.getShaderParameter(m,c.COMPILE_STATUS)&&c.getShaderParameter(x,c.COMPILE_STATUS)?(c.attachShader(h,m),c.attachShader(h,x),c.linkProgram(h),\nc.getProgramParameter(h,c.LINK_STATUS)||console.error("Could not initialize shader"),b=h):(console.error(c.getShaderInfoLog(m)),console.error("could not initialize shader"),b=null);p=b;w={};g={};w.position=c.getAttribLocation(p,"position");w.uv=c.getAttribLocation(p,"uv");g.uvOffset=c.getUniformLocation(p,"uvOffset");g.uvScale=c.getUniformLocation(p,"uvScale");g.rotation=c.getUniformLocation(p,"rotation");g.scale=c.getUniformLocation(p,"scale");g.alignment=c.getUniformLocation(p,"alignment");g.color=\nc.getUniformLocation(p,"color");g.map=c.getUniformLocation(p,"map");g.opacity=c.getUniformLocation(p,"opacity");g.useScreenCoordinates=c.getUniformLocation(p,"useScreenCoordinates");g.screenPosition=c.getUniformLocation(p,"screenPosition");g.modelViewMatrix=c.getUniformLocation(p,"modelViewMatrix");g.projectionMatrix=c.getUniformLocation(p,"projectionMatrix");g.fogType=c.getUniformLocation(p,"fogType");g.fogDensity=c.getUniformLocation(p,"fogDensity");g.fogNear=c.getUniformLocation(p,"fogNear");g.fogFar=\nc.getUniformLocation(p,"fogFar");g.fogColor=c.getUniformLocation(p,"fogColor");g.alphaTest=c.getUniformLocation(p,"alphaTest")};this.render=function(h,n,e,m){var x=h.__webglSprites,u=x.length;if(u){var y=w,f=g,B=.5*e,q=.5*m;c.useProgram(p);c.enableVertexAttribArray(y.position);c.enableVertexAttribArray(y.uv);c.disable(c.CULL_FACE);c.enable(c.BLEND);c.bindBuffer(c.ARRAY_BUFFER,l);c.vertexAttribPointer(y.position,2,c.FLOAT,!1,16,0);c.vertexAttribPointer(y.uv,2,c.FLOAT,!1,16,8);c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,\nt);c.uniformMatrix4fv(f.projectionMatrix,!1,n.projectionMatrix.elements);c.activeTexture(c.TEXTURE0);c.uniform1i(f.map,0);if(y=h.fog){c.uniform3f(f.fogColor,y.color.r,y.color.g,y.color.b);c.uniform1f(f.fogNear,y.near);c.uniform1f(f.fogFar,y.far);c.uniform1i(f.fogType,1);var H=y=1}else c.uniform1i(f.fogType,0),H=y=0;var z,A=[];for(z=0;z<u;z++){var D=x[z];var G=D.material;D.visible&&0!==G.opacity&&(G.useScreenCoordinates?D.z=-D.position.z:(D._modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,D.matrixWorld),\nD.z=-D._modelViewMatrix.elements[14]))}x.sort(b);for(z=0;z<u;z++)D=x[z],G=D.material,D.visible&&0!==G.opacity&&G.map&&G.map.image&&G.map.image.width&&(c.uniform1f(f.alphaTest,G.alphaTest),n=G.map.image.height,A[0]=G.map.image.width*d.devicePixelRatio/e,A[1]=n*d.devicePixelRatio/m,!0===G.useScreenCoordinates?(c.uniform1i(f.useScreenCoordinates,1),c.uniform3f(f.screenPosition,(D.position.x*d.devicePixelRatio-B)/B,(q-D.position.y*d.devicePixelRatio)/q,Math.max(0,Math.min(1,D.position.z)))):(c.uniform1i(f.useScreenCoordinates,\n0),c.uniformMatrix4fv(f.modelViewMatrix,!1,D._modelViewMatrix.elements)),n=h.fog&&G.fog?H:0,y!==n&&(c.uniform1i(f.fogType,n),y=n),n=1/(G.scaleByViewport?m:1),A[0]=A[0]*n*D.scale.x,A[1]=A[1]*n*D.scale.y,c.uniform2f(f.uvScale,G.uvScale.x,G.uvScale.y),c.uniform2f(f.uvOffset,G.uvOffset.x,G.uvOffset.y),c.uniform2f(f.alignment,G.alignment.x,G.alignment.y),c.uniform1f(f.opacity,G.opacity),c.uniform3f(f.color,G.color.r,G.color.g,G.color.b),c.uniform1f(f.rotation,D.rotation),c.uniform2fv(f.scale,A),d.setDepthTest(G.depthTest),\nd.setDepthWrite(G.depthWrite),d.setTexture(G.map,0),c.drawElements(c.TRIANGLES,6,c.UNSIGNED_SHORT,0));c.enable(c.CULL_FACE)}}};$3Dmol.Light=function(b,c){$3Dmol.Object3D.call(this);this.color=new $3Dmol.Color(b);this.position=new $3Dmol.Vector3(0,1,0);this.target=new $3Dmol.Object3D;this.intensity=void 0!==c?c:1;this.onlyShadow=this.castShadow=!1};$3Dmol.Light.prototype=Object.create($3Dmol.Object3D.prototype);\n$3Dmol.Material=function(){$3Dmol.EventDispatcher.call(this);this.id=$3Dmol.MaterialIdCount++;this.name="";this.side=$3Dmol.FrontSide;this.opacity=1;this.transparent=!1;this.stencilTest=this.depthWrite=this.depthTest=!0;this.polygonOffset=!1;this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.needsUpdate=this.visible=!0};\n$3Dmol.Material.prototype.setValues=function(b){if(void 0!==b)for(var c in b){var d=b[c];if(void 0===d)console.warn("$3Dmol.Material: \'"+c+"\' parameter is undefined.");else if(c in this){var e=this[c];e instanceof $3Dmol.Color&&d instanceof $3Dmol.Color?e.copy(d):e instanceof $3Dmol.Color?e.set(d):e instanceof $3Dmol.Vector3&&d instanceof $3Dmol.Vector3?e.copy(d):this[c]=d}}};\n$3Dmol.Material.prototype.clone=function(b){void 0===b&&(b=new $3Dmol.Material);b.name=this.name;b.side=this.side;b.opacity=this.opacity;b.transparent=this.transparent;b.depthTest=this.depthTest;b.depthWrite=this.depthWrite;b.stencilTest=this.stencilTest;b.polygonOffset=this.polygonOffset;b.polygonOffsetFactor=this.polygonOffsetFactor;b.polygonOffsetUnits=this.polygonOffsetUnits;b.alphaTest=this.alphaTest;b.overdraw=this.overdraw;b.visible=this.visible;return b};\n$3Dmol.Material.prototype.dispose=function(){this.dispatchEvent({type:"dispose"})};$3Dmol.MaterialIdCount=0;$3Dmol.LineBasicMaterial=function(b){$3Dmol.Material.call(this);this.color=new $3Dmol.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=!1;this.fog=!0;this.shaderID="basic";this.setValues(b)};$3Dmol.LineBasicMaterial.prototype=Object.create($3Dmol.Material.prototype);\n$3Dmol.LineBasicMaterial.prototype.clone=function(){var b=new $3Dmol.LineBasicMaterial;$3Dmol.Material.prototype.clone.call(this,b);b.color.copy(this.color);return b};\n$3Dmol.MeshLambertMaterial=function(b){$3Dmol.Material.call(this);this.color=new $3Dmol.Color(16777215);this.ambient=new $3Dmol.Color(1048575);this.emissive=new $3Dmol.Color(0);this.wrapAround=!1;this.wrapRGB=new $3Dmol.Vector3(1,1,1);this.envMap=this.specularMap=this.lightMap=this.map=null;this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.shading=$3Dmol.SmoothShading;this.shaderID="lambert";\nthis.vertexColors=$3Dmol.NoColors;this.skinning=!1;this.setValues(b)};$3Dmol.MeshLambertMaterial.prototype=Object.create($3Dmol.Material.prototype);\n$3Dmol.MeshLambertMaterial.prototype.clone=function(b){"undefined"===typeof b&&(b=new $3Dmol.MeshLambertMaterial);$3Dmol.Material.prototype.clone.call(this,b);b.color.copy(this.color);b.ambient.copy(this.ambient);b.emissive.copy(this.emissive);b.wrapAround=this.wrapAround;b.wrapRGB.copy(this.wrapRGB);b.map=this.map;b.lightMap=this.lightMap;b.specularMap=this.specularMap;b.envMap=this.envMap;b.combine=this.combine;b.reflectivity=this.reflectivity;b.refractionRatio=this.refractionRatio;b.fog=this.fog;\nb.shading=this.shading;b.shaderID=this.shaderID;b.vertexColors=this.vertexColors;b.skinning=this.skinning;b.morphTargets=this.morphTargets;b.morphNormals=this.morphNormals;return b};$3Dmol.MeshDoubleLambertMaterial=function(b){$3Dmol.MeshLambertMaterial.call(this,b);this.shaderID="lambertdouble";this.side=$3Dmol.DoubleSide};$3Dmol.MeshDoubleLambertMaterial.prototype=Object.create($3Dmol.MeshLambertMaterial.prototype);\n$3Dmol.MeshDoubleLambertMaterial.prototype.clone=function(){var b=new $3Dmol.MeshDoubleLambertMaterial;$3Dmol.MeshLambertMaterial.prototype.clone.call(this,b);return b};$3Dmol.MeshOutlineMaterial=function(b){$3Dmol.Material.call(this);b=b||{};this.fog=!0;this.shaderID="outline";this.wireframe=!1;this.outlineColor=b.color||new $3Dmol.Color(0,0,0);this.outlineWidth=b.width||.1;this.outlinePushback=b.pushback||1};$3Dmol.MeshOutlineMaterial.prototype=Object.create($3Dmol.Material.prototype);\n$3Dmol.MeshOutlineMaterial.prototype.clone=function(b){"undefined"===typeof b&&(b=new $3Dmol.MeshOutlineMaterial);$3Dmol.Material.prototype.clone.call(this,b);b.fog=this.fog;b.shaderID=this.shaderID;b.wireframe=this.wireframe;return b};\n$3Dmol.ImposterMaterial=function(b){$3Dmol.Material.call(this);this.color=new $3Dmol.Color(16777215);this.ambient=new $3Dmol.Color(1048575);this.emissive=new $3Dmol.Color(0);this.imposter=!0;this.wrapAround=!1;this.wrapRGB=new $3Dmol.Vector3(1,1,1);this.envMap=this.specularMap=this.lightMap=this.map=null;this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.shading=$3Dmol.SmoothShading;this.shaderID=\nnull;this.vertexColors=$3Dmol.NoColors;this.skinning=!1;this.setValues(b)};$3Dmol.ImposterMaterial.prototype=Object.create($3Dmol.Material.prototype);\n$3Dmol.ImposterMaterial.prototype.clone=function(){var b=new $3Dmol.ImposterMaterial;$3Dmol.Material.prototype.clone.call(this,b);b.color.copy(this.color);b.ambient.copy(this.ambient);b.emissive.copy(this.emissive);b.wrapAround=this.wrapAround;b.wrapRGB.copy(this.wrapRGB);b.map=this.map;b.lightMap=this.lightMap;b.specularMap=this.specularMap;b.envMap=this.envMap;b.combine=this.combine;b.reflectivity=this.reflectivity;b.refractionRatio=this.refractionRatio;b.fog=this.fog;b.shading=this.shading;b.shaderID=\nthis.shaderID;b.vertexColors=this.vertexColors;b.skinning=this.skinning;b.morphTargets=this.morphTargets;b.morphNormals=this.morphNormals;return b};$3Dmol.SphereImposterMaterial=function(b){$3Dmol.ImposterMaterial.call(this);this.shaderID="sphereimposter";this.setValues(b)};$3Dmol.SphereImposterMaterial.prototype=Object.create($3Dmol.ImposterMaterial.prototype);\n$3Dmol.SphereImposterMaterial.prototype.clone=function(){var b=new $3Dmol.SphereImposterMaterial;$3Dmol.ImposterMaterial.prototype.clone.call(this,b);return b};$3Dmol.SphereImposterOutlineMaterial=function(b){$3Dmol.ImposterMaterial.call(this);b=b||{};this.shaderID="sphereimposteroutline";this.outlineColor=b.color||new $3Dmol.Color(0,0,0);this.outlineWidth=b.width||.1;this.outlinePushback=b.pushback||1;this.setValues(b)};$3Dmol.SphereImposterOutlineMaterial.prototype=Object.create($3Dmol.ImposterMaterial.prototype);\n$3Dmol.SphereImposterOutlineMaterial.prototype.clone=function(){var b=new $3Dmol.SphereImposterOutlineMaterial;$3Dmol.ImposterMaterial.prototype.clone.call(this,b);b.outlineColor=this.outlineColor;b.outlineWidth=this.outlineWidth;b.outlinePushback=this.outlinePushback;return b};$3Dmol.StickImposterMaterial=function(b){$3Dmol.ImposterMaterial.call(this);this.shaderID="stickimposter";this.setValues(b)};$3Dmol.StickImposterMaterial.prototype=Object.create($3Dmol.ImposterMaterial.prototype);\n$3Dmol.StickImposterMaterial.prototype.clone=function(){var b=new $3Dmol.StickImposterMaterial;$3Dmol.ImposterMaterial.prototype.clone.call(this,b);return b};$3Dmol.StickImposterOutlineMaterial=function(b){$3Dmol.ImposterMaterial.call(this);b=b||{};this.shaderID="stickimposteroutline";this.outlineColor=b.color||new $3Dmol.Color(0,0,0);this.outlineWidth=b.width||.1;this.outlinePushback=b.pushback||1;this.setValues(b)};$3Dmol.StickImposterOutlineMaterial.prototype=Object.create($3Dmol.ImposterMaterial.prototype);\n$3Dmol.StickImposterOutlineMaterial.prototype.clone=function(){var b=new $3Dmol.StickImposterOutlineMaterial;$3Dmol.ImposterMaterial.prototype.clone.call(this,b);b.outlineColor=this.outlineColor;b.outlineWidth=this.outlineWidth;b.outlinePushback=this.outlinePushback;return b};\n$3Dmol.InstancedMaterial=function(b){$3Dmol.Material.call(this);this.color=new $3Dmol.Color(16777215);this.ambient=new $3Dmol.Color(1048575);this.emissive=new $3Dmol.Color(0);this.wrapAround=!1;this.wrapRGB=new $3Dmol.Vector3(1,1,1);this.envMap=this.specularMap=this.lightMap=this.map=null;this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.shading=$3Dmol.SmoothShading;this.shaderID="instanced";\nthis.vertexColors=$3Dmol.NoColors;this.skinning=!1;this.sphere=null;this.setValues(b)};$3Dmol.InstancedMaterial.prototype=Object.create($3Dmol.Material.prototype);\n$3Dmol.InstancedMaterial.prototype.clone=function(){var b=new $3Dmol.InstancedMaterial;$3Dmol.Material.prototype.clone.call(this,b);b.color.copy(this.color);b.ambient.copy(this.ambient);b.emissive.copy(this.emissive);b.wrapAround=this.wrapAround;b.wrapRGB.copy(this.wrapRGB);b.map=this.map;b.lightMap=this.lightMap;b.specularMap=this.specularMap;b.envMap=this.envMap;b.combine=this.combine;b.reflectivity=this.reflectivity;b.refractionRatio=this.refractionRatio;b.fog=this.fog;b.shading=this.shading;b.shaderID=\nthis.shaderID;b.vertexColors=this.vertexColors;b.skinning=this.skinning;b.morphTargets=this.morphTargets;b.morphNormals=this.morphNormals;b.sphere=this.sphere;return b};\n$3Dmol.SpriteMaterial=function(b){$3Dmol.Material.call(this);this.color=new $3Dmol.Color(16777215);this.map=new $3Dmol.Texture;this.useScreenCoordinates=!0;this.depthTest=!this.useScreenCoordinates;this.sizeAttenuation=!this.useScreenCoordinates;this.scaleByViewPort=!this.sizeAttenuation;this.alignment=$3Dmol.SpriteAlignment.center.clone();this.fog=!1;this.uvOffset=new $3Dmol.Vector2(0,0);this.uvScale=new $3Dmol.Vector2(1,1);this.setValues(b);b=b||{};void 0===b.depthTest&&(this.depthTest=!this.useScreenCoordinates);\nvoid 0===b.sizeAttenuation&&(this.sizeAttenuation=!this.useScreenCoordinates);void 0===b.scaleByViewPort&&(this.scaleByViewPort=!this.sizeAttenuation)};$3Dmol.SpriteMaterial.prototype=Object.create($3Dmol.Material.prototype);\n$3Dmol.SpriteMaterial.prototype.clone=function(){var b=new $3Dmol.SpriteMaterial;$3Dmol.Material.prototype.clone.call(this,b);b.color.copy(this.color);b.map=this.map;b.useScreenCoordinates=useScreenCoordinates;b.sizeAttenuation=this.sizeAttenuation;b.scaleByViewport=this.scaleByViewPort;b.alignment.copy(this.alignment);b.uvOffset.copy(this.uvOffset);return b};$3Dmol.SpriteAlignment={};$3Dmol.SpriteAlignment.topLeft=new $3Dmol.Vector2(1,-1);$3Dmol.SpriteAlignment.topCenter=new $3Dmol.Vector2(0,-1);\n$3Dmol.SpriteAlignment.topRight=new $3Dmol.Vector2(-1,-1);$3Dmol.SpriteAlignment.centerLeft=new $3Dmol.Vector2(1,0);$3Dmol.SpriteAlignment.center=new $3Dmol.Vector2(0,0);$3Dmol.SpriteAlignment.centerRight=new $3Dmol.Vector2(-1,0);$3Dmol.SpriteAlignment.bottomLeft=new $3Dmol.Vector2(1,1);$3Dmol.SpriteAlignment.bottomCenter=new $3Dmol.Vector2(0,1);$3Dmol.SpriteAlignment.bottomRight=new $3Dmol.Vector2(-1,1);\n$3Dmol.Texture=function(b){$3Dmol.EventDispatcher.call(this);this.id=$3Dmol.TextureIdCount++;this.name="";this.image=b;this.mipmaps=[];this.mapping=new $3Dmol.UVMapping;this.wrapT=this.wrapS=$3Dmol.ClampToEdgeWrapping;this.magFilter=$3Dmol.LinearFilter;this.minFilter=$3Dmol.LinearMipMapLinearFilter;this.anisotropy=1;this.format=$3Dmol.RGBAFormat;this.type=$3Dmol.UnsignedByteType;this.offset=new $3Dmol.Vector2(0,0);this.repeat=new $3Dmol.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;\nthis.flipY=!0;this.unpackAlignment=4;this.needsUpdate=!1;this.onUpdate=null};\n$3Dmol.Texture.prototype={constructor:$3Dmol.Texture,clone:function(b){void 0===b&&(b=new $3Dmol.Texture);b.image=this.image;b.mipmaps=this.mipmaps.slice(0);b.mapping=this.mapping;b.wrapS=this.wrapS;b.wrapT=this.wrapT;b.magFilter=this.magFilter;b.minFilter=this.minFilter;b.anisotropy=this.anisotropy;b.format=this.format;b.type=this.type;b.offset.copy(this.offset);b.repeat.copy(this.repeat);b.generateMipmaps=this.generateMipmaps;b.premultiplyAlpha=this.premultiplyAlpha;b.flipY=this.flipY;b.unpackAlignment=\nthis.unpackAlignment;return b},dispose:function(){this.dispatchEvent({type:"dispose"})}};$3Dmol.TextureIdCount=0;$3Dmol.FrontSide=0;$3Dmol.BackSide=1;$3Dmol.DoubleSide=2;$3Dmol.NoShading=0;$3Dmol.FlatShading=1;$3Dmol.SmoothShading=2;$3Dmol.NoColors=0;$3Dmol.FaceColors=1;$3Dmol.VertexColors=2;$3Dmol.MultiplyOperation=0;$3Dmol.MixOperation=1;$3Dmol.AddOperation=2;$3Dmol.UVMapping=function(){};$3Dmol.ClampToEdgeWrapping=1001;$3Dmol.LinearFilter=1006;$3Dmol.LinearMipMapLinearFilter=1008;\n$3Dmol.UnsignedByteType=1009;$3Dmol.RGBAFormat=1021;$3Dmol.Line=function(b,c,d){$3Dmol.Object3D.call(this);this.geometry=b;this.material=void 0!==c?c:new $3Dmol.LineBasicMaterial({color:16777215*Math.random()});this.type=void 0!==d?d:$3Dmol.LineStrip};$3Dmol.LineStrip=0;$3Dmol.LinePieces=1;$3Dmol.Line.prototype=Object.create($3Dmol.Object3D.prototype);\n$3Dmol.Line.prototype.clone=function(b){void 0===b&&(b=new $3Dmol.Line(this.geometry,this.material,this.type));$3Dmol.Object3D.prototype.clone.call(this,b);return b};$3Dmol.Mesh=function(b,c){$3Dmol.Object3D.call(this);this.geometry=b;this.material=void 0!==c?c:new $3Dmol.MeshBasicMaterial({color:16777215*Math.random(),wireframe:!0})};$3Dmol.Mesh.prototype=Object.create($3Dmol.Object3D.prototype);\n$3Dmol.Mesh.prototype.clone=function(b){void 0===b&&(b=new $3Dmol.Mesh(this.geometry,this.material));$3Dmol.Object3D.prototype.clone.call(this,b);return b};$3Dmol.Sprite=function(b){$3Dmol.Object3D.call(this);this.material=void 0!==b?b:new $3Dmol.SpriteMaterial;this.rotation3d=this.rotation;this.rotation=0};$3Dmol.Sprite.prototype=Object.create($3Dmol.Object3D.prototype);\n$3Dmol.Sprite.prototype.updateMatrix=function(){this.matrix.setPosition(this.position);this.rotation3d.set(0,0,this.rotation);this.matrix.setRotationFromEuler(this.rotation3d);1===this.scale.x&&1===this.scale.y||this.matrix.scale(this.scale);this.matrixWorldNeedsUpdate=!0};$3Dmol.Sprite.prototype.clone=function(b){void 0===b&&(b=new $3Dmol.Sprite(this.material));$3Dmol.Object3D.prototype.clone.call(this,b);return b};\n$3Dmol.Renderer=function(b){function c(b){V[b]||(C.enableVertexAttribArray(b),V[b]=!0)}function d(b,c){var n;"fragment"===b?n=C.createShader(C.FRAGMENT_SHADER):"vertex"===b&&(n=C.createShader(C.VERTEX_SHADER));C.shaderSource(n,c);C.compileShader(n);return C.getShaderParameter(n,C.COMPILE_STATUS)?n:(console.error(C.getShaderInfoLog(n)),console.error("could not initialize shader"),null)}function e(b,c,n,h,d,m,g,e){if(c){var E=b.length-1;e=c=-1}else E=0,c=b.length,e=1;for(var l=E;l!==c;l+=e){var y=b[l];\nif(y.render){E=y.object;var f=y.buffer;if(y=y[n]){g&&B.setBlending(!0);B.setDepthTest(y.depthTest);B.setDepthWrite(y.depthWrite);var J=y.polygonOffset;null!==J&&(J?C.enable(C.POLYGON_OFFSET_FILL):C.disable(C.POLYGON_OFFSET_FILL));J=E._modelViewMatrix.isReflected();B.setMaterialFaces(y,J);B.renderBuffer(h,d,m,y,f,E);if(O||y.outline)"sphereimposter"==y.shaderID?B.renderBuffer(h,d,m,u,f,E):"stickimposter"==y.shaderID?B.renderBuffer(h,d,m,M,f,E):y.wireframe||"basic"===y.shaderID||0===y.opacity||B.renderBuffer(h,\nd,m,x,f,E)}}}}function f(b){return 0===(b&b-1)}function q(b){return b===$3Dmol.UnsignedByteType?C.UNSIGNED_BYTE:b===$3Dmol.RGBAFormat?C.RGBA:0}b=b||{};this.row=b.row;this.col=b.col;this.rows=b.rows;this.cols=b.cols;var l=void 0!==b.canvas?b.canvas:document.createElement("canvas"),t=void 0!==b.precision?b.precision:"highp",p=void 0!==b.alpha?b.alpha:!0,w=void 0!==b.premultipliedAlpha?b.premultipliedAlpha:!0,g=void 0!==b.antialias?b.antialias:!1,h=void 0!==b.stencil?b.stencil:!0,n=void 0!==b.preserveDrawingBuffer?\nb.preserveDrawingBuffer:!1,y=void 0!==b.clearColor?new $3Dmol.Color(b.clearColor):new $3Dmol.Color(0),m=void 0!==b.clearAlpha?b.clearAlpha:0,x=new $3Dmol.MeshOutlineMaterial(b.outline),u=new $3Dmol.SphereImposterOutlineMaterial(b.outline),M=new $3Dmol.StickImposterOutlineMaterial(b.outline),O=!!b.outline;this.domElement=l;this.context=null;this.devicePixelRatio=void 0!==b.devicePixelRatio?b.devicePixelRatio:void 0!==self.devicePixelRatio?self.devicePixelRatio:1;l.id=b.id;this.autoUpdateScene=this.autoUpdateObjects=\nthis.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.renderPluginsPost=[];this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var B=this,S=[],H=0,z=null,A=-1,D=null,G=null,L=0,K=-1,F=-1,Q=-1,I=-1,N=null,E=0,J=0,R=0,W=0,V={},U=new $3Dmol.Matrix4,ca=new $3Dmol.Vector3,T=new $3Dmol.Vector3,P=!0,Y=[],aa=[],C;try{if(!(C=l.getContext("experimental-webgl",{alpha:p,premultipliedAlpha:w,antialias:g,stencil:h,\npreserveDrawingBuffer:n}))&&!(C=l.getContext("webgl",{alpha:p,premultipliedAlpha:w,antialias:g,stencil:h,preserveDrawingBuffer:n})))throw"Error creating WebGL context.";}catch(ja){console.error(ja)}C.clearColor(0,0,0,1);C.clearDepth(1);C.clearStencil(0);C.enable(C.DEPTH_TEST);C.depthFunc(C.LEQUAL);C.frontFace(C.CCW);C.cullFace(C.BACK);C.enable(C.CULL_FACE);C.enable(C.BLEND);C.blendEquation(C.FUNC_ADD);C.blendFunc(C.SRC_ALPHA,C.ONE_MINUS_SRC_ALPHA);C.clearColor(y.r,y.g,y.b,m);this.context=C;var Z=\nC.getExtension("ANGLE_instanced_arrays"),X=C.getExtension("EXT_frag_depth");this.supportedExtensions=function(){return{supportsAIA:!!Z,supportsImposters:!!X}};this.getContext=function(){return C};this.getPrecision=function(){return t};this.setClearColorHex=function(b,c){y.setHex(b);m=c;C.clearColor(y.r,y.g,y.b,m)};this.enableOutline=function(b){x=new $3Dmol.MeshOutlineMaterial(b);u=new $3Dmol.SphereImposterOutlineMaterial(b);M=new $3Dmol.StickImposterOutlineMaterial(b);O=!0};this.disableOutline=function(){O=\n!1};this.setViewport=function(){if(void 0!=this.rows&&void 0!=this.cols&&void 0!=this.row&&void 0!=this.col){var b=l.width/this.cols,c=l.height/this.rows;E=b*this.devicePixelRatio;J=c*this.devicePixelRatio;C.drawingBufferWidth=3*E;C.drawingBufferHeight=J;C.enable(C.SCISSOR_TEST);C.scissor(b*this.col,c*this.row,b,c);C.viewport(b*this.col,c*this.row,b,c)}};this.setSize=function(b,c){if(void 0!=this.rows&&void 0!=this.cols&&void 0!=this.row&&void 0!=this.col){var n=b/this.cols,h=c/this.rows;l.width=\nb*this.devicePixelRatio;l.height=c*this.devicePixelRatio;E=n*this.devicePixelRatio;J=h*this.devicePixelRatio;l.style.width=b+"px";l.style.height=c+"px";this.setViewport()}else E=l.width=b*this.devicePixelRatio,J=l.height=c*this.devicePixelRatio,l.style.width=b+"px",l.style.height=c+"px",C.viewport(0,0,C.drawingBufferWidth,C.drawingBufferHeight)};this.clear=function(b,c,n){var h=0;if(void 0===b||b)h|=C.COLOR_BUFFER_BIT;if(void 0===c||c)h|=C.DEPTH_BUFFER_BIT;if(void 0===n||n)h|=C.STENCIL_BUFFER_BIT;\nC.clear(h)};this.clearTarget=function(b,c,n){this.clear(b,c,n)};this.setMaterialFaces=function(b,c){var n=b.side===$3Dmol.DoubleSide;b=b.side===$3Dmol.BackSide;b=c?!b:b;K!==n&&(n?C.disable(C.CULL_FACE):C.enable(C.CULL_FACE),K=n);F!==b&&(b?C.frontFace(C.CW):C.frontFace(C.CCW),F=b)};this.setDepthTest=function(b){Q!==b&&(b?C.enable(C.DEPTH_TEST):C.disable(C.DEPTH_TEST),Q=b)};this.setDepthWrite=function(b){I!==b&&(C.depthMask(b),I=b)};this.setBlending=function(b){b?(C.enable(C.BLEND),C.blendEquationSeparate(C.FUNC_ADD,\nC.FUNC_ADD),C.blendFuncSeparate(C.SRC_ALPHA,C.ONE_MINUS_SRC_ALPHA,C.ONE,C.ONE_MINUS_SRC_ALPHA)):C.disable(C.BLEND)};this.addPostPlugin=function(b){b.init(this);this.renderPluginsPost.push(b)};var da=function(b){b=b.target;b.removeEventListener("dispose",da);b.__webglInit=void 0;void 0!==b.__webglVertexBuffer&&C.deleteBuffer(b.__webglVertexBuffer);void 0!==b.__webglColorBuffer&&C.deleteBuffer(b.__webglColorBuffer);if(void 0!==b.geometryGroups)for(var c=0,n=b.groups;c<n;c++){var h=b.geometryGroups[c];\nvoid 0!==h.__webglVertexBuffer&&C.deleteBuffer(h.__webglVertexBuffer);void 0!==h.__webglColorBuffer&&C.deleteBuffer(h.__webglColorBuffer);void 0!==h.__webglNormalBuffer&&C.deleteBuffer(h.__webglNormalBuffer);void 0!==h.__webglFaceBuffer&&C.deleteBuffer(h.__webglFaceBuffer);void 0!==h.__webglLineBuffer&&C.deleteBuffer(h.__webglLineBuffer)}B.info.memory.geometries--},ma=function(b){b=b.target;b.removeEventListener("dispose",ma);b.image&&b.image.__webglTextureCube?C.deleteTexture(b.image.__webglTextureCube):\nb.__webglInit&&(b.__webglInit=!1,C.deleteTexture(b.__webglTexture));B.info.memory.textures--},ra=function(b){b=b.target;b.removeEventListener("dispose",ra);ha(b)},ha=function(b){var c=b.program;if(void 0!==c){b.program=void 0;var n,h=!1;b=0;for(n=S.length;b<n;b++){var d=S[b];if(d.program===c){d.usedTimes--;0===d.usedTimes&&(h=!0);break}}if(!0===h){h=[];b=0;for(n=S.length;b<n;b++)d=S[b],d.program!==c&&h.push(d);S=h;C.deleteProgram(c);B.info.memory.programs--}}};this.initMaterial=function(b,c,n,h){b.addEventListener("dispose",\nra);if(c=b.shaderID)c=$3Dmol.ShaderLib[c],b.vertexShader=c.vertexShader,b.fragmentShader=c.fragmentShader,b.uniforms=$3Dmol.ShaderUtils.clone(c.uniforms);a:{var m=b.fragmentShader;h=b.vertexShader;n=b.uniforms;var g={wireframe:b.wireframe,fragdepth:b.imposter},u;c=[];c.push(m);c.push(h);for(e in g)c.push(e),c.push(g[e]);c=c.join();var e=0;for(u=S.length;e<u;e++){var x=S[e];if(x.code===c){x.usedTimes++;var E=x.program;break a}}e=C.createProgram();x="precision "+t+" float;";u=""+x;g=[g.fragdepth?"#extension GL_EXT_frag_depth: enable":\n"",g.wireframe?"#define WIREFRAME 1":"",x].join("\\n");m=d("fragment",g+m);h=d("vertex",u+h);C.attachShader(e,h);C.attachShader(e,m);C.linkProgram(e);C.getProgramParameter(e,C.LINK_STATUS)||console.error("Could not initialize shader");e.uniforms={};e.attributes={};h=["viewMatrix","modelViewMatrix","projectionMatrix","normalMatrix"];for(E in n)h.push(E);for(E=0;E<h.length;E++)n=h[E],e.uniforms[n]=C.getUniformLocation(e,n);h="position normal color lineDistance offset radius".split(" ");for(E=0;E<h.length;E++)n=\nh[E],e.attributes[n]=C.getAttribLocation(e,n);e.id=H++;S.push({program:e,code:c,usedTimes:1});B.info.memory.programs=S.length;E=e}b.program=E};this.renderBuffer=function(b,n,h,d,m,g){if(d.visible){d.needsUpdate&&(d.program&&ha(d),B.initMaterial(d,n,h,g),d.needsUpdate=!1);var e=!1,u=d.program,E=u.uniforms;var x=d.uniforms;u!=z&&(C.useProgram(u),z=u,e=!0);d.id!=A&&(A=d.id,e=!0);b!=G&&(G=b,e=!0);C.uniformMatrix4fv(E.projectionMatrix,!1,b.projectionMatrix.elements);C.uniformMatrix4fv(E.modelViewMatrix,\n!1,g._modelViewMatrix.elements);C.uniformMatrix3fv(E.normalMatrix,!1,g._normalMatrix.elements);if(e){x.fogColor.value=h.color;x.fogNear.value=h.near;x.fogFar.value=h.far;if(d.shaderID.startsWith("lambert")||"instanced"===d.shaderID||d.shaderID.endsWith("imposter")){C.uniformMatrix4fv(E.viewMatrix,!1,b.matrixWorldInverse.elements);if(P){var y=0,l=0,f=0;b=0;for(h=n.length;b<h;b++){e=n[b];var J=e.color;var p=e.intensity;e instanceof $3Dmol.Light&&(y++,T.getPositionFromMatrix(e.matrixWorld),ca.getPositionFromMatrix(e.target.matrixWorld),\nT.sub(ca),T.normalize(),0!==T.x||0!==T.y||0!==T.z)&&(aa[f]=T.x,aa[f+1]=T.y,aa[f+2]=T.z,Y[f]=J.r*p,Y[f+1]=J.g*p,Y[f+2]=J.b*p,f+=3,l++)}P=!1}x.directionalLightColor.value=Y;x.directionalLightDirection.value=aa}else d.shaderID.endsWith("outline")?(x.outlineColor.value=d.outlineColor,x.outlineWidth.value=d.outlineWidth,x.outlinePushback.value=d.outlinePushback):"sphereimposter"===d.shaderID&&(C.uniformMatrix4fv(E.viewMatrix,!1,b.matrixWorldInverse.elements),C.uniformMatrix3fv(E.normalMatrix,!1,g._normalMatrix.elements),\nx.directionalLightColor.value=Y,x.directionalLightDirection.value=aa);x.opacity.value=d.opacity;for(var M in x)E[M]&&(n=x[M].type,b=x[M].value,h=E[M],"f"===n?C.uniform1f(h,b):"fv"===n?C.uniform3fv(h,b):"c"===n?C.uniform3f(h,b.r,b.g,b.b):"f4"===n&&C.uniform4f(h,b[0],b[1],b[2],b[3]))}x=u.attributes;E=!1;u=16777215*m.id+2*u.id+(d.wireframe?1:0);u!==D&&(D=u,E=!0);if(E){for(var q in V)V[q]&&(C.disableVertexAttribArray(q),V[q]=!1);0<=x.position&&(C.bindBuffer(C.ARRAY_BUFFER,m.__webglVertexBuffer),c(x.position),\nC.vertexAttribPointer(x.position,3,C.FLOAT,!1,0,0));0<=x.color&&(C.bindBuffer(C.ARRAY_BUFFER,m.__webglColorBuffer),c(x.color),C.vertexAttribPointer(x.color,3,C.FLOAT,!1,0,0));0<=x.normal&&(C.bindBuffer(C.ARRAY_BUFFER,m.__webglNormalBuffer),c(x.normal),C.vertexAttribPointer(x.normal,3,C.FLOAT,!1,0,0));0<=x.offset&&(C.bindBuffer(C.ARRAY_BUFFER,m.__webglOffsetBuffer),c(x.offset),C.vertexAttribPointer(x.offset,3,C.FLOAT,!1,0,0));0<=x.radius&&(C.bindBuffer(C.ARRAY_BUFFER,m.__webglRadiusBuffer),c(x.radius),\nC.vertexAttribPointer(x.radius,1,C.FLOAT,!1,0,0))}if(g instanceof $3Dmol.Mesh){if("instanced"===d.shaderID){var S=d.sphere.geometryGroups[0];E&&(C.bindBuffer(C.ARRAY_BUFFER,m.__webglVertexBuffer),C.bufferData(C.ARRAY_BUFFER,S.vertexArray,C.STATIC_DRAW),C.bindBuffer(C.ARRAY_BUFFER,m.__webglNormalBuffer),C.bufferData(C.ARRAY_BUFFER,S.normalArray,C.STATIC_DRAW),C.bindBuffer(C.ELEMENT_ARRAY_BUFFER,m.__webglFaceBuffer),C.bufferData(C.ELEMENT_ARRAY_BUFFER,S.faceArray,C.STATIC_DRAW));S=S.faceidx;Z.vertexAttribDivisorANGLE(x.offset,\n1);Z.vertexAttribDivisorANGLE(x.radius,1);Z.vertexAttribDivisorANGLE(x.color,1);Z.drawElementsInstancedANGLE(C.TRIANGLES,S,C.UNSIGNED_SHORT,0,m.radiusArray.length);Z.vertexAttribDivisorANGLE(x.offset,0);Z.vertexAttribDivisorANGLE(x.radius,0);Z.vertexAttribDivisorANGLE(x.color,0)}else d.wireframe?(g=m.lineidx,d=d.wireframeLinewidth,d!==N&&(C.lineWidth(d),N=d),E&&C.bindBuffer(C.ELEMENT_ARRAY_BUFFER,m.__webglLineBuffer),C.drawElements(C.LINES,g,C.UNSIGNED_SHORT,0)):(S=m.faceidx,E&&C.bindBuffer(C.ELEMENT_ARRAY_BUFFER,\nm.__webglFaceBuffer),C.drawElements(C.TRIANGLES,S,C.UNSIGNED_SHORT,0));B.info.render.calls++;B.info.render.vertices+=S;B.info.render.faces+=S/3}else g instanceof $3Dmol.Line&&(g=m.vertices,m=d.linewidth,m!==N&&(C.lineWidth(m),N=m),C.drawArrays(C.LINES,0,g),B.info.render.calls++)}};this.render=function(b,c,n){if(!1===c instanceof $3Dmol.Camera)console.error("$3Dmol.Renderer.render: camera is not an instance of $3Dmol.Camera.");else{var h,d=b.__lights,g=b.fog;A=-1;P=!0;this.autoUpdateScene&&b.updateMatrixWorld();\nvoid 0===c.parent&&c.updateMatrixWorld();c.matrixWorldInverse.getInverse(c.matrixWorld);U.multiplyMatrices(c.projectionMatrix,c.matrixWorldInverse);this.autoUpdateObjects&&this.initWebGLObjects(b);B.info.render.calls=0;B.info.render.vertices=0;B.info.render.faces=0;B.info.render.points=0;R=E;W=J;this.setViewport();if(this.autoClear||n)C.clearColor(y.r,y.g,y.b,m),this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);var x=b.__webglObjects;n=0;for(h=x.length;n<h;n++){var u=x[n];\nvar l=u.object;u.render=!1;if(l.visible){l._modelViewMatrix.multiplyMatrices(c.matrixWorldInverse,l.matrixWorld);l._normalMatrix.getInverse(l._modelViewMatrix);l._normalMatrix.transpose();l=u;var f=l.object.material;f.transparent?(l.opaque=null,l.transparent=f,f.wireframe||(f=f.clone(),f.opacity=0,l.blank=f)):(l.opaque=f,l.transparent=null);u.render=!0}}this.setBlending(!1);e(b.__webglObjects,!0,"opaque",c,d,g,!1,null);e(b.__webglObjects,!0,"blank",c,d,g,!0,null);e(b.__webglObjects,!1,"transparent",\nc,d,g,!0,null);d=this.renderPluginsPost;D=-1;G=z=null;F=A=K=Q=I=-1;if(d.length)for(g=0,n=d.length;g<n;g++)P=!0,d[g].render(b,c,R,W),D=-1,G=z=null,F=A=K=Q=I=-1;this.setDepthTest(!0);this.setDepthWrite(!0)}};this.initWebGLObjects=function(b){b.__webglObjects||(b.__webglObjects=[],b.__webglObjectsImmediate=[],b.__webglSprites=[],b.__webglFlares=[]);if(b.__objectsAdded.length){for(;b.__objectsAdded.length;){var c,n=b.__objectsAdded[0],h=b;if(!n.__webglInit&&(n.__webglInit=!0,n._modelViewMatrix=new $3Dmol.Matrix4,\nn._normalMatrix=new $3Dmol.Matrix3,void 0!==n.geometry&&void 0===n.geometry.__webglInit&&(n.geometry.__webglInit=!0,n.geometry.addEventListener("dispose",da)),n instanceof $3Dmol.Mesh||n instanceof $3Dmol.Line)){var d=n.geometry;var m=0;for(c=d.geometryGroups.length;m<c;m++){var g=d.geometryGroups[m];g.id=L++;g.__webglVertexBuffer||(n instanceof $3Dmol.Mesh?(g.radiusArray&&(g.__webglRadiusBuffer=C.createBuffer()),g.useOffset&&(g.__webglOffsetBuffer=C.createBuffer()),g.__webglVertexBuffer=C.createBuffer(),\ng.__webglNormalBuffer=C.createBuffer(),g.__webglColorBuffer=C.createBuffer(),g.__webglFaceBuffer=C.createBuffer(),g.__webglLineBuffer=C.createBuffer(),B.info.memory.geometries++,d.elementsNeedUpdate=!0,d.normalsNeedUpdate=!0):n instanceof $3Dmol.Line&&(g.__webglVertexBuffer=C.createBuffer(),g.__webglColorBuffer=C.createBuffer(),B.info.memory.geometries++),d.verticesNeedUpdate=!0,d.colorsNeedUpdate=!0)}}if(!n.__webglActive){if(n instanceof $3Dmol.Mesh||n instanceof $3Dmol.Line)for(d=n.geometry,m=0,\nc=d.geometryGroups.length;m<c;m++)g=d.geometryGroups[m],h.__webglObjects.push({buffer:g,object:n,opaque:null,transparent:null});else n instanceof $3Dmol.Sprite&&h.__webglSprites.push(n);n.__webglActive=!0}b.__objectsAdded.splice(0,1)}D=-1}for(;b.__objectsRemoved.length;){d=b.__objectsRemoved[0];c=b;if(d instanceof $3Dmol.Mesh||d instanceof $3Dmol.Line)for(c=c.__webglObjects,m=d,n=c.length-1;0<=n;--n)c[n].object===m&&c.splice(n,1);else if(d instanceof $3Dmol.Sprite)for(c=c.__webglSprites,m=d,n=c.length-\n1;0<=n;--n)c[n]===m&&c.splice(n,1);d.__webglActive=!1;b.__objectsRemoved.splice(0,1)}d=0;for(c=b.__webglObjects.length;d<c;d++)if(n=b.__webglObjects[d].object,m=n.geometry,n instanceof $3Dmol.Mesh||n instanceof $3Dmol.Line){n=0;for(h=m.geometryGroups.length;n<h;n++)if(g=m.geometryGroups[n],m.verticesNeedUpdate||m.elementsNeedUpdate||m.colorsNeedUpdate||m.normalsNeedUpdate){var x=C.STATIC_DRAW,e=g.vertexArray,u=g.colorArray;void 0!==g.__webglOffsetBuffer?C.bindBuffer(C.ARRAY_BUFFER,g.__webglOffsetBuffer):\nC.bindBuffer(C.ARRAY_BUFFER,g.__webglVertexBuffer);C.bufferData(C.ARRAY_BUFFER,e,x);C.bindBuffer(C.ARRAY_BUFFER,g.__webglColorBuffer);C.bufferData(C.ARRAY_BUFFER,u,x);g.normalArray&&void 0!==g.__webglNormalBuffer&&(e=g.normalArray,C.bindBuffer(C.ARRAY_BUFFER,g.__webglNormalBuffer),C.bufferData(C.ARRAY_BUFFER,e,x));g.radiusArray&&void 0!==g.__webglRadiusBuffer&&(C.bindBuffer(C.ARRAY_BUFFER,g.__webglRadiusBuffer),C.bufferData(C.ARRAY_BUFFER,g.radiusArray,x));g.faceArray&&void 0!==g.__webglFaceBuffer&&\n(e=g.faceArray,C.bindBuffer(C.ELEMENT_ARRAY_BUFFER,g.__webglFaceBuffer),C.bufferData(C.ELEMENT_ARRAY_BUFFER,e,x));g.lineArray&&void 0!==g.__webglLineBuffer&&(e=g.lineArray,C.bindBuffer(C.ELEMENT_ARRAY_BUFFER,g.__webglLineBuffer),C.bufferData(C.ELEMENT_ARRAY_BUFFER,e,x))}m.verticesNeedUpdate=!1;m.elementsNeedUpdate=!1;m.normalsNeedUpdate=!1;m.colorsNeedUpdate=!1;m.buffersNeedUpdate=!1}};this.getXYRatio=function(){return void 0!=this.rows&&void 0!=this.cols&&void 0!=this.row&&void 0!=this.col?[this.cols,\nthis.rows]:[1,1]};this.getAspect=function(b,c){if(void 0==b||void 0==c)b=l.width,c=l.height;var n=b/c;void 0!=this.rows&&void 0!=this.cols&&void 0!=this.row&&void 0!=this.col&&(n=b/this.cols/(c/this.rows));return n};this.setTexture=function(b,c){if(b.needsUpdate){b.__webglInit||(b.__webglInit=!0,b.addEventListener("dispose",ma),b.__webglTexture=C.createTexture(),B.info.memory.textures++);C.activeTexture(C.TEXTURE0+c);C.bindTexture(C.TEXTURE_2D,b.__webglTexture);C.pixelStorei(C.UNPACK_FLIP_Y_WEBGL,\nb.flipY);C.pixelStorei(C.UNPACK_PREMULTIPLY_ALPHA_WEBGL,b.premultiplyAlpha);C.pixelStorei(C.UNPACK_ALIGNMENT,b.unpackAlignment);c=b.image;c=f(c.width)&&f(c.height);var n=q(b.format),h=q(b.type),d=C.TEXTURE_2D;c?(C.texParameteri(d,C.TEXTURE_WRAP_S,q(b.wrapS)),C.texParameteri(d,C.TEXTURE_WRAP_T,q(b.wrapT)),C.texParameteri(d,C.TEXTURE_MAG_FILTER,q(b.magFilter)),C.texParameteri(d,C.TEXTURE_MIN_FILTER,q(b.minFilter))):(C.texParameteri(d,C.TEXTURE_WRAP_S,C.CLAMP_TO_EDGE),C.texParameteri(d,C.TEXTURE_WRAP_T,\nC.CLAMP_TO_EDGE),C.texParameteri(d,C.TEXTURE_MAG_FILTER,C.LINEAR),C.texParameteri(d,C.TEXTURE_MIN_FILTER,C.LINEAR));var m=b.mipmaps;if(0<m.length&&c){for(var g=0,x=m.length;g<x;g++)d=m[g],C.texImage2D(C.TEXTURE_2D,g,n,n,h,d);b.generateMipmaps=!1}else C.texImage2D(C.TEXTURE_2D,0,n,n,h,b.image);b.generateMipmaps&&c&&C.generateMipmap(C.TEXTURE_2D);b.needsUpdate=!1;if(b.onUpdate)b.onUpdate()}else C.activeTexture(C.TEXTURE0+c),C.bindTexture(C.TEXTURE_2D,b.__webglTexture)};this.addPostPlugin(new $3Dmol.SpritePlugin)};\n$3Dmol.Scene=function(){$3Dmol.Object3D.call(this);this.overrideMaterial=this.fog=null;this.matrixAutoUpdate=!1;this.__objects=[];this.__lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};$3Dmol.Scene.prototype=Object.create($3Dmol.Object3D.prototype);\n$3Dmol.Scene.prototype.__addObject=function(b){b instanceof $3Dmol.Light?(-1===this.__lights.indexOf(b)&&this.__lights.push(b),b.target&&void 0===b.target.parent&&this.add(b.target)):-1===this.__objects.indexOf(b)&&(this.__objects.push(b),this.__objectsAdded.push(b),-1!==this.__objectsRemoved.indexOf(b)&&this.__objectsRemoved.splice(c,1));for(var c=0;c<b.children.length;c++)this.__addObject(b.children[c])};\n$3Dmol.Scene.prototype.__removeObject=function(b){if(b instanceof $3Dmol.Light){var c=this.__lights.indexOf(b);-1!==c&&this.__lights.splice(c,1)}else c=this.__objects.indexOf(b),-1!==c&&(this.__objects.splice(c,1),this.__objectsRemoved.push(b),-1!==this.__objectsAdded.indexOf(b)&&this.__objectsAdded.splice(c,1));for(c=0;c<b.children.length;c++)this.__removeObject(b.children[c])};$3Dmol.Fog=function(b,c,d){this.name="";this.color=new $3Dmol.Color(b);this.near=void 0!==c?c:1;this.far=void 0!==d?d:1E3};\n$3Dmol.Fog.prototype.clone=function(){return new $3Dmol.Fog(this.color.getHex(),this.near,this.far)};$3Dmol.ShaderUtils={clone:function(b){var c,d={};for(c in b){d[c]={};d[c].type=b[c].type;var e=b[c].value;e instanceof $3Dmol.Color?d[c].value=e.clone():"number"===typeof e?d[c].value=e:e instanceof Array?d[c].value=[]:console.error("Error copying shader uniforms from ShaderLib: unknown type for uniform")}return d},stickimposterFragmentShader:"uniform float opacity;\\nuniform mat4 projectionMatrix;\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nvarying vec3 vLight;\\nvarying vec3 vColor;\\nvarying vec3 cposition;\\nvarying vec3 p1;\\nvarying vec3 p2;\\nvarying float r;\\nvoid main() {\\n    vec3 color = abs(vColor);\\n    vec3 pos = cposition;\\n    vec3 p = pos;\\n    vec3 v = normalize(pos);\\n    vec3 pa = p1;\\n    vec3 va = normalize(p2-p1);\\n    vec3 tmp1 = v-(dot(v,va)*va);\\n    vec3 deltap = p-pa;\\n    float A = dot(tmp1,tmp1);\\n    if(A == 0.0) discard;\\n    vec3 tmp2 = deltap-(dot(deltap,va)*va);\\n    float B = 2.0*dot(tmp1, tmp2);\\n    float C = dot(tmp2,tmp2)-r*r;\\n    float det = (B*B) - (4.0*A*C);\\n    if(det < 0.0) discard;\\n    float sqrtDet = sqrt(det);\\n    float posT = (-B+sqrtDet)/(2.0*A);\\n    float negT = (-B-sqrtDet)/(2.0*A);\\n    float intersectionT = min(posT,negT);\\n    vec3 qi = p+v*intersectionT;\\n    float dotp1 = dot(va,qi-p1);\\n    float dotp2 = dot(va,qi-p2);\\n    vec3 norm;\\n    if( dotp1 < 0.0 || dotp2 > 0.0) {\\n       vec3 cp;\\n       if( dotp1 < 0.0) {        cp = p1;\\n       } else {\\n          cp = p2;\\n       }\\n       vec3 diff = p-cp;\\n       A = dot(v,v);\\n       B = dot(diff,v)*2.0;\\n       C = dot(diff,diff)-r*r;\\n       det = (B*B) - (4.0*C);\\n       if(det < 0.0) discard;\\n       sqrtDet = sqrt(det);\\n       posT = (-B+sqrtDet)/(2.0);\\n       negT = (-B-sqrtDet)/(2.0);\\n       float t = min(posT,negT);\\n       qi = p+v*t;\\n       norm = normalize(qi-cp);\\n    } else {\\n       norm = normalize(qi-(dotp1*va + p1));\\n    }\\n    vec4 clipPos = projectionMatrix * vec4(qi, 1.0);\\n    float ndcDepth = clipPos.z / clipPos.w;\\n    float depth = ((gl_DepthRange.diff * ndcDepth) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;\\n    gl_FragDepthEXT = depth;"};\n$3Dmol.ShaderLib={basic:{fragmentShader:"uniform mat4 viewMatrix;\\nuniform float opacity;\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nvarying vec3 vColor;\\nvoid main() {\\n    gl_FragColor = vec4( vColor, opacity );\\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\\n}",vertexShader:"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\nattribute vec3 position;\\nattribute vec3 color;\\nvarying vec3 vColor;\\nvoid main() {\\n    vColor = color;\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    gl_Position = projectionMatrix * mvPosition;\\n}",\nuniforms:{opacity:{type:"f",value:1},fogColor:{type:"c",value:new $3Dmol.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3}}},sphereimposter:{fragmentShader:"uniform mat4 viewMatrix;\\nuniform float opacity;\\nuniform mat4 projectionMatrix;\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nuniform float uDepth;\\nuniform vec3 directionalLightColor[ 1 ];\\nvarying vec3 vColor;\\nvarying vec2 mapping;\\nvarying float rval;\\nvarying vec3 vLight;\\nvarying vec3 center;\\nvoid main() {\\n    float lensqr = dot(mapping,mapping);\\n    float rsqr = rval*rval;\\n    if(lensqr > rsqr)\\n       discard;\\n    float z = sqrt(rsqr-lensqr);\\n    vec3 cameraPos = center+ vec3(mapping.x,mapping.y,z);\\n    vec4 clipPos = projectionMatrix * vec4(cameraPos, 1.0);\\n    float ndcDepth = clipPos.z / clipPos.w;\\n    gl_FragDepthEXT = ((gl_DepthRange.diff * ndcDepth) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;\\n    vec3 norm = normalize(vec3(mapping.x,mapping.y,z));\\n    float dotProduct = dot( norm, vLight );\\n    vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\\n    vec3 vLight = directionalLightColor[ 0 ] * directionalLightWeighting;\\n    gl_FragColor = vec4(vLight*vColor, opacity*opacity );\\n    float fogFactor = smoothstep( fogNear, fogFar, gl_FragDepthEXT/gl_FragCoord.w );\\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\\n}",\nvertexShader:"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\nuniform vec3 directionalLightColor[ 1 ];\\nuniform vec3 directionalLightDirection[ 1 ];\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\nvarying vec2 mapping;\\nvarying vec3 vColor;\\nvarying float rval;\\nvarying vec3 vLight;\\nvarying vec3 center;\\nvoid main() {\\n    vColor = color;\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    center = mvPosition.xyz;\\n    vec4 projPosition = projectionMatrix * mvPosition;\\n    vec4 adjust = projectionMatrix* vec4(normal,0.0); adjust.z = 0.0; adjust.w = 0.0;\\n    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );\\n    vLight = normalize( lDirection.xyz );\\n    mapping = normal.xy;\\n    rval = abs(normal.x);\\n    gl_Position = projPosition+adjust;\\n}",\nuniforms:{opacity:{type:"f",value:1},fogColor:{type:"c",value:new $3Dmol.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},directionalLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]}}},lambert:{fragmentShader:"uniform mat4 viewMatrix;\\nuniform float opacity;\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nvarying vec3 vLightFront;\\nvarying vec3 vColor;\\nvoid main() {\\n    gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\\n    #ifndef WIREFRAME\\n    gl_FragColor.xyz *= vLightFront;\\n    #endif\\n    gl_FragColor = gl_FragColor * vec4( vColor, opacity );\\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\\n}",\nvertexShader:"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\nuniform vec3 directionalLightColor[ 1 ];\\nuniform vec3 directionalLightDirection[ 1 ];\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\nvarying vec3 vColor;\\nvarying vec3 vLightFront;\\nvoid main() {\\n    vColor = color;\\n    vec3 objectNormal = normal;\\n    vec3 transformedNormal = normalMatrix * objectNormal;\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    vLightFront = vec3( 0.0 );\\n    transformedNormal = normalize( transformedNormal );\\n    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );\\n    vec3 dirVector = normalize( lDirection.xyz );\\n    float dotProduct = dot( transformedNormal, dirVector );\\n    vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\\n    vLightFront += directionalLightColor[ 0 ] * directionalLightWeighting;\\n    gl_Position = projectionMatrix * mvPosition;\\n}",\nuniforms:{opacity:{type:"f",value:1},fogColor:{type:"c",value:new $3Dmol.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},directionalLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]}}},instanced:{fragmentShader:"uniform mat4 viewMatrix;\\nuniform float opacity;\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nvarying vec3 vLightFront;\\nvarying vec3 vColor;\\nvoid main() {\\n    gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\\n    #ifndef WIREFRAME\\n    gl_FragColor.xyz *= vLightFront;\\n    #endif\\n    gl_FragColor = gl_FragColor * vec4( vColor, opacity );\\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\\n}",\nvertexShader:"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\nuniform vec3 directionalLightColor[ 1 ];\\nuniform vec3 directionalLightDirection[ 1 ];\\nattribute vec3 offset;\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\nattribute float radius;\\nvarying vec3 vColor;\\nvarying vec3 vLightFront;\\nvoid main() {\\n    vColor = color;\\n    vec3 objectNormal = normal;\\n    vec3 transformedNormal = normalMatrix * objectNormal;\\n    vec4 mvPosition = modelViewMatrix * vec4( position * radius + offset, 1.0 );\\n    vLightFront = vec3( 0.0 );\\n    transformedNormal = normalize( transformedNormal );\\n    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );\\n    vec3 dirVector = normalize( lDirection.xyz );\\n    float dotProduct = dot( transformedNormal, dirVector );\\n    vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\\n    vLightFront += directionalLightColor[ 0 ] * directionalLightWeighting;\\n    gl_Position = projectionMatrix * mvPosition;\\n}",\nuniforms:{opacity:{type:"f",value:1},fogColor:{type:"c",value:new $3Dmol.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},directionalLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]}}},outline:{fragmentShader:"uniform float opacity;\\nuniform vec3 outlineColor;\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nvoid main() {\\n    gl_FragColor = vec4( outlineColor, 1 );\\n}",vertexShader:"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform float outlineWidth;\\nuniform float outlinePushback;\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\nvoid main() {\\n    vec4 norm = modelViewMatrix*vec4(normalize(normal),0.0);\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    mvPosition.xy += norm.xy*outlineWidth;\\n    gl_Position = projectionMatrix * mvPosition;\\n    mvPosition.z -= outlinePushback;\\n    vec4 pushpos = projectionMatrix*mvPosition;\\n    gl_Position.z = gl_Position.w*pushpos.z/pushpos.w;\\n}",\nuniforms:{opacity:{type:"f",value:1},outlineColor:{type:"c",value:new $3Dmol.Color(0,0,0)},fogColor:{type:"c",value:new $3Dmol.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},outlineWidth:{type:"f",value:.1},outlinePushback:{type:"f",value:1}}},sphereimposteroutline:{fragmentShader:"uniform float opacity;\\nuniform vec3 outlineColor;\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nuniform mat4 projectionMatrix;\\nvarying vec2 mapping;\\nvarying float rval;\\nvarying vec3 center;\\nuniform float outlinePushback;\\nvoid main() {\\n    float lensqr = dot(mapping,mapping);\\n    float rsqr = rval*rval;\\n    if(lensqr > rsqr)\\n       discard;\\n    float z = sqrt(rsqr-lensqr);\\n    vec3 cameraPos = center+ vec3(mapping.x,mapping.y,z-outlinePushback);\\n    vec4 clipPos = projectionMatrix * vec4(cameraPos, 1.0);\\n    float ndcDepth = clipPos.z / clipPos.w;\\n    gl_FragDepthEXT = ((gl_DepthRange.diff * ndcDepth) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;\\n    gl_FragColor = vec4(outlineColor, 1 );\\n}",\nvertexShader:"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform float outlineWidth;\\nuniform float outlinePushback;\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\nvarying vec2 mapping;\\nvarying float rval;\\nvarying vec3 center;\\nvoid main() {\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    center = mvPosition.xyz;\\n    vec4 projPosition = projectionMatrix * mvPosition;\\n    vec2 norm = normal.xy + vec2(sign(normal.x)*outlineWidth,sign(normal.y)*outlineWidth);\\n    vec4 adjust = projectionMatrix* vec4(norm,normal.z,0.0); adjust.z = 0.0; adjust.w = 0.0;\\n    mapping = norm.xy;\\n    rval = abs(norm.x);\\n    gl_Position = projPosition+adjust;\\n}",\nuniforms:{opacity:{type:"f",value:1},outlineColor:{type:"c",value:new $3Dmol.Color(0,0,0)},fogColor:{type:"c",value:new $3Dmol.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},outlineWidth:{type:"f",value:.1},outlinePushback:{type:"f",value:1}}},stickimposter:{fragmentShader:[$3Dmol.ShaderUtils.stickimposterFragmentShader,"    float dotProduct = dot( norm, vLight );\\n    vec3 light = vec3( max( dotProduct, 0.0 ) );\\n    gl_FragColor = vec4(light*color, opacity*opacity );\\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\\n}"].join("\\n"),\nvertexShader:"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\nuniform vec3 directionalLightColor[ 1 ];\\nuniform vec3 directionalLightDirection[ 1 ];\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\nattribute float radius;\\nvarying vec3 vColor;\\nvarying vec3 vLight;\\nvarying vec3 cposition;\\nvarying vec3 p1;\\nvarying vec3 p2;\\nvarying float r;\\nvoid main() {\\n    vColor = color; vColor.z = abs(vColor.z);\\n    r = abs(radius);\\n    vec4 to = modelViewMatrix*vec4(normal, 1.0);\\n    vec4 pt = modelViewMatrix*vec4(position, 1.0);\\n    vec4 mvPosition = pt;\\n    p1 = pt.xyz; p2 = to.xyz;\\n    vec3 norm = to.xyz-pt.xyz;\\n    float mult = 1.1;\\n    if(length(p1) > length(p2)) {\\n       mvPosition = to;\\n    }\\n    vec3 n = normalize(mvPosition.xyz);\\n    if(color.z >= 0.0) {\\n       vec3 pnorm = normalize(p1);\\n       float t = dot(mvPosition.xyz-p1,n)/dot(pnorm,n);\\n       mvPosition.xyz = p1+t*pnorm;\\n    } else {\\n       vec3 pnorm = normalize(p2);\\n       float t = dot(mvPosition.xyz-p2,n)/dot(pnorm,n);\\n       mvPosition.xyz = p2+t*pnorm;\\n       mult *= -1.0;\\n    }\\n    vec3 cr = normalize(cross(mvPosition.xyz,norm))*radius;\\n    vec3 doublecr = normalize(cross(mvPosition.xyz,cr))*radius;\\n    mvPosition.xy +=  mult*(cr + doublecr).xy;\\n    cposition = mvPosition.xyz;\\n    gl_Position = projectionMatrix * mvPosition;\\n    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );\\n    vLight = normalize( lDirection.xyz )*directionalLightColor[0];\\n}",\nuniforms:{opacity:{type:"f",value:1},fogColor:{type:"c",value:new $3Dmol.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},directionalLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]}}},stickimposteroutline:{fragmentShader:$3Dmol.ShaderUtils.stickimposterFragmentShader+"gl_FragColor = vec4(color,1.0);}",vertexShader:"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\nuniform vec3 directionalLightColor[ 1 ];\\nuniform vec3 directionalLightDirection[ 1 ];\\nuniform vec3 outlineColor;\\nuniform float outlineWidth;\\nuniform float outlinePushback;\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\nattribute float radius;\\nvarying vec3 vColor;\\nvarying vec3 vLight;\\nvarying vec3 cposition;\\nvarying vec3 p1;\\nvarying vec3 p2;\\nvarying float r;\\nvoid main() {\\n    vColor = outlineColor;\\n    float rad = radius+sign(radius)*outlineWidth;\\n    r = abs(rad);\\n    vec4 to = modelViewMatrix*vec4(normal, 1.0);\\n    vec4 pt = modelViewMatrix*vec4(position, 1.0);\\n    to.xyz += normalize(to.xyz)*outlinePushback;\\n    pt.xyz += normalize(pt.xyz)*outlinePushback;\\n    vec4 mvPosition = pt;\\n    p1 = pt.xyz; p2 = to.xyz;\\n    vec3 norm = to.xyz-pt.xyz;\\n    float mult = 1.1;\\n    if(length(p1) > length(p2)) {\\n       mvPosition = to;\\n    }\\n    vec3 n = normalize(mvPosition.xyz);\\n    if(color.z >= 0.0) {\\n       vec3 pnorm = normalize(p1);\\n       float t = dot(mvPosition.xyz-p1,n)/dot(pnorm,n);\\n       mvPosition.xyz = p1+t*pnorm;\\n    } else {\\n       vec3 pnorm = normalize(p2);\\n       float t = dot(mvPosition.xyz-p2,n)/dot(pnorm,n);\\n       mvPosition.xyz = p2+t*pnorm;\\n       mult *= -1.0;\\n    }\\n    vec3 cr = normalize(cross(mvPosition.xyz,norm))*rad;\\n    vec3 doublecr = normalize(cross(mvPosition.xyz,cr))*rad;\\n    mvPosition.xy +=  mult*(cr + doublecr).xy;\\n    cposition = mvPosition.xyz;\\n    gl_Position = projectionMatrix * mvPosition;\\n    vLight = vec3(1.0,1.0,1.0);\\n}",\nuniforms:{opacity:{type:"f",value:1},fogColor:{type:"c",value:new $3Dmol.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},outlineColor:{type:"c",value:new $3Dmol.Color(0,0,0)},outlineWidth:{type:"f",value:.1},outlinePushback:{type:"f",value:1}}},lambertdouble:{fragmentShader:"uniform mat4 viewMatrix;\\nuniform float opacity;\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nvarying vec3 vLightFront;\\nvarying vec3 vLightBack;\\nvarying vec3 vColor;\\nvoid main() {\\n    gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\\n    #ifndef WIREFRAME\\n    if ( gl_FrontFacing )\\n       gl_FragColor.xyz *= vLightFront;\\n    else\\n       gl_FragColor.xyz *= vLightBack;\\n    #endif\\n    gl_FragColor = gl_FragColor * vec4( vColor, opacity );\\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\\n}",\nvertexShader:"uniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform mat4 viewMatrix;\\nuniform mat3 normalMatrix;\\nuniform vec3 directionalLightColor[ 1 ];\\nuniform vec3 directionalLightDirection[ 1 ];\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec3 color;\\nvarying vec3 vColor;\\nvarying vec3 vLightFront;\\nvarying vec3 vLightBack;\\nvoid main() {\\n    vColor = color;\\n    vec3 objectNormal = normal;\\n    vec3 transformedNormal = normalMatrix * objectNormal;\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n    vLightFront = vec3( 0.0 );\\n    vLightBack = vec3( 0.0 );\\n    transformedNormal = normalize( transformedNormal );\\n    vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ 0 ], 0.0 );\\n    vec3 dirVector = normalize( lDirection.xyz );\\n    float dotProduct = dot( transformedNormal, dirVector );\\n    vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\\n    vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\\n    vLightFront += directionalLightColor[ 0 ] * directionalLightWeighting;\\n    vLightBack += directionalLightColor[ 0 ] * directionalLightWeightingBack;\\n    gl_Position = projectionMatrix * mvPosition;\\n}",\nuniforms:{opacity:{type:"f",value:1},fogColor:{type:"c",value:new $3Dmol.Color(1,1,1)},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},directionalLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]}}},sprite:{fragmentShader:"uniform vec3 color;\\nuniform sampler2D map;\\nuniform float opacity;\\nuniform int fogType;\\nuniform vec3 fogColor;\\nuniform float fogDensity;\\nuniform float fogNear;\\nuniform float fogFar;\\nuniform float alphaTest;\\nvarying vec2 vUV;\\nvoid main() {\\n    vec4 texture = texture2D(map, vUV);\\n    if (texture.a < alphaTest) discard;\\n    gl_FragColor = vec4(color * texture.xyz, texture.a * opacity);\\n    if (fogType > 0) {\\n        float depth = gl_FragCoord.z / gl_FragCoord.w;\\n        float fogFactor = 0.0;\\n        if (fogType == 1) {\\n            fogFactor = smoothstep(fogNear, fogFar, depth);\\n        }\\n        else {\\n            const float LOG2 = 1.442695;\\n            float fogFactor = exp2(- fogDensity * fogDensity * depth * depth * LOG2);\\n            fogFactor = 1.0 - clamp(fogFactor, 0.0, 1.0);\\n        }\\n        gl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w), fogFactor);\\n    }\\n}",\nvertexShader:"uniform int useScreenCoordinates;\\nuniform vec3 screenPosition;\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\nuniform float rotation;\\nuniform vec2 scale;\\nuniform vec2 alignment;\\nuniform vec2 uvOffset;\\nuniform vec2 uvScale;\\nattribute vec2 position;\\nattribute vec2 uv;\\nvarying vec2 vUV;\\nvoid main() {\\n    vUV = uvOffset + uv * uvScale;\\n    vec2 alignedPosition = position + alignment;\\n    vec2 rotatedPosition;\\n    rotatedPosition.x = ( cos(rotation) * alignedPosition.x - sin(rotation) * alignedPosition.y ) * scale.x;\\n    rotatedPosition.y = ( sin(rotation) * alignedPosition.x + cos(rotation) * alignedPosition.y ) * scale.y;\\n    vec4 finalPosition;\\n    if(useScreenCoordinates != 0) {\\n        finalPosition = vec4(screenPosition.xy + rotatedPosition, screenPosition.z, 1.0);\\n    }\\n    else {\\n        finalPosition = projectionMatrix * modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0); finalPosition /= finalPosition.w;\\n        finalPosition.xy += rotatedPosition; \\n    }\\n    gl_Position = finalPosition;\\n}",\nuniforms:{}}};\n$3Dmol.autoload=function(b,c){void 0!==$(".viewer_3Dmoljs")[0]&&($3Dmol.autoinit=!0);if($3Dmol.autoinit){b=void 0!=b?b:null;$3Dmol.viewers={};var d=0;$(".viewer_3Dmoljs").each(function(){var e,f,q=$(this),l=[],t=[];"static"==q.css("position")&&q.css("position","relative");var p=null;if(q.data("pdb"))l.push("https://files.rcsb.org/view/"+q.data("pdb")+".pdb"),t.push("pdb");else if(q.data("cid"))t.push("sdf"),l.push("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/"+q.data("cid")+"/SDF?record_type=3d");\nelse if(q.data("href")||q.data("url")){var w=q.data("href");l.push(w);p=w.substr(w.lastIndexOf(".")+1);t.push(p)}p=q.data();for(e in p)"pdb"===e.substring(0,3)&&"pdb"!==e?(l.push("https://files.rcsb.org/view/"+p[e]+".pdb"),t.push("pdb")):"href"===e.substring(0,4)&&"href"!==e?(w=p[e],l.push(w),t.push(w.substr(w.lastIndexOf(".")+1))):"cid"===e.substring(0,3)&&"cid"!==e&&(l.push("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/"+p[e]+"/SDF?record_type=3d"),t.push("sdf"));var g={};q.data("options")&&\n(g=$3Dmol.specStringToObject(q.data("options")));p=$3Dmol.CC.color(q.data("backgroundcolor"));var h={line:{}};q.data("style")&&(h=$3Dmol.specStringToObject(q.data("style")));var n={};q.data("select")&&(n=$3Dmol.specStringToObject(q.data("select")));var y=[],m=[],x=[],u=q.data(),M=/style(.+)/,O=/surface(.*)/,B=/labelres(.*)/,S=[];for(H in u)u.hasOwnProperty(H)&&S.push(H);S.sort();for(e=0;e<S.length;e++){var H=S[e];if(f=M.exec(H)){f="select"+f[1];var z=$3Dmol.specStringToObject(u[f]);f=$3Dmol.specStringToObject(u[H]);\ny.push([z,f])}if(f=O.exec(H))f="select"+f[1],z=$3Dmol.specStringToObject(u[f]),f=$3Dmol.specStringToObject(u[H]),m.push([z,f]);if(f=B.exec(H))f="select"+f[1],z=$3Dmol.specStringToObject(u[f]),f=$3Dmol.specStringToObject(u[H]),x.push([z,f])}var A=function(b){b.setStyle(n,h);for(var c=0;c<y.length;c++){var d=y[c][0]||{};var g=y[c][1]||{line:{}};b.setStyle(d,g)}for(c=0;c<m.length;c++)d=m[c][0]||{},g=m[c][1]||{},b.addSurface($3Dmol.SurfaceType.VDW,g,d,d);for(c=0;c<x.length;c++)d=x[c][0]||{},g=x[c][1]||\n{},b.addResLabels(d,g);b.zoomTo();b.render()},D=b;try{null==D&&(D=$3Dmol.viewers[this.id||d++]=$3Dmol.createViewer(q,{defaultcolors:$3Dmol.rasmolElementColors})),D.setBackgroundColor(p)}catch(L){console.log(L),window.location="http://get.webgl.org"}if(0!=l.length){e=0;var G=function(b){w=l[e];var n=q.data("type")||q.data("datatype")||t[e];D.addModel(b,n,g);e+=1;e<l.length?$.get(l[e],G,"text"):(A(D),q.data("callback")&&(b=eval(q.data("callback")),"function"==typeof b&&b(D)),c&&c(D))};$.get(l[0],G,\n"text")}else q.data("element")&&(H=$("#"+q.data("element")).val()||"",p=q.data("type")||q.data("datatype"),p||(console.log("Warning: No type specified for embedded viewer with moldata from "+q.data("element")+"\\n assuming type \'pdb\'"),p="pdb"),D.addModel(H,p,g)),A(D),q.data("callback")&&(H=eval(q.data("callback")),"function"==typeof H&&H(D)),c&&c(D)})}};$(document).ready(function(){$3Dmol.autoload()});(function(){});\nvar htmlColors={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgrey:11119017,darkgreen:25600,darkkhaki:12433259,darkmagenta:9109643,\ndarkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,grey:8421504,green:32768,greenyellow:11403055,\nhoneydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgrey:13882323,lightgreen:9498256,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,\nlimegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,\npaleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,\nthistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};\n$3Dmol.CC={cache:{0:new $3Dmol.Color(0)},color:function color_(c){if(!c)return this.cache[0];if("undefined"!==typeof this.cache[c])return this.cache[c];if(c&&c.constructor===Array)return c.map(color_,this);c=this.getHex(c);if("number"===typeof c){var d=new $3Dmol.Color(c);return this.cache[c]=d}return c},getHex:function(b){return isNaN(parseInt(b))?"string"===typeof b?(b=b.trim(),4==b.length&&"#"==b[0]&&(b="#"+b[1]+b[1]+b[2]+b[2]+b[3]+b[3]),7==b.length&&"#"==b[0]?parseInt(b.substring(1),16):htmlColors[b.toLowerCase()]||\n0):b:parseInt(b)}};$3Dmol.CC=$3Dmol.CC;$3Dmol.CC.color=$3Dmol.CC.color;$3Dmol.ssColors=$3Dmol.ssColors||{};$3Dmol.ssColors.pyMol={h:16711680,s:16776960,c:65280};$3Dmol.ssColors.Jmol={h:16711808,s:16762880,c:16777215};$3Dmol.elementColors=$3Dmol.elementColors||{};$3Dmol.elementColors.defaultColor=16716947;\n$3Dmol.elementColors.Jmol={H:16777215,He:14286847,HE:14286847,Li:13402367,LI:13402367,B:16758197,C:9474192,N:3166456,O:16715021,F:9494608,Na:11230450,NA:11230450,Mg:9109248,MG:9109248,Al:12560038,AL:12560038,Si:1578E4,SI:1578E4,P:16744448,S:16777008,Cl:2093087,CL:2093087,Ca:4062976,CA:4062976,Ti:12567239,TI:12567239,Cr:9083335,CR:9083335,Mn:10255047,MN:10255047,Fe:14706227,FE:14706227,Ni:5296208,NI:5296208,Cu:13140019,CU:13140019,Zn:8224944,ZN:8224944,Br:10889513,BR:10889513,Ag:12632256,AG:12632256,\nI:9699476,Ba:51456,BA:51456,Au:16765219,AU:16765219};\n$3Dmol.elementColors.rasmol={H:16777215,He:16761035,HE:16761035,Li:11674146,LI:11674146,B:65280,C:13158600,N:9408511,O:15728640,F:14329120,Na:255,NA:255,Mg:2263842,MG:2263842,Al:8421520,AL:8421520,Si:14329120,SI:14329120,P:16753920,S:16762930,Cl:65280,CL:65280,Ca:8421520,CA:8421520,Ti:8421520,TI:8421520,Cr:8421520,CR:8421520,Mn:8421520,MN:8421520,Fe:16753920,FE:16753920,Ni:10824234,NI:10824234,Cu:10824234,CU:10824234,Zn:10824234,ZN:10824234,Br:10824234,BR:10824234,Ag:8421520,AG:8421520,I:10494192,\nBa:16753920,BA:16753920,Au:14329120,AU:14329120};$3Dmol.elementColors.defaultColors=$3Dmol.elementColors.rasmol;$3Dmol.elementColors.greenCarbon=$.extend({},$3Dmol.elementColors.defaultColors);$3Dmol.elementColors.greenCarbon.C=65280;$3Dmol.elementColors.cyanCarbon=$.extend({},$3Dmol.elementColors.defaultColors);$3Dmol.elementColors.cyanCarbon.C=65535;$3Dmol.elementColors.magentaCarbon=$.extend({},$3Dmol.elementColors.defaultColors);$3Dmol.elementColors.magentaCarbon.C=16711935;\n$3Dmol.elementColors.yellowCarbon=$.extend({},$3Dmol.elementColors.defaultColors);$3Dmol.elementColors.yellowCarbon.C=16776960;$3Dmol.elementColors.whiteCarbon=$.extend({},$3Dmol.elementColors.defaultColors);$3Dmol.elementColors.whiteCarbon.C=16777215;$3Dmol.elementColors.orangeCarbon=$.extend({},$3Dmol.elementColors.defaultColors);$3Dmol.elementColors.orangeCarbon.C=16753920;$3Dmol.elementColors.purpleCarbon=$.extend({},$3Dmol.elementColors.defaultColors);$3Dmol.elementColors.purpleCarbon.C=8388736;\n$3Dmol.elementColors.blueCarbon=$.extend({},$3Dmol.elementColors.defaultColors);$3Dmol.elementColors.blueCarbon.C=255;$3Dmol.residues={};$3Dmol.residues.amino={ALA:13158600,ARG:1334015,ASN:56540,ASP:15075850,CYS:15132160,GLN:56540,GLU:15075850,GLY:15461355,HIS:8553170,ILE:1016335,LEU:1016335,LYS:1334015,MET:15132160,PHE:3289770,PRO:14456450,SER:16422400,THR:16422400,TRP:11819700,TYR:3289770,VAL:1016335,ASX:16738740,GLX:16738740};\n$3Dmol.residues.shapely={ALA:9240460,ARG:124,ASN:16743536,ASP:10485826,CYS:16777072,GLN:16731212,GLU:6684672,GLY:16777215,HIS:7368959,ILE:19456,LEU:4546117,LYS:4671416,MET:12099650,PHE:5459026,PRO:5395026,SER:16740418,THR:12078080,TRP:5195264,TYR:9203788,VAL:16747775,ASX:16711935,GLX:16711935};$3Dmol.residues.nucleic={A:10526975,G:16740464,I:8454143,C:16747595,T:10551200,U:16744576};$3Dmol.chains={};\n$3Dmol.chains.atom={A:12636415,B:11599792,C:16761032,D:16777088,E:16761087,F:11596016,G:16765040,H:15761536,I:16113331,J:49151,K:13458524,L:6737322,M:10145074,N:15631086,O:52945,P:65407,Q:3978097,R:139,S:12433259,T:25600,U:8388608,V:8421376,W:8388736,X:32896,Y:12092939,Z:11674146};\n$3Dmol.chains.hetatm={A:9478351,B:8441752,C:13602992,D:13619056,E:13603023,F:8437952,G:13607008,H:12603504,I:12955267,J:42959,K:11881548,L:5682578,M:9090346,N:12481214,O:46753,P:53103,Q:3447649,R:187,S:10854235,T:37888,U:11534336,V:11579392,W:11534512,X:45232,Y:15250963,Z:12726834};\n$3Dmol.builtinColorSchemes={ssPyMol:{prop:"ss",map:$3Dmol.ssColors.pyMol},ssJmol:{prop:"ss",map:$3Dmol.ssColors.Jmol},Jmol:{prop:"elem",map:$3Dmol.elementColors.Jmol},greenCarbon:{prop:"elem",map:$3Dmol.elementColors.greenCarbon},"default":{prop:"elem",map:$3Dmol.elementColors.defaultColors},amino:{prop:"resn",map:$3Dmol.residues.amino},shapely:{prop:"resn",map:$3Dmol.residues.shapely},nucleic:{prop:"resn",map:$3Dmol.residues.nucleic},chain:{prop:"chain",map:$3Dmol.chains.atom},chainHetatm:{prop:"chain",\nmap:$3Dmol.chains.hetatm}};\n$3Dmol.getColorFromStyle=function(b,c){var d=c.colorscheme;if("undefined"!=typeof $3Dmol.builtinColorSchemes[d])d=$3Dmol.builtinColorSchemes[d];else if("string"==typeof d&&d.endsWith("Carbon")){var e=d.substring(0,d.lastIndexOf("Carbon")).toLowerCase();if("undefined"!=typeof htmlColors[e]){var f=$.extend({},$3Dmol.elementColors.defaultColors);f.C=htmlColors[e];$3Dmol.builtinColorSchemes[d]={prop:"elem",map:f};d=$3Dmol.builtinColorSchemes[d]}}e=b.color;"undefined"!=typeof c.color&&"spectrum"!=c.color&&\n(e=c.color);"undefined"!=typeof d?"undefined"!=typeof $3Dmol.elementColors[d]?(d=$3Dmol.elementColors[d],"undefined"!=typeof d[b[d.prop]]&&(e=d.map[b[d.prop]])):"undefined"!=typeof d[b[d.prop]]?e=d.map[b[d.prop]]:"undefined"!=typeof d.prop&&"undefined"!=typeof d.gradient?(f=d.prop,c=d.gradient,"undefined"!=typeof $3Dmol.Gradient.builtinGradients[c]&&(c=new $3Dmol.Gradient.builtinGradients[c](d.min,d.max,d.mid)),d=c.range()||[-1,1],b=$3Dmol.getAtomProperty(b,f),null!=b&&(e=c.valueToHex(b,d))):"undefined"!=\ntypeof d.prop&&"undefined"!=typeof d.map?(f=d.prop,b=$3Dmol.getAtomProperty(b,f),"undefined"!=typeof d.map[b]&&(e=d.map[b])):"undefined"!=typeof c.colorscheme[b.elem]?e=c.colorscheme[b.elem]:console.log("Could not interpret colorscheme "+d):"undefined"!=typeof c.colorfunc&&(e=c.colorfunc(b));return $3Dmol.CC.color(e)};$3Dmol=$3Dmol||{};\n$3Dmol.subdivide_spline=function(b,c){var d=[];var e=[];e.push(b[0]);var f;var q=1;for(f=b.length-1;q<f;q++){var l=b[q];var t=b[q+1];l.smoothen?(t=new $3Dmol.Vector3((l.x+t.x)/2,(l.y+t.y)/2,(l.z+t.z)/2),t.atom=l.atom,e.push(t)):e.push(l)}e.push(b[b.length-1]);q=-1;for(b=e.length;q<=b-3;q++){f=e[-1===q?0:q];l=e[q+1];t=e[q+2];var p=e[q===b-3?b-1:q+3];f=(new $3Dmol.Vector3).subVectors(t,f).multiplyScalar(.5);p=(new $3Dmol.Vector3).subVectors(p,l).multiplyScalar(.5);if(!t.skip)for(var w=0;w<c;w++){var g=\n1/c*w;g=new $3Dmol.Vector3(l.x+g*f.x+g*g*(-3*l.x+3*t.x-2*f.x-p.x)+g*g*g*(2*l.x-2*t.x+f.x+p.x),l.y+g*f.y+g*g*(-3*l.y+3*t.y-2*f.y-p.y)+g*g*g*(2*l.y-2*t.y+f.y+p.y),l.z+g*f.z+g*g*(-3*l.z+3*t.z-2*f.z-p.z)+g*g*g*(2*l.z-2*t.z+f.z+p.z));g.atom=w<c/2?l.atom:t.atom;d.push(g)}}d.push(e[e.length-1]);return d};\n$3Dmol.drawCartoon=function(){var b=function(b,c,d,m,g,e){g=0;for(e=c.length;g<e;g++){var n=Math.round(g*(m.length-1)/e);var h=$3Dmol.CC.color(m[n]);geoGroup=b.updateGeoGroup(2);var x=geoGroup.vertexArray,u=geoGroup.colorArray;n=geoGroup.faceArray;var l=geoGroup.vertices;var y=3*l;x[y]=c[g].x;x[y+1]=c[g].y;x[y+2]=c[g].z;x[y+3]=d[g].x;x[y+4]=d[g].y;x[y+5]=d[g].z;for(x=0;6>x;++x)u[y+3*x]=h.r,u[y+1+3*x]=h.g,u[y+2+3*x]=h.b;0<g&&(l=[l,l+1,l-1,l-2],y=geoGroup.faceidx,n[y]=l[0],n[y+1]=l[1],n[y+2]=l[3],n[y+\n3]=l[1],n[y+4]=l[2],n[y+5]=l[3],geoGroup.faceidx+=6);geoGroup.vertices+=2}},c=function(b,c,d,m,g){0!==c.length&&(g=void 0===g?5:g,m=new $3Dmol.Geometry,$3Dmol.subdivide_spline(c,g),c=new $3Dmol.LineBasicMaterial({linewidth:d}),c.vertexColors=!0,c=new $3Dmol.Line(m,c),c.type=$3Dmol.LineStrip,b.add(c))},d=function(c,n,d,m,g,e,l){l&&"default"!==l||(l="rectangle");if("edged"===l){if(!(2>n.length)){var h=n[0];n=n[n.length-1];var x=m||axisDIV;h=$3Dmol.subdivide_spline(h,x);n=$3Dmol.subdivide_spline(n,x);\nif(g){x=[];var u,y,f,p;l=[[0,2,-6,-8],[-4,-2,6,4],[7,-1,-5,3],[-3,5,1,-7]];var q;var M=0;for(q=h.length;M<q;M++){var t=Math.round(M*(d.length-1)/q);t=$3Dmol.CC.color(d[t]);x.push(u=h[M]);x.push(u);x.push(y=n[M]);x.push(y);if(M<q-1){var K=h[M+1].clone().sub(h[M]);K=n[M].clone().sub(h[M]).cross(K).normalize().multiplyScalar(g)}x.push(f=h[M].clone().add(K));x.push(f);x.push(p=n[M].clone().add(K));x.push(p);if(void 0!==u.atom)var F=u.atom;m=c.updateGeoGroup(8);var w=m.vertexArray;var I=m.colorArray;var N=\nm.faceArray;e=m.vertices;var E=3*e;w[E]=u.x;w[E+1]=u.y;w[E+2]=u.z;w[E+3]=u.x;w[E+4]=u.y;w[E+5]=u.z;w[E+6]=y.x;w[E+7]=y.y;w[E+8]=y.z;w[E+9]=y.x;w[E+10]=y.y;w[E+11]=y.z;w[E+12]=f.x;w[E+13]=f.y;w[E+14]=f.z;w[E+15]=f.x;w[E+16]=f.y;w[E+17]=f.z;w[E+18]=p.x;w[E+19]=p.y;w[E+20]=p.z;w[E+21]=p.x;w[E+22]=p.y;w[E+23]=p.z;for(w=0;8>w;++w)I[E+3*w]=t.r,I[E+1+3*w]=t.g,I[E+2+3*w]=t.b;if(0<M)for(I=void 0!==U&&void 0!==F&&U.serial!==F.serial,w=0;4>w;w++)if(E=[e+l[w][0],e+l[w][1],e+l[w][2],e+l[w][3]],y=m.faceidx,N[y]=\nE[0],N[y+1]=E[1],N[y+2]=E[3],N[y+3]=E[1],N[y+4]=E[2],N[y+5]=E[3],m.faceidx+=6,F.clickable||U.clickable||F.hoverable||U.hoverable){p=x[E[3]].clone();y=x[E[0]].clone();var J=x[E[2]].clone();f=x[E[1]].clone();p.atom=x[E[3]].atom||null;J.atom=x[E[2]].atom||null;y.atom=x[E[0]].atom||null;f.atom=x[E[1]].atom||null;if(I){var R=p.clone().add(y).multiplyScalar(.5),W=J.clone().add(f).multiplyScalar(.5),V=p.clone().add(f).multiplyScalar(.5);if(0===w%2){if(U.clickable||U.hoverable)E=new $3Dmol.Triangle(R,V,p),\nu=new $3Dmol.Triangle(W,J,V),p=new $3Dmol.Triangle(V,J,p),U.intersectionShape.triangle.push(E),U.intersectionShape.triangle.push(u),U.intersectionShape.triangle.push(p);if(F.clickable||F.hoverable)E=new $3Dmol.Triangle(y,f,V),u=new $3Dmol.Triangle(f,W,V),p=new $3Dmol.Triangle(y,V,R),F.intersectionShape.triangle.push(E),F.intersectionShape.triangle.push(u),F.intersectionShape.triangle.push(p)}else{if(F.clickable||F.hoverable)E=new $3Dmol.Triangle(R,V,p),u=new $3Dmol.Triangle(W,J,V),p=new $3Dmol.Triangle(V,\nJ,p),F.intersectionShape.triangle.push(E),F.intersectionShape.triangle.push(u),F.intersectionShape.triangle.push(p);if(U.clickable||U.hoverable)E=new $3Dmol.Triangle(y,f,V),u=new $3Dmol.Triangle(f,W,V),p=new $3Dmol.Triangle(y,V,R),U.intersectionShape.triangle.push(E),U.intersectionShape.triangle.push(u),U.intersectionShape.triangle.push(p)}}else if(F.clickable||F.hoverable)E=new $3Dmol.Triangle(y,f,p),u=new $3Dmol.Triangle(f,J,p),F.intersectionShape.triangle.push(E),F.intersectionShape.triangle.push(u)}m.vertices+=\n8;var U=F}d=x.length-8;m=c.updateGeoGroup(8);w=m.vertexArray;I=m.colorArray;N=m.faceArray;e=m.vertices;E=3*e;y=m.faceidx;for(M=0;4>M;M++)x.push(x[2*M]),x.push(x[d+2*M]),g=x[2*M],c=x[d+2*M],w[E+6*M]=g.x,w[E+1+6*M]=g.y,w[E+2+6*M]=g.z,w[E+3+6*M]=c.x,w[E+4+6*M]=c.y,w[E+5+6*M]=c.z,I[E+6*M]=t.r,I[E+1+6*M]=t.g,I[E+2+6*M]=t.b,I[E+3+6*M]=t.r,I[E+4+6*M]=t.g,I[E+5+6*M]=t.b;E=[e,e+2,e+6,e+4];u=[e+1,e+5,e+7,e+3];N[y]=E[0];N[y+1]=E[1];N[y+2]=E[3];N[y+3]=E[1];N[y+4]=E[2];N[y+5]=E[3];N[y+6]=u[0];N[y+7]=u[1];N[y+\n8]=u[3];N[y+9]=u[1];N[y+10]=u[2];N[y+11]=u[3];m.faceidx+=12;m.vertices+=8}else b(c,h,n,d,x,e)}}else if("rectangle"===l||"oval"===l||"parabola"===l)if(t=l,F=n.length,!(2>F||2>n[0].length)){m=m||axisDIV;for(U=0;U<F;U++)n[U]=$3Dmol.subdivide_spline(n[U],m);K=n[0].length;if(g){e=[];m=[];l=[];for(w=0;w<F;w++)e.push(.25+1.5*Math.sqrt((F-1)*w-Math.pow(w,2))/(F-1)),m.push(.5),l.push(2*(Math.pow(w/F,2)-w/F)+.6);q=[];for(w=0;w<2*F-1;w++)q[w]=[w,w+1,w+1-2*F,w-2*F];q[2*F-1]=[w,w+1-2*F,w+1-4*F,w-2*F];c=c.updateGeoGroup(2*\nF*K);for(U=0;U<K;U++){w=Math.round(U*(d.length-1)/K);u=$3Dmol.CC.color(d[w]);I=x;E=M;x=[];M=[];y=[];void 0!==n[0][U].atom&&(N=n[0][U].atom,"oval"===t?h=e:"rectangle"===t?h=m:"parabola"===t&&(h=l));h||(h=m);for(w=0;w<F;w++)f=U<K-1?n[w][U+1].clone().sub(n[w][U]):n[w][U-1].clone().sub(n[w][U]).negate(),p=w<F-1?n[w+1][U].clone().sub(n[w][U]):n[w-1][U].clone().sub(n[w][U]).negate(),y[w]=p.cross(f).normalize().multiplyScalar(g*h[w]);for(w=0;w<F;w++)x[w]=n[w][U].clone().add(y[w].clone().negate());for(w=\n0;w<F;w++)M[w]=n[w][U].clone().add(y[w]);J=c.vertexArray;p=c.colorArray;y=c.faceArray;f=c.vertices;R=3*f;for(w=0;w<F;w++)J[R+3*w+0]=x[w].x,J[R+3*w+1]=x[w].y,J[R+3*w+2]=x[w].z;for(w=0;w<F;w++)J[R+3*w+0+3*F]=M[F-1-w].x,J[R+3*w+1+3*F]=M[F-1-w].y,J[R+3*w+2+3*F]=M[F-1-w].z;for(w=0;w<2*F;++w)p[R+3*w+0]=u.r,p[R+3*w+1]=u.g,p[R+3*w+2]=u.b;if(0<U){for(w=0;w<2*F;w++)u=[f+q[w][0],f+q[w][1],f+q[w][2],f+q[w][3]],p=c.faceidx,y[p]=u[0],y[p+1]=u[1],y[p+2]=u[3],y[p+3]=u[1],y[p+4]=u[2],y[p+5]=u[3],c.faceidx+=6;if(N.clickable||\nN.hoverable)for(w in u=[],u.push(new $3Dmol.Triangle(I[0],x[0],x[F-1])),u.push(new $3Dmol.Triangle(I[0],x[F-1],I[F-1])),u.push(new $3Dmol.Triangle(I[F-1],x[F-1],M[F-1])),u.push(new $3Dmol.Triangle(I[F-1],M[F-1],E[F-1])),u.push(new $3Dmol.Triangle(M[0],E[0],E[F-1])),u.push(new $3Dmol.Triangle(M[F-1],M[0],E[F-1])),u.push(new $3Dmol.Triangle(x[0],I[0],E[0])),u.push(new $3Dmol.Triangle(M[0],x[0],E[0])),u)N.intersectionShape.triangle.push(u[w])}c.vertices+=2*F}y=c.faceArray;f=c.vertices;for(U=0;U<F-1;U++)u=\n[U,U+1,2*F-2-U,2*F-1-U],p=c.faceidx,y[p]=u[0],y[p+1]=u[1],y[p+2]=u[3],y[p+3]=u[1],y[p+4]=u[2],y[p+5]=u[3],c.faceidx+=6;for(U=0;U<F-1;U++)u=[f-1-U,f-2-U,f-2*F+U+1,f-2*F+U],p=c.faceidx,y[p]=u[0],y[p+1]=u[1],y[p+2]=u[3],y[p+3]=u[1],y[p+4]=u[2],y[p+5]=u[3],c.faceidx+=6}else b(c,n[0],n[F-1],d,m,e)}},e=function(b,c){if(b&&c&&b.chain===c.chain){if(b.reschain===c.reschain&&(b.resi===c.resi||b.resi===c.resi-1))return!0;if(b.resi<c.resi){var n=b.x-c.x,d=b.y-c.y;b=b.z-c.z;if(16>n*n+d*d+b*b)return!0}}return!1},\nf=function(b,c,d,m,g){null!=c&&0!=c.vertices&&(g&&(c.initTypedArrays(),c.setUpNormals()),g=new $3Dmol.MeshDoubleLambertMaterial,g.vertexColors=$3Dmol.FaceColors,"number"===typeof d&&0<=d&&1>d&&(g.transparent=!0,g.opacity=d),g.outline=m,c=new $3Dmol.Mesh(c,g),b.add(c))},q={C:!0,CA:!0,O:!0,P:!0,OP2:!0,O2P:!0,"O5\'":!0,"O3\'":!0,"C5\'":!0,"C2\'":!0,"O5*":!0,"O3*":!0,"C5*":!0,"C2*":!0,N1:!0,N3:!0},l={DA:!0,DG:!0,A:!0,G:!0},t={DT:!0,DC:!0,U:!0,C:!0,T:!0},p={DA:!0,DG:!0,A:!0,G:!0,DT:!0,DC:!0,U:!0,C:!0,T:!0},\nw=function(b,n,y,m,x,u,M){u=u||5;M=M||5;var h,B,w=new $3Dmol.Geometry(!0),H=new $3Dmol.Geometry(!0),z=[],A=[],D=1,G=!1,L={};for(I in $3Dmol.Gradient.builtinGradients)$3Dmol.Gradient.builtinGradients.hasOwnProperty(I)&&(L[I]=new $3Dmol.Gradient.builtinGradients[I](y[1],y[0]));var K=function(b,c){return y&&"spectrum"===c.color?c.colorscheme in L?L[c.colorscheme].valueToHex(b.resi):L.sinebow.valueToHex(b.resi):$3Dmol.getColorFromStyle(b,c).getHex()};for(B=0;B<u;B++)A[B]=[];var F=h=!1;B=0;var Q=[];for(B in n){var I=\nn[B];if("C"===I.elem&&"CA"===I.atom){var N=e(J,I);N&&"s"===I.ss?h=!0:h&&(J&&E&&J.style.cartoon.arrows&&E.style.cartoon.arrows&&(J.ss="arrow end",E.ss="arrow start"),h=!1);N&&("h"===J.ss||"tube start"==J.ss)&&J.style.cartoon.tubes?!F&&"tube start"!=J.ss&&I.style.cartoon.tubes&&(I.ss="tube start",F=!0):F&&("tube start"===J.ss?J.ss="tube end":E&&E.style.cartoon.tubes&&(E.ss="tube end"),F=!1);var E=J;var J=I}I&&I.atom in q&&Q.push(I)}F&&J.style.cartoon.tubes&&(J.ss="tube end",F=!1);n=function(n){for(var h,\ng,e=0;!W&&e<u;e++)c(b,A[e],1,z,M,D);m&&0<A[0].length&&d(H,A,z,M,W,D,A.style);if(n){g=[];for(e=0;e<u;e++)g[e]=A[e][A[e].length-1];h=z[z.length-1]}A=[];for(e=0;e<u;e++)A[e]=[];z=[];if(n){for(e=0;e<u;e++)A[e].push(g[e]);z.push(h)}f(b,H,D,G,!0);f(b,w,D,G,!1);H=new $3Dmol.Geometry(!0);w=new $3Dmol.Geometry(!0)};J=void 0;for(E=0;E<Q.length;E++)if(I=Q[E],B=I.resn.trim(),F=B in p,D=1,h=I.style.cartoon,J&&J.style.cartoon&&(D=J.style.cartoon.opacity),J&&J.style.cartoon&&J.style.cartoon.outline&&(G=J.style.cartoon.outline),\n!J||!J.style.cartoon||I.style.cartoon&&J.style.cartoon.opacity==I.style.cartoon.opacity||n(J.chain==I.chain),A.length&&A[0].length>3E4/u/M/2&&n(!0),"trace"===h.style){if(!I.hetflag&&("C"===I.elem&&"CA"===I.atom||F&&"P"===I.atom)){var R=K(I,h);var W=$.isNumeric(h.thickness)?h.thickness:.4;if(e(J,I))if(R==V){var V=$3Dmol.CC.color(R);$3Dmol.GLDraw.drawCylinder(w,J,I,W,V,2,2)}else h=(new $3Dmol.Vector3).addVectors(J,I).multiplyScalar(.5),V=$3Dmol.CC.color(V),B=$3Dmol.CC.color(R),$3Dmol.GLDraw.drawCylinder(w,\nJ,h,W,V,2,0),$3Dmol.GLDraw.drawCylinder(w,h,I,W,B,0,2);J=I;V=R}}else{if(I&&"C"===I.elem&&"CA"===I.atom||F&&("P"===I.atom||0==I.atom.indexOf("O5"))){if(U)if("tube end"===I.ss){var U=!1;B=new $3Dmol.Vector3(I.x,I.y,I.z);$3Dmol.GLDraw.drawCylinder(w,ca,B,2,$3Dmol.CC.color(V),1,1);I.ss="h"}else if(J.chain!=I.chain||"tube end"===J.ss)U=!1,J.ss="h",B=new $3Dmol.Vector3(J.x,J.y,J.z),$3Dmol.GLDraw.drawCylinder(w,ca,B,2,$3Dmol.CC.color(V),1,1);else continue;if(J&&(!e(J,I)||"tube start"===J.ss)){if("tube start"===\nJ.ss){U=!0;var ca=new $3Dmol.Vector3(J.x,J.y,J.z);J.ss="h"}if(T){B=C?(new $3Dmol.Vector3).addVectors(J,C).multiplyScalar(.5):new $3Dmol.Vector3(J.x,J.y,J.z);$3Dmol.GLDraw.drawCylinder(w,B,T,.4,$3Dmol.CC.color(T.color),0,2);g(A,u,!x,C,aa,Z,J,Q,E);z.push(R);var T=B=null}for(B=0;!W&&B<u;B++)c(b,A[B],1,z,M,D);m&&0<A[0].length&&d(H,A,z,M,W,D,A.style);A=[];for(B=0;B<u;B++)A[B]=[];z=[]}if(void 0===J||J.rescode!=I.rescode||J.resi!=I.resi){T&&(B=(new $3Dmol.Vector3).addVectors(J,I).multiplyScalar(.5),J=B.clone().sub(T).multiplyScalar(.02),\nB.add(J),$3Dmol.GLDraw.drawCylinder(w,B,T,.4,$3Dmol.CC.color(T.color),0,2),T=B=null);R=K(I,h);z.push(R);W=$.isNumeric(h.thickness)?h.thickness:.4;J=I;var P=new $3Dmol.Vector3(J.x,J.y,J.z);P.resi=J.resi;V=R}!0!==I.clickable&&!0!==I.hoverable||void 0!==I.intersectionShape&&void 0!==I.intersectionShape.triangle||(I.intersectionShape={sphere:null,cylinder:[],line:[],triangle:[]})}else if(J&&"C"===J.elem&&"CA"===J.atom&&"O"===I.atom||F&&"P"===J.atom&&("OP2"===I.atom||"O2P"===I.atom)||F&&0==J.atom.indexOf("O5")&&\n0==I.atom.indexOf("C5")){var Y=new $3Dmol.Vector3(I.x,I.y,I.z);Y.resi=I.resi;if("OP2"===I.atom||"O2P"===I.atom)var aa=new $3Dmol.Vector3(I.x,I.y,I.z)}else if(F&&0==I.atom.indexOf("O3"))var C=new $3Dmol.Vector3(I.x,I.y,I.z);else if("N1"===I.atom&&B in l||"N3"===I.atom&&B in t)T=new $3Dmol.Vector3(I.x,I.y,I.z),T.color=$3Dmol.getColorFromStyle(I,h).getHex();if(Y&&P&&Y.resi===P.resi){g(A,u,!x,P,Y,Z,J,Q,E);var Z=Y;Y=P=null;z.push(R)}}T&&(B=C?(new $3Dmol.Vector3).addVectors(J,C).multiplyScalar(.5):new $3Dmol.Vector3(J.x,\nJ.y,J.z),$3Dmol.GLDraw.drawCylinder(w,B,T,.4,$3Dmol.CC.color(T.color),0,2),g(A,u,!x,C,aa,Z,J,Q,E),z.push(R));n()},g=function(b,c,d,m,g,e,l,f,p){if(m&&g&&l){var n=g.sub(m);n.normalize();var h=f[p];for(p+=1;p<f.length&&(h=f[p],h.atom!=l.atom);p++);h=h?new $3Dmol.Vector3(h.x,h.y,h.z):new $3Dmol.Vector3(0,0,0);h.sub(m);"arrow start"===l.ss&&(p=h.clone().multiplyScalar(.3).cross(g),m.add(p),p=h.clone().cross(n).normalize(),n.rotateAboutVector(p,.43));if(l.style.cartoon.ribbon)p=l.style.cartoon.thickness||\n.4;else if(l.style.cartoon.width)p=l.style.cartoon.width;else if("c"===l.ss)p="P"===l.atom?.8:.5;else if("arrow start"===l.ss){p=1.3;var x=!0}else p="arrow end"===l.ss?.5:"h"===l.ss&&l.style.cartoon.tubes||"tube start"===l.ss?.5:1.3;null!=e&&0>n.dot(e)&&n.negate();n.multiplyScalar(p);for(p=0;p<c;p++)e=-1+2*p/(c-1),e=new $3Dmol.Vector3(m.x+e*n.x,m.y+e*n.y,m.z+e*n.z),e.atom=l,d&&"s"===l.ss&&(e.smoothen=!0),b[p].push(e);if(x)for(n.multiplyScalar(2),p=0;p<c;p++)e=-1+2*p/(c-1),e=new $3Dmol.Vector3(m.x+\ne*n.x,m.y+e*n.y,m.z+e*n.z),e.atom=l,e.smoothen=!1,e.skip=!0,b[p].push(e);c=l.style.cartoon.style||"default";b.style?b.style!=c&&(console.log("Warning: a cartoon chain\'s strand-style is ambiguous"),b.style="default"):b.style=c;if("arrow start"===l.ss||"arrow end"===l.ss)l.ss="s";return x}};return function(b,c,d,m){m=m||5;w(b,c,d,!0,!1,m,m)}}();$3Dmol=$3Dmol||{};$3Dmol.CAP={NONE:0,FLAT:1,ROUND:2};\n$3Dmol.GLDraw=function(){var b={},c=function(){var b=new $3Dmol.Vector3;return function(c){b.set(c[0],c[1],c[2]);var d=b.x,e=b.y,g=b.z,h=Math.sqrt(d*d+e*e);1E-4>h?(c=0,h=1):(c=-d/h,h=e/h);e=-c*d+h*e;d=Math.sqrt(e*e+g*g);1E-4>d?(g=0,e=1):(g/=d,e/=d);d=new Float32Array(9);d[0]=h;d[1]=c;d[2]=0;d[3]=-c*e;d[4]=h*e;d[5]=g;d[6]=c*g;d[7]=-h*g;d[8]=e;return d}}(),d=function(){var b=[],c=Math.pow(2,4),d,e=Math.pow(2,2),g=c/e,h;b[0]=new $3Dmol.Vector3(-1,0,0);b[g]=new $3Dmol.Vector3(0,0,1);b[2*g]=new $3Dmol.Vector3(1,\n0,0);b[3*g]=new $3Dmol.Vector3(0,0,-1);for(d=3;4>=d;d++){e=Math.pow(2,d-1);g=c/e;for(h=0;h<e-1;h++)b[g/2+h*g]=b[h*g].clone().add(b[(h+1)*g]).normalize();h=e-1;b[g/2+h*g]=b[h*g].clone().add(b[0]).normalize()}return b}(),e={cache:{},getVerticesForRadius:function(b,c,e){if(void 0!==this.cache[b]&&void 0!==this.cache[b][c+e])return this.cache[b][c+e];new $3Dmol.Vector3(0,1,0);for(var l=d.length,g=[],h=[],n,y=0;y<l;y++)g.push(d[y].clone().multiplyScalar(b)),g.push(d[y].clone().multiplyScalar(b)),n=d[y].clone().normalize(),\nh.push(n),h.push(n);y=[];var m=2*Math.PI,x=Math.PI,u,f;for(f=0;10>=f;f++){var p=0===f||10===f?!0:!1;var q=5===f?!0:!1;var t=[],H=[];for(u=0;u<=l;u++)if(q){var z=u<l?2*u:0;H.push(z+1);t.push(z)}else{n=u/l;var A=f/10;p&&0!==u?p&&t.push(g.length-1):u<l?(z=new $3Dmol.Vector3,z.x=-b*Math.cos(0+n*m)*Math.sin(0+A*x),z.y=1==c?0:b*Math.cos(0+A*x),z.z=b*Math.sin(0+n*m)*Math.sin(0+A*x),1E-5>Math.abs(z.x)&&(z.x=0),1E-5>Math.abs(z.y)&&(z.y=0),1E-5>Math.abs(z.z)&&(z.z=0),n=c==$3Dmol.CAP.FLAT?new $3Dmol.Vector3(0,\nMath.cos(0+A*x),0):new $3Dmol.Vector3(z.x,z.y,z.z),n.normalize(),g.push(z),h.push(n),t.push(g.length-1)):t.push(g.length-l)}q&&y.push(H);y.push(t)}l={vertices:g,normals:h,verticesRows:y,w:l,h:10};b in this.cache||(this.cache[b]={});return this.cache[b][c+e]=l}},f=0;b.drawCylinder=function(b,d,p,q,g,h,n){if(d&&p){f++;var y=n||h;g=g||{r:0,g:0,b:0};var m=[p.x,p.y,p.z];m[0]-=d.x;m[1]-=d.y;m[2]-=d.z;m=c(m);var x=e.getVerticesForRadius(q,n,"to"),u=x.w,l=x.h,w=y?l*u+2:2*u;b=b.updateGeoGroup(w);var B=x.vertices,\nt=x.normals;x=x.verticesRows;var H=x[l/2],z=x[l/2+1],A=b.vertices,D,G=b.vertexArray,L=b.normalArray,K=b.colorArray,F=b.faceArray;for(D=0;D<u;++D){var Q=2*D;var I=m[0]*B[Q].x+m[3]*B[Q].y+m[6]*B[Q].z;var N=m[1]*B[Q].x+m[4]*B[Q].y+m[7]*B[Q].z;var E=m[5]*B[Q].y+m[8]*B[Q].z;var J=3*(A+Q);Q=b.faceidx;G[J]=I+d.x;G[J+1]=N+d.y;G[J+2]=E+d.z;G[J+3]=I+p.x;G[J+4]=N+p.y;G[J+5]=E+p.z;L[J]=I;L[J+3]=I;L[J+1]=N;L[J+4]=N;L[J+2]=E;L[J+5]=E;K[J]=g.r;K[J+3]=g.r;K[J+1]=g.g;K[J+4]=g.g;K[J+2]=g.b;K[J+5]=g.b;F[Q]=z[D]+A;F[Q+\n1]=z[D+1]+A;F[Q+2]=H[D]+A;F[Q+3]=H[D]+A;F[Q+4]=z[D+1]+A;F[Q+5]=H[D+1]+A;b.faceidx+=6}if(y)for(y=h?l+1:l/2+1,N=n?0:l/2;N<y;N++)if(N!==l/2)for(H=N<=l/2?p:d,I=e.getVerticesForRadius(q,n,"to"),Q=e.getVerticesForRadius(q,h,"from"),H===p?(B=I.vertices,t=I.normals,x=I.verticesRows):H==d&&(B=Q.vertices,t=Q.normals,x=Q.verticesRows),I=0;I<u;I++){Q=b.faceidx;z=x[N][I+1];var R=3*(z+A);D=x[N][I];var W=3*(D+A);E=x[N+1][I];var V=3*(E+A);J=x[N+1][I+1];var U=3*(J+A);var ca=m[0]*B[z].x+m[3]*B[z].y+m[6]*B[z].z;var T=\nm[0]*B[D].x+m[3]*B[D].y+m[6]*B[D].z;var P=m[0]*B[E].x+m[3]*B[E].y+m[6]*B[E].z;var Y=m[0]*B[J].x+m[3]*B[J].y+m[6]*B[J].z;var aa=m[1]*B[z].x+m[4]*B[z].y+m[7]*B[z].z;var C=m[1]*B[D].x+m[4]*B[D].y+m[7]*B[D].z;var Z=m[1]*B[E].x+m[4]*B[E].y+m[7]*B[E].z;var X=m[1]*B[J].x+m[4]*B[J].y+m[7]*B[J].z;var da=m[5]*B[z].y+m[8]*B[z].z;var ma=m[5]*B[D].y+m[8]*B[D].z;var ra=m[5]*B[E].y+m[8]*B[E].z;var ha=m[5]*B[J].y+m[8]*B[J].z;G[R]=ca+H.x;G[W]=T+H.x;G[V]=P+H.x;G[U]=Y+H.x;G[R+1]=aa+H.y;G[W+1]=C+H.y;G[V+1]=Z+H.y;G[U+\n1]=X+H.y;G[R+2]=da+H.z;G[W+2]=ma+H.z;G[V+2]=ra+H.z;G[U+2]=ha+H.z;K[R]=g.r;K[W]=g.r;K[V]=g.r;K[U]=g.r;K[R+1]=g.g;K[W+1]=g.g;K[V+1]=g.g;K[U+1]=g.g;K[R+2]=g.b;K[W+2]=g.b;K[V+2]=g.b;K[U+2]=g.b;ca=m[0]*t[z].x+m[3]*t[z].y+m[6]*t[z].z;T=m[0]*t[D].x+m[3]*t[D].y+m[6]*t[D].z;P=m[0]*t[E].x+m[3]*t[E].y+m[6]*t[E].z;Y=m[0]*t[J].x+m[3]*t[J].y+m[6]*t[J].z;aa=m[1]*t[z].x+m[4]*t[z].y+m[7]*t[z].z;C=m[1]*t[D].x+m[4]*t[D].y+m[7]*t[D].z;Z=m[1]*t[E].x+m[4]*t[E].y+m[7]*t[E].z;X=m[1]*t[J].x+m[4]*t[J].y+m[7]*t[J].z;da=m[5]*\nt[z].y+m[8]*t[z].z;ma=m[5]*t[D].y+m[8]*t[D].z;ra=m[5]*t[E].y+m[8]*t[E].z;ha=m[5]*t[J].y+m[8]*t[J].z;0===N?(L[R]=ca,L[V]=P,L[U]=Y,L[R+1]=aa,L[V+1]=Z,L[U+1]=X,L[R+2]=da,L[V+2]=ra,L[U+2]=ha,F[Q]=z+A,F[Q+1]=E+A,F[Q+2]=J+A,b.faceidx+=3):N===y-1?(L[R]=ca,L[W]=T,L[V]=P,L[R+1]=aa,L[W+1]=C,L[V+1]=Z,L[R+2]=da,L[W+2]=ma,L[V+2]=ra,F[Q]=z+A,F[Q+1]=D+A,F[Q+2]=E+A,b.faceidx+=3):(L[R]=ca,L[W]=T,L[U]=Y,L[R+1]=aa,L[W+1]=C,L[U+1]=X,L[R+2]=da,L[W+2]=ma,L[U+2]=ha,L[W]=T,L[V]=P,L[U]=Y,L[W+1]=C,L[V+1]=Z,L[U+1]=X,L[W+2]=\nma,L[V+2]=ra,L[U+2]=ha,F[Q]=z+A,F[Q+1]=D+A,F[Q+2]=J+A,F[Q+3]=D+A,F[Q+4]=E+A,F[Q+5]=J+A,b.faceidx+=6)}b.vertices+=w}};b.drawCone=function(b,e,f,q,g){if(e&&f){console.log(e);console.log(f);g=g||{r:0,g:0,b:0};var h=[f.x,f.y,f.z];h.x-=e.x;h.y-=e.y;h.z-=e.z;var n=c(h),y=d.length;b=b.updateGeoGroup(y+2);var m=b.vertices,x=b.vertexArray,u=b.normalArray,l=b.colorArray,p=b.faceArray;var B=3*m;h=(new $3Dmol.Vector3(h[0],h[1],h[2])).normalize();x[B]=e.x;x[B+1]=e.y;x[B+2]=e.z;u[B]=-h.x;u[B+1]=-h.y;u[B+2]=-h.z;\nl[B]=g.r;l[B+1]=g.g;l[B+2]=g.b;x[B+3]=f.x;x[B+4]=f.y;x[B+5]=f.z;u[B+3]=h.x;u[B+4]=h.y;u[B+5]=h.z;l[B+3]=g.r;l[B+4]=g.g;l[B+5]=g.b;B+=6;for(f=0;f<y;++f){var w=d[f].clone();w.multiplyScalar(q);h=n[0]*w.x+n[3]*w.y+n[6]*w.z;var t=n[1]*w.x+n[4]*w.y+n[7]*w.z;w=n[5]*w.y+n[8]*w.z;x[B]=h+e.x;x[B+1]=t+e.y;x[B+2]=w+e.z;u[B]=h;u[B+1]=t;u[B+2]=w;l[B]=g.r;l[B+1]=g.g;l[B+2]=g.b;B+=3}b.vertices+=y+2;e=b.faceidx;for(f=0;f<y;f++)q=m+2+f,g=m+2+(f+1)%y,p[e]=q,p[e+1]=g,p[e+2]=m,e+=3,p[e]=q,p[e+1]=g,p[e+2]=m+1,e+=3;b.faceidx+=\n6*y}};var q={cache:{},getVerticesForRadius:function(b){if("undefined"!==typeof this.cache[b])return this.cache[b];var c={vertices:[],verticesRows:[],normals:[]},d=16,e=10;1>b&&(d=10,e=8);var g=2*Math.PI,h=Math.PI,n,y;for(y=0;y<=e;y++){var m=[];for(n=0;n<=d;n++){var x=n/d,u=y/e,f={};f.x=-b*Math.cos(0+x*g)*Math.sin(0+u*h);f.y=b*Math.cos(0+u*h);f.z=b*Math.sin(0+x*g)*Math.sin(0+u*h);x=new $3Dmol.Vector3(f.x,f.y,f.z);x.normalize();c.vertices.push(f);c.normals.push(x);m.push(c.vertices.length-1)}c.verticesRows.push(m)}return this.cache[b]=\nc}};b.drawSphere=function(b,c,d,e){new $3Dmol.Vector3(c.x,c.y,c.z);var g=q.getVerticesForRadius(d),h=g.vertices,n=g.normals;b=b.updateGeoGroup(h.length);for(var y=b.vertices,m=b.vertexArray,x=b.colorArray,u=b.faceArray,f=b.lineArray,l=b.normalArray,p=0,w=h.length;p<w;++p){var t=3*(y+p),z=h[p];m[t]=z.x+c.x;m[t+1]=z.y+c.y;m[t+2]=z.z+c.z;x[t]=e.r;x[t+1]=e.g;x[t+2]=e.b}b.vertices+=h.length;g=g.verticesRows;m=g.length-1;for(e=0;e<m;e++)for(x=g[e].length-1,c=0;c<x;c++){p=b.faceidx;w=b.lineidx;t=g[e][c+\n1]+y;z=3*t;var A=g[e][c]+y,D=3*A,G=g[e+1][c]+y,L=3*G,K=g[e+1][c+1]+y,F=3*K,Q=n[t-y],I=n[A-y],N=n[G-y],E=n[K-y];Math.abs(h[t-y].y)===d?(l[z]=Q.x,l[L]=N.x,l[F]=E.x,l[z+1]=Q.y,l[L+1]=N.y,l[F+1]=E.y,l[z+2]=Q.z,l[L+2]=N.z,l[F+2]=E.z,u[p]=t,u[p+1]=G,u[p+2]=K,f[w]=t,f[w+1]=G,f[w+2]=t,f[w+3]=K,f[w+4]=G,f[w+5]=K,b.faceidx+=3,b.lineidx+=6):Math.abs(h[G-y].y)===d?(l[z]=Q.x,l[D]=I.x,l[L]=N.x,l[z+1]=Q.y,l[D+1]=I.y,l[L+1]=N.y,l[z+2]=Q.z,l[D+2]=I.z,l[L+2]=N.z,u[p]=t,u[p+1]=A,u[p+2]=G,f[w]=t,f[w+1]=A,f[w+2]=t,f[w+\n3]=G,f[w+4]=A,f[w+5]=G,b.faceidx+=3,b.lineidx+=6):(l[z]=Q.x,l[D]=I.x,l[F]=E.x,l[z+1]=Q.y,l[D+1]=I.y,l[F+1]=E.y,l[z+2]=Q.z,l[D+2]=I.z,l[F+2]=E.z,l[D]=I.x,l[L]=N.x,l[F]=E.x,l[D+1]=I.y,l[L+1]=N.y,l[F+1]=E.y,l[D+2]=I.z,l[L+2]=N.z,l[F+2]=E.z,u[p]=t,u[p+1]=A,u[p+2]=K,u[p+3]=A,u[p+4]=G,u[p+5]=K,f[w]=t,f[w+1]=A,f[w+2]=t,f[w+3]=K,f[w+4]=A,f[w+5]=G,f[w+6]=G,f[w+7]=K,b.faceidx+=6,b.lineidx+=8)}};return b}();$3Dmol=$3Dmol||{};\n$3Dmol.GLModel=function(){function b(e,f){var q=[],l=[],t=null,p=null,w=!1,g=null,h=null,n=null,y={},m=new $3Dmol.Matrix4,x=!0,u=$3Dmol.elementColors.defaultColor;f=f?f:{};var M=f.defaultcolors?f.defaultcolors:$3Dmol.elementColors.defaultColors,O=f.defaultSphereRadius?f.defaultSphereRadius:1.5,B=f.cartoonQuality?f.cartoonQuality:5,S=function(b,c){var n=O;"undefined"!=typeof c.radius?n=c.radius:d[b.elem]&&(n=d[b.elem]);"undefined"!=typeof c.scale&&(n*=c.scale);return n},H=function(b,c,d){var n=function(b,\nc){for(var d=null,n=-1,y=0,l=b.bonds.length;y<l;y++)if(b.bonds[y]!=c.index){g=b.bonds[y];x=q[g];u=new $3Dmol.Vector3(x.x,x.y,x.z);f=u.clone();f.sub(h);m=f.clone();m.cross(e);var E=m.lengthSq();if(E>n&&(n=E,d=m,.1<n))break}return d},h=new $3Dmol.Vector3(b.x,b.y,b.z),e=(new $3Dmol.Vector3(c.x,c.y,c.z)).clone(),m=null;e.sub(h);if(1===b.bonds.length)if(1===c.bonds.length)m=e.clone(),1E-4<Math.abs(m.x)?m.y+=1:m.x+=1;else{b=(d+1)%c.bonds.length;var g=c.bonds[b];var x=q[g];var u=new $3Dmol.Vector3(x.x,x.y,\nx.z);var f=u.clone();f.sub(h);m=f.clone();m.cross(e)}else m=n(b,c),.01>m.lengthSq()&&(c=n(c,b),null!=c&&(m=c));.01>m.lengthSq()&&(m=e.clone(),1E-4<Math.abs(m.x)?m.y+=1:m.x+=1);m.cross(e);m.normalize();return m},z=function(b,c,d,n,h,e){b[d]=n.x;b[d+1]=n.y;b[d+2]=n.z;c[d]=e.r;c[d+1]=e.g;c[d+2]=e.b;b[d+3]=h.x;b[d+4]=h.y;b[d+5]=h.z;c[d+3]=e.r;c[d+4]=e.g;c[d+5]=e.b},A=function(b,c){if(b.style.sphere){var d=b.style.sphere;if(!d.hidden){var n=$3Dmol.getColorFromStyle(b,d);d=S(b,d);if((!0===b.clickable||\nb.hoverable)&&void 0!==b.intersectionShape){var h=new $3Dmol.Vector3(b.x,b.y,b.z);b.intersectionShape.sphere.push(new $3Dmol.Sphere(h,d))}$3Dmol.GLDraw.drawSphere(c,b,d,n)}}},D=function(b,c){if(b.style.sphere){var d=b.style.sphere;if(!d.hidden){var n=S(b,d);d=$3Dmol.getColorFromStyle(b,d);c=c.updateGeoGroup(1);var h=c.vertices,e=3*h,m=c.vertexArray,g=c.radiusArray;m[e]=b.x;m[e+1]=b.y;m[e+2]=b.z;m=c.colorArray;m[e]=d.r;m[e+1]=d.g;m[e+2]=d.b;g[h]=n;!0!==b.clickable&&!b.hoverable||void 0===b.intersectionShape||\n(d=new $3Dmol.Vector3(b.x,b.y,b.z),b.intersectionShape.sphere.push(new $3Dmol.Sphere(d,n)));c.vertices+=1}}},G=function(b,c,d,n){b=b.updateGeoGroup(4);for(var h=b.vertices,e=3*h,m=b.vertexArray,g=0;4>g;g++)m[e+3*g]=c.x,m[e+3*g+1]=c.y,m[e+3*g+2]=c.z;m=b.normalArray;c=b.colorArray;for(g=0;4>g;g++)c[e+3*g]=n.r,c[e+3*g+1]=n.g,c[e+3*g+2]=n.b;m[e+0]=-d;m[e+1]=d;m[e+2]=0;m[e+3]=-d;m[e+4]=-d;m[e+5]=0;m[e+6]=d;m[e+7]=-d;m[e+8]=0;m[e+9]=d;m[e+10]=d;m[e+11]=0;b.vertices+=4;d=b.faceArray;n=b.faceidx;d[n+0]=h;\nd[n+1]=h+1;d[n+2]=h+2;d[n+3]=h+2;d[n+4]=h+3;d[n+5]=h;b.faceidx+=6},L=function(b,c){if(b.style.sphere){var d=b.style.sphere;if(!d.hidden){var n=S(b,d);d=$3Dmol.getColorFromStyle(b,d);if((!0===b.clickable||b.hoverable)&&void 0!==b.intersectionShape){var h=new $3Dmol.Vector3(b.x,b.y,b.z);b.intersectionShape.sphere.push(new $3Dmol.Sphere(h,n))}G(c,b,n,d)}}},K=function(b,c,d,n,h,e,m){b=b.updateGeoGroup(4);e=b.vertices;m=b.vertexArray;var g=b.colorArray,x=b.radiusArray,f=b.normalArray,u=h.r,y=h.g;h=h.b;\nfor(var l=3*e,p=0;4>p;p++){m[l]=c.x;f[l]=d.x;g[l]=u;l++;m[l]=c.y;f[l]=d.y;g[l]=y;l++;m[l]=c.z;f[l]=d.z;if(2>p)g[l]=h;else{var E=l,q=-h;0==q&&(q=-1E-4);g[E]=q}l++}b.vertices+=4;x[e]=-n;x[e+1]=n;x[e+2]=-n;x[e+3]=n;c=b.faceArray;d=b.faceidx;c[d+0]=e;c[d+1]=e+1;c[d+2]=e+2;c[d+3]=e+2;c[d+4]=e+3;c[d+5]=e;b.faceidx+=6};this.getCrystData=function(){return y.cryst?y.cryst:null};this.getSymmetries=function(){"undefined"==typeof y.symmetries&&(y.symmetries=[m]);return y.symmetries};this.setSymmetries=function(b){y.symmetries=\n"undefined"==typeof b?[m]:b};this.getID=function(){return e};this.getNumFrames=function(){return void 0!=l.numFrames?l.numFrames:l.length};var F=function(b,c,d,n){b=c-b;return b<-d?c+n:b>d?c-n:c};this.setFrame=function(b){var c=this.getNumFrames();return new Promise(function(d,n){0==c&&d();if(0>b||b>=c)b=c-1;void 0!=l.url?$3Dmol.getbin(l.url+"/traj/frame/"+b+"/"+l.path,null,"POST").then(function(b){b=new Float32Array(b,44);for(var c=0,n=0;n<q.length;n++)q[n].x=b[c++],q[n].y=b[c++],q[n].z=b[c++];if(t&&\np&&t&&p){b=t[0];c=t[1];n=t[2];for(var h=.9*b,e=.9*c,m=.9*n,g=0;g<p.length;g++)for(var x=p[g],f=1;f<x.length;f++){var u=q[x[f][0]],y=q[x[f][1]];u.x=F(y.x,u.x,h,b);u.y=F(y.y,u.y,e,c);u.z=F(y.z,u.z,m,n)}}d()}).catch(n):(q=l[b],d());g=null})};this.addFrame=function(b){l.push(b)};this.vibrate=function(b,c){c=c||1;b=b||10;b--;for(var d=1;d<=b;d++){for(var n=[],h=0;h<q.length;h++){var e=new $3Dmol.Vector3($3Dmol.getAtomProperty(q[h],"dx"),$3Dmol.getAtomProperty(q[h],"dy"),$3Dmol.getAtomProperty(q[h],"dz")),\nm=new $3Dmol.Vector3(q[h].x,q[h].y,q[h].z);e.multiplyScalar(d*c/b);m.add(e);e={};for(var g in q[h])e[g]=q[h][g];e.x=m.x;e.y=m.y;e.z=m.z;n.push(e)}l.push(n)}l.unshift(q)};this.setAtomDefaults=function(b){for(var d=0;d<b.length;d++){var n=b[d];n&&(n.style=n.style||c,n.color=n.color||M[n.elem]||u,n.model=e,n.clickable||n.hoverable)&&(n.intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]})}};this.addMolData=function(b,c,d){d=d||{};b=$3Dmol.GLModel.parseMolData(b,c,d);x=!d.duplicateAssemblyAtoms;\n(c=b.modelData)&&(y=Array.isArray(c)?c[0]:c);t=b.box?b.box:null;if(0==l.length){for(c=0;c<b.length;c++)0!=b[c].length&&l.push(b[c]);l[0]&&(q=l[0])}else if(d.frames)for(c=0;c<b.length;c++)l.push(b[c]);else for(c=0;c<b.length;c++)this.addAtoms(b[c]);for(c=0;c<l.length;c++)this.setAtomDefaults(l[c],e);d.vibrate&&d.vibrate.frames&&d.vibrate.amplitude&&this.vibrate(d.vibrate.frames,d.vibrate.amplitude);d.style&&this.setStyle({},d.style)};this.setDontDuplicateAtoms=function(b){x=b};this.setModelData=function(b){y=\nb};var Q=function(b,c){if(b==c)return!0;if("string"==typeof c&&"number"==typeof b&&(c=c.match(/(-?\\d+)\\s*-\\s*(-?\\d+)/))){var d=parseInt(c[1]),n=parseInt(c[2]);if(c&&b>=d&&b<=n)return!0}return!1};this.atomIsSelected=function(b,c){var d;if("undefined"===typeof c)return!0;var n=!!c.invert,h=!0,e;for(e in c)if("and"==e||"or"==e||"not"==e)if("not"==e){if(this.atomIsSelected(b,c[e])){h=!1;break}}else if("and"==e){var m=c[e];for(d=0;d<m.length;d++)if(!this.atomIsSelected(b,m[d])){h=!1;break}}else{if("or"==\ne){h=c[e];m=!0;for(d=0;d<h.length;d++)if(this.atomIsSelected(b,h[d])){m=!0;break}else m=!1;h=m}}else if("predicate"===e){if(!c.predicate(b)){h=!1;break}}else if("properties"==e&&b[e])for(var g in c.properties){if("undefined"===typeof b.properties[g]){h=!1;break}if(b.properties[g]!=c.properties[g]){h=!1;break}}else if(c.hasOwnProperty(e)&&"props"!=e&&"invert"!=e&&"model"!=e&&"byres"!=e&&"expand"!=e&&"within"!=e&&"and"!=e&&"or"!=e&&"not"!=e){if("undefined"===typeof b[e]){h=!1;break}m=!1;if("bonds"===\ne){if(d=c[e],d!=b.bonds.length){h=!1;break}}else if($.isArray(c[e])){var x=c[e],f=b[e];for(d=0;d<x.length;d++)if(Q(f,x[d])){m=!0;break}if(!m){h=!1;break}}else if(d=c[e],!Q(b[e],d)){h=!1;break}}return n?!h:h};this.selectedAtoms=function(b,c){var d,n=[];b=b||{};c||(c=q);for(var h=c.length,e=0;e<h;e++)(d=c[e])&&this.atomIsSelected(d,b)&&n.push(d);if(b.hasOwnProperty("expand")){h=parseFloat(b.expand);if(0>=h)h=n;else{e=$3Dmol.getExtent(n);d=[[],[],[]];for(c=0;3>c;c++)d[0][c]=e[0][c]-h,d[1][c]=e[1][c]+\nh,d[2][c]=e[2][c];h=[];for(c=0;c<q.length;c++){var m=q[c].x,g=q[c].y,x=q[c].z;m>=d[0][0]&&m<=d[1][0]&&g>=d[0][1]&&g<=d[1][1]&&x>=d[0][2]&&x<=d[1][2]&&(m>=e[0][0]&&m<=e[1][0]&&g>=e[0][1]&&g<=e[1][1]&&x>=e[0][2]&&x<=e[1][2]||h.push(q[c]))}}m=n.length;for(e=0;e<h.length;e++)for(var f=0;f<m;f++)c=I(h[e],n[f]),d=Math.pow(b.expand,2),c<d&&0<c&&n.push(h[e])}if(b.hasOwnProperty("within")&&b.within.hasOwnProperty("sel")&&b.within.hasOwnProperty("distance")){m=this.selectedAtoms(b.within.sel,q);h={};for(e=\n0;e<m.length;e++)for(f=0;f<n.length;f++)c=I(m[e],n[f]),d=Math.pow(parseFloat(b.within.distance),2),c<d&&0<c&&(h[f]=1);e=[];if(b.within.invert)for(f=0;f<n.length;f++)h[f]||e.push(n[f]);else for(f in h)e.push(n[f]);n=e}if(b.hasOwnProperty("byres"))for(b={},c=[],h=[],e=0;e<n.length;e++)if(d=n[e],m=d.chain,g=d.resi,void 0===b[m]&&(b[m]={}),d.hasOwnProperty("resi")&&void 0===b[m][g])for(b[m][g]=!0,h.push(d);0<h.length;)if(d=h.pop(),m=d.chain,g=d.resi,void 0===c[d.index])for(c[d.index]=!0,f=0;f<d.bonds.length;f++)x=\nq[d.bonds[f]],void 0===c[x.index]&&x.hasOwnProperty("resi")&&x.chain==m&&x.resi==g&&(h.push(x),n.push(x));return n};var I=function(b,c){return Math.pow(c.x-b.x,2)+Math.pow(c.y-b.y,2)+Math.pow(c.z-b.z,2)};this.addAtoms=function(b){g=null;var d=q.length,n=[],h;for(h=0;h<b.length;h++)"undefined"==typeof b[h].index&&(b[h].index=h),"undefined"==typeof b[h].serial&&(b[h].serial=h),n[b[h].index]=d+h;for(h=0;h<b.length;h++){d=b[h];var m=n[d.index],x=$.extend(!1,{},d);x.index=m;x.bonds=[];x.bondOrder=[];x.model=\ne;x.style=x.style||c;"undefined"==typeof x.color&&(x.color=M[x.elem]||u);m=d.bonds?d.bonds.length:0;for(var f=0;f<m;f++){var y=n[d.bonds[f]];"undefined"!=typeof y&&(x.bonds.push(y),x.bondOrder.push(d.bondOrder?d.bondOrder[f]:1))}q.push(x)}};this.removeAtoms=function(b){g=null;var c=[],d;for(d=0;d<b.length;d++)c[b[d].index]=!0;b=[];for(d=0;d<q.length;d++){var n=q[d];c[n.index]||b.push(n)}q=[];this.addAtoms(b)};this.setStyle=function(c,d,n){"undefined"===typeof d&&"undefined"==typeof n&&(d=c,c={});\nfor(var h in c)b.validAtomSelectionSpecs.hasOwnProperty(h)||console.log("Unknown selector "+h);for(h in d)b.validAtomStyleSpecs.hasOwnProperty(h)||console.log("Unknown style "+h);var e=!1,m=function(b){for(var m=x.selectedAtoms(c,b),g=0;g<b.length;g++)b[g]&&(b[g].capDrawn=!1);for(g=0;g<m.length;g++){e=!0;if(m[g].clickable||m[g].hoverable)m[g].intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]};n||(m[g].style={});for(h in d)if(d.hasOwnProperty(h)){m[g].style[h]=m[g].style[h]||{};for(var f in d[h])m[g].style[h][f]=\nd[h][f]}}},x=this;m(q);for(var f=0;f<l.length;f++)l[f]!==q&&m(l[f]);e&&(g=null)};this.setClickable=function(c,d,n){for(var h in c)b.validAtomSelectionSpecs.hasOwnProperty(h)||console.log("Unknown selector "+h);d=!!d;if(n&&"function"!=typeof n)console.log("Callback is not a function");else{h=this.selectedAtoms(c,q);var e=h.length;for(c=0;c<e;c++)h[c].intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]},h[c].clickable=d,n&&(h[c].callback=n);0<e&&(g=null)}};this.setHoverable=function(c,d,n,\nh){for(var e in c)b.validAtomSelectionSpecs.hasOwnProperty(e)||console.log("Unknown selector "+e);d=!!d;if(n&&"function"!=typeof n)console.log("Hover_callback is not a function");else if(h&&"function"!=typeof h)console.log("Unhover_callback is not a function");else{e=this.selectedAtoms(c,q);var m=e.length;for(c=0;c<m;c++)e[c].intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]},e[c].hoverable=d,n&&(e[c].hover_callback=n),h&&(e[c].unhover_callback=h);0<m&&(g=null)}};this.setColorByElement=\nfunction(b,c){var d;if(d=null!==g)d=n,d=c&&d?JSON.stringify(c)==JSON.stringify(d):c==d;if(!d){n=c;var h=this.selectedAtoms(b,h);0<h.length&&(g=null);for(b=0;b<h.length;b++)d=h[b],"undefined"!==typeof c[d.elem]&&(d.color=c[d.elem])}};this.setColorByProperty=function(b,c,d,h){var e=this.selectedAtoms(b,e);n=null;0<e.length&&(g=null);"undefined"!=typeof $3Dmol.Gradient.builtinGradients[d]&&(d=new $3Dmol.Gradient.builtinGradients[d]);h||(h=d.range());h||(h=$3Dmol.getPropertyRange(e,c));for(b=0;b<e.length;b++){var m=\ne[b];null!=$3Dmol.getAtomProperty(m,c)&&(m.color=d.valueToHex(parseFloat(m.properties[c]),h))}};this.setColorByFunction=function(b,c){var d=this.selectedAtoms(b,d);if("function"===typeof c)for(n=null,0<d.length&&(g=null),i=0;i<d.length;i++)a=d[i],a.color=c(a)};this.toCDObject=function(b){var c={a:[],b:[]};b&&(c.s=[]);for(var d=0;d<q.length;d++){var n={},h=q[d];n.x=h.x;n.y=h.y;n.z=h.z;"C"!=h.elem&&(n.l=h.elem);if(b){for(var e=0;e<c.s.length&&JSON.stringify(h.style)!==JSON.stringify(c.s[e]);)e++;e===\nc.s.length&&c.s.push(h.style);0!==e&&(n.s=e)}c.a.push(n);for(n=0;n<h.bonds.length;n++){e=d;var m=h.bonds[n];e>=m||(e={b:e,e:m},m=h.bondOrder[n],1!=m&&(e.o=m),c.b.push(e))}}return c};this.globj=function(b,c){if(null===g){var d=q,n=c;n=n||{};var e=new $3Dmol.Object3D,m=[],f={},u={},l=A;if(n.supportsImposters){l=L;var p=new $3Dmol.Geometry(!0);p.imposter=!0;var M=new $3Dmol.Geometry(!0,!0);M.imposter=!0;M.sphereGeometry=new $3Dmol.Geometry(!0);M.sphereGeometry.imposter=!0;M.drawnCaps={}}else n.supportsAIA?\n(l=D,p=new $3Dmol.Geometry(!1,!0,!0),p.instanced=!0):p=new $3Dmol.Geometry(!0),M=new $3Dmol.Geometry(!0);var t,E,O={},F=[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY];var J=0;for(E=d.length;J<E;J++){var I=d[J];if(I&&I.style){(I.clickable||I.hoverable)&&void 0===I.intersectionShape&&(I.intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]});var N={line:void 0,cross:void 0,stick:void 0,sphere:void 0};for(t in N)N[t]=I.style[t]?I.style[t].opacity?parseFloat(I.style[t].opacity):1:void 0,O[t]?\nvoid 0!=N[t]&&O[t]!=N[t]&&(console.log("Warning: "+t+" opacity is ambiguous"),O[t]=1):O[t]=N[t];l(I,p);var Q=I,Ta=u;if(Q.style.cross){var la=Q.style.cross;if(!la.hidden){var Ba=la.linewidth||1;Ta[Ba]||(Ta[Ba]=new $3Dmol.Geometry);var xa=Ta[Ba].updateGeoGroup(6),Ua=S(Q,la),ya=[[Ua,0,0],[-Ua,0,0],[0,Ua,0],[0,-Ua,0],[0,0,Ua],[0,0,-Ua]],ea=Q.clickable||Q.hoverable;ea&&void 0===Q.intersectionShape&&(Q.intersectionShape={sphere:[],cylinder:[],line:[]});for(var Za=$3Dmol.getColorFromStyle(Q,la),mb=xa.vertexArray,\nfb=xa.colorArray,za=0;6>za;za++){var $a=3*xa.vertices;xa.vertices++;mb[$a]=Q.x+ya[za][0];mb[$a+1]=Q.y+ya[za][1];mb[$a+2]=Q.z+ya[za][2];fb[$a]=Za.r;fb[$a+1]=Za.g;fb[$a+2]=Za.b;if(ea){var Wa=new $3Dmol.Vector3(ya[za][0],ya[za][1],ya[za][2]);Wa.multiplyScalar(.1);Wa.set(Wa.x+Q.x,Wa.y+Q.y,Wa.z+Q.z);Q.intersectionShape.line.push(Wa)}}}}var Ea=void 0,Ia=void 0,Ja=void 0,Ka=void 0,Xa=void 0,ab=void 0,ia=I,xb=d,nb=f;if(ia.style.line){var kb=ia.style.line;if(!kb.hidden){var Na=kb.linewidth||1;nb[Na]||(nb[Na]=\nnew $3Dmol.Geometry);for(var ta=nb[Na].updateGeoGroup(6*ia.bonds.length),oa=ta.vertexArray,qa=ta.colorArray,Oa=0;Oa<ia.bonds.length;Oa++){var ua=xb[ia.bonds[Oa]];if(ua.style.line&&!(ia.serial>=ua.serial)){var La=new $3Dmol.Vector3(ia.x,ia.y,ia.z),Pa=new $3Dmol.Vector3(ua.x,ua.y,ua.z),ob=La.clone().add(Pa).multiplyScalar(.5),Ob=!1,Pb=ia.clickable||ia.hoverable,Qb=ua.clickable||ua.hoverable;if(Pb||Qb)Pb&&(void 0===ia.intersectionShape&&(ia.intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]}),\nia.intersectionShape.line.push(La),ia.intersectionShape.line.push(ob)),Qb&&(void 0===ua.intersectionShape&&(ua.intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]}),ua.intersectionShape.line.push(ob),ua.intersectionShape.line.push(Pa));var Ca=$3Dmol.getColorFromStyle(ia,ia.style.line),bb=$3Dmol.getColorFromStyle(ua,ua.style.line);if(ia.bondStyles&&ia.bondStyles[Oa]){var lb=ia.bondStyles[Oa];if(!lb.iswire)continue;lb.radius&&(bondR=lb.radius);lb.singleBond&&(Ob=!0);"undefined"!=typeof lb.color1&&\n(Ca=$3Dmol.CC.color(lb.color1));"undefined"!=typeof lb.color2&&(bb=$3Dmol.CC.color(lb.color2))}var va=3*ta.vertices;if(1<ia.bondOrder[Oa]&&4>ia.bondOrder[Oa]&&!Ob){var pb=H(ia,ua,Oa),Ya=Pa.clone();Ya.sub(La);2==ia.bondOrder[Oa]?(pb.multiplyScalar(.1),Ka=La.clone(),Ka.add(pb),Ja=La.clone(),Ja.sub(pb),Ia=Ka.clone(),Ia.add(Ya),Ea=Ja.clone(),Ea.add(Ya),Ca==bb?(ta.vertices+=4,z(oa,qa,va,Ka,Ia,Ca),z(oa,qa,va+6,Ja,Ea,Ca)):(ta.vertices+=8,Ya.multiplyScalar(.5),Xa=Ka.clone(),Xa.add(Ya),ab=Ja.clone(),ab.add(Ya),\nz(oa,qa,va,Ka,Xa,Ca),z(oa,qa,va+6,Xa,Ia,bb),z(oa,qa,va+12,Ja,ab,Ca),z(oa,qa,va+18,ab,Ea,bb))):3==ia.bondOrder[Oa]&&(pb.multiplyScalar(.1),Ka=La.clone(),Ka.add(pb),Ja=La.clone(),Ja.sub(pb),Ia=Ka.clone(),Ia.add(Ya),Ea=Ja.clone(),Ea.add(Ya),Ca==bb?(ta.vertices+=6,z(oa,qa,va,La,Pa,Ca),z(oa,qa,va+6,Ka,Ia,Ca),z(oa,qa,va+12,Ja,Ea,Ca)):(ta.vertices+=12,Ya.multiplyScalar(.5),Xa=Ka.clone(),Xa.add(Ya),ab=Ja.clone(),ab.add(Ya),z(oa,qa,va,La,ob,Ca),z(oa,qa,va+6,ob,Pa,bb),z(oa,qa,va+12,Ka,Xa,Ca),z(oa,qa,va+18,\nXa,Ia,bb),z(oa,qa,va+24,Ja,ab,Ca),z(oa,qa,va+30,ab,Ea,bb)))}else Ca==bb?(ta.vertices+=2,z(oa,qa,va,La,Pa,Ca)):(ta.vertices+=4,z(oa,qa,va,La,ob,Ca),z(oa,qa,va+6,ob,Pa,bb))}}}}var Ma=void 0,pa=void 0,Fa=void 0,fa=void 0,cb=void 0,gb=void 0,hb=void 0,yb=void 0,zb=void 0,Ab=void 0,Bb=void 0,qb=void 0,Qa=void 0,ba=I,Ub=d,na=M;if(ba.style.stick){var Cb=ba.style.stick;if(!Cb.hidden){var Db=Cb.radius||.25,Rb=Cb.singleBonds||!1,sb=0,tb=0,wa=$3Dmol.getColorFromStyle(ba,Cb);!ba.capDrawn&&4>ba.bonds.length&&\n(sb=2);var sa=$3Dmol.GLDraw.drawCylinder;na.imposter&&(sa=K);for(var Aa=0;Aa<ba.bonds.length;Aa++){var ka=Ub[ba.bonds[Aa]];if(ba.serial<ka.serial){var Hb=ka.style;if(Hb.stick&&!Hb.stick.hidden){var db=$3Dmol.getColorFromStyle(ka,Hb.stick);Fa=Db;qb=Rb;if(ba.bondStyles&&ba.bondStyles[Aa]){Qa=ba.bondStyles[Aa];if(Qa.iswire)continue;Qa.radius&&(Fa=Qa.radius);Qa.singleBond&&(qb=!0);"undefined"!=typeof Qa.color1&&(wa=$3Dmol.CC.color(Qa.color1));"undefined"!=typeof Qa.color2&&(db=$3Dmol.CC.color(Qa.color2))}var Da=\nnew $3Dmol.Vector3(ba.x,ba.y,ba.z),Va=new $3Dmol.Vector3(ka.x,ka.y,ka.z);if(1===ba.bondOrder[Aa]||qb){if(!ka.capDrawn&&4>ka.bonds.length&&(tb=2),wa!=db?(pa=(new $3Dmol.Vector3).addVectors(Da,Va).multiplyScalar(.5),sa(na,Da,pa,Fa,wa,sb,0),sa(na,pa,Va,Fa,db,0,tb)):sa(na,Da,Va,Fa,wa,sb,tb),gb=ba.clickable||ba.hoverable,hb=ka.clickable||ka.hoverable,gb||hb){pa||(pa=(new $3Dmol.Vector3).addVectors(Da,Va).multiplyScalar(.5));if(gb){var Vb=new $3Dmol.Cylinder(Da,pa,Fa),Wb=new $3Dmol.Sphere(Da,Fa);ba.intersectionShape.cylinder.push(Vb);\nba.intersectionShape.sphere.push(Wb)}if(hb){var Xb=new $3Dmol.Cylinder(Va,pa,Fa),Yb=new $3Dmol.Sphere(Va,Fa);ka.intersectionShape.cylinder.push(Xb);ka.intersectionShape.sphere.push(Yb)}}}else if(1<ba.bondOrder[Aa]){var ib=0,jb=0;Fa!=Db&&(jb=ib=2);var rb=Va.clone();rb.sub(Da);cb=H(ba,ka,Aa);if(2==ba.bondOrder[Aa]){fa=Fa/2.5;cb=H(ba,ka,Aa);cb.multiplyScalar(1.5*fa);var Ga=Da.clone();Ga.add(cb);var Ha=Da.clone();Ha.sub(cb);var Ra=Ga.clone();Ra.add(rb);var Sa=Ha.clone();Sa.add(rb);wa!=db?(pa=(new $3Dmol.Vector3).addVectors(Ga,\nRa).multiplyScalar(.5),Ma=(new $3Dmol.Vector3).addVectors(Ha,Sa).multiplyScalar(.5),sa(na,Ga,pa,fa,wa,ib,0),sa(na,pa,Ra,fa,db,0,jb),sa(na,Ha,Ma,fa,wa,ib,0),sa(na,Ma,Sa,fa,db,0,jb)):(sa(na,Ga,Ra,fa,wa,ib,jb),sa(na,Ha,Sa,fa,wa,ib,jb));gb=ba.clickable||ba.hoverable;hb=ka.clickable||ka.hoverable;if(gb||hb)pa||(pa=(new $3Dmol.Vector3).addVectors(Ga,Ra).multiplyScalar(.5)),Ma||(Ma=(new $3Dmol.Vector3).addVectors(Ha,Sa).multiplyScalar(.5)),gb&&(yb=new $3Dmol.Cylinder(Ga,pa,fa),zb=new $3Dmol.Cylinder(Ha,\nMa,fa),ba.intersectionShape.cylinder.push(yb),ba.intersectionShape.cylinder.push(zb)),hb&&(Ab=new $3Dmol.Cylinder(Ra,pa,fa),Bb=new $3Dmol.Cylinder(Sa,Ma,fa),ka.intersectionShape.cylinder.push(Ab),ka.intersectionShape.cylinder.push(Bb))}else if(3==ba.bondOrder[Aa]&&(fa=Fa/4,cb.cross(rb),cb.normalize(),cb.multiplyScalar(3*fa),Ga=Da.clone(),Ga.add(cb),Ha=Da.clone(),Ha.sub(cb),Ra=Ga.clone(),Ra.add(rb),Sa=Ha.clone(),Sa.add(rb),wa!=db?(pa=(new $3Dmol.Vector3).addVectors(Ga,Ra).multiplyScalar(.5),Ma=(new $3Dmol.Vector3).addVectors(Ha,\nSa).multiplyScalar(.5),mp3=(new $3Dmol.Vector3).addVectors(Da,Va).multiplyScalar(.5),sa(na,Ga,pa,fa,wa,ib,0),sa(na,pa,Ra,fa,db,0,jb),sa(na,Da,mp3,fa,wa,sb,0),sa(na,mp3,Va,fa,db,0,tb),sa(na,Ha,Ma,fa,wa,ib,0),sa(na,Ma,Sa,fa,db,0,jb)):(sa(na,Ga,Ra,fa,wa,ib,jb),sa(na,Da,Va,fa,wa,sb,tb),sa(na,Ha,Sa,fa,wa,ib,jb)),gb=ba.clickable||ba.hoverable,hb=ka.clickable||ka.hoverable,gb||hb)){pa||(pa=(new $3Dmol.Vector3).addVectors(Ga,Ra).multiplyScalar(.5));Ma||(Ma=(new $3Dmol.Vector3).addVectors(Ha,Sa).multiplyScalar(.5));\nmp3||(mp3=(new $3Dmol.Vector3).addVectors(Da,Va).multiplyScalar(.5));if(gb){yb=new $3Dmol.Cylinder(Ga.clone(),pa.clone(),fa);zb=new $3Dmol.Cylinder(Ha.clone(),Ma.clone(),fa);var Zb=new $3Dmol.Cylinder(Da.clone(),mp3.clone(),fa);ba.intersectionShape.cylinder.push(yb);ba.intersectionShape.cylinder.push(zb);ba.intersectionShape.cylinder.push(Zb)}if(hb){Ab=new $3Dmol.Cylinder(Ra.clone(),pa.clone(),fa);Bb=new $3Dmol.Cylinder(Sa.clone(),Ma.clone(),fa);var $b=new $3Dmol.Cylinder(Va.clone(),mp3.clone(),fa);\nka.intersectionShape.cylinder.push(Ab);ka.intersectionShape.cylinder.push(Bb);ka.intersectionShape.cylinder.push($b)}}}}}}var Ib=!1,Jb=0,Sb=!1;for(Aa=0;Aa<ba.bonds.length;Aa++)qb=Rb,ba.bondStyles&&ba.bondStyles[Aa]&&(Qa=ba.bondStyles[Aa],Qa.singleBond&&(qb=!0),Qa.radius&&Qa.radius!=Db&&(Sb=!0)),(qb||1==ba.bondOrder[Aa])&&Jb++;Sb?0<Jb&&(Ib=!0):0==Jb&&0<ba.bonds.length&&(Ib=!0);Ib&&(Fa=Db,na.imposter?G(na.sphereGeometry,ba,Fa,wa):$3Dmol.GLDraw.drawSphere(na,ba,Fa,wa))}}"undefined"===typeof I.style.cartoon||\nI.style.cartoon.hidden||("spectrum"!==I.style.cartoon.color||"number"!==typeof I.resi||I.hetflag||(I.resi<F[0]&&(F[0]=I.resi),I.resi>F[1]&&(F[1]=I.resi)),m.push(I))}}0<m.length&&$3Dmol.drawCartoon(e,m,F,B);if(p&&0<p.vertices){p.initTypedArrays();if(p.imposter)var ub=new $3Dmol.SphereImposterMaterial({ambient:0,vertexColors:!0,reflectivity:0});else if(p.instanced){var vb=new $3Dmol.Geometry(!0);$3Dmol.GLDraw.drawSphere(vb,{x:0,y:0,z:0},1,new $3Dmol.Color(.5,.5,.5));vb.initTypedArrays();ub=new $3Dmol.InstancedMaterial({sphereMaterial:new $3Dmol.MeshLambertMaterial({ambient:0,\nvertexColors:!0,reflectivity:0}),sphere:vb})}else ub=new $3Dmol.MeshLambertMaterial({ambient:0,vertexColors:!0,reflectivity:0});1>O.sphere&&0<=O.sphere&&(ub.transparent=!0,ub.opacity=O.sphere);vb=new $3Dmol.Mesh(p,ub);e.add(vb)}if(0<M.vertices){var eb=M.sphereGeometry;eb&&"undefined"!==typeof eb.vertices&&0!=eb.vertices||(eb=null);M.initTypedArrays();eb&&eb.initTypedArrays();var Eb={ambient:0,vertexColors:!0,reflectivity:0};if(M.imposter){var wb=new $3Dmol.StickImposterMaterial(Eb);var Fb=new $3Dmol.SphereImposterMaterial(Eb)}else wb=\nnew $3Dmol.MeshLambertMaterial(Eb),Fb=new $3Dmol.MeshLambertMaterial(Eb),wb.wireframe&&(M.setUpWireframe(),eb&&eb.setUpWireframe());1>O.stick&&0<=O.stick&&(wb.transparent=!0,wb.opacity=O.stick,Fb.transparent=!0,Fb.opacity=O.stick);var ac=new $3Dmol.Mesh(M,wb);e.add(ac);if(eb){var bc=new $3Dmol.Mesh(eb,Fb);e.add(bc)}}for(J in f)if(f.hasOwnProperty(J)){var Kb=J;var Lb=new $3Dmol.LineBasicMaterial({linewidth:Kb,vertexColors:!0});1>O.line&&0<=O.line&&(Lb.transparent=!0,Lb.opacity=O.line);f[J].initTypedArrays();\nvar cc=new $3Dmol.Line(f[J],Lb,$3Dmol.LinePieces);e.add(cc)}for(J in u)if(u.hasOwnProperty(J)){Kb=J;var Mb=new $3Dmol.LineBasicMaterial({linewidth:Kb,vertexColors:!0});1>O.cross&&0<=O.cross&&(Mb.transparent=!0,Mb.opacity=O.cross);u[J].initTypedArrays();var dc=new $3Dmol.Line(u[J],Mb,$3Dmol.LinePieces);e.add(dc)}if(x&&y.symmetries&&0<y.symmetries.length){var Tb=new $3Dmol.Object3D,Gb;for(Gb=0;Gb<y.symmetries.length;Gb++){new $3Dmol.Object3D;var Nb=e.clone();Nb.matrix.copy(y.symmetries[Gb]);Nb.matrixAutoUpdate=\n!1;Tb.add(Nb)}g=Tb}else g=e;h&&(b.remove(h),h=null);h=g.clone();w&&(h.setVisible(!1),g.setVisible(!1));b.add(h)}};this.removegl=function(b){h&&(void 0!==h.geometry&&h.geometry.dispose(),void 0!==h.material&&h.material.dispose(),b.remove(h),h=null);g=null};this.hide=function(){w=!0;h&&h.setVisible(!1);g&&g.setVisible(!1)};this.show=function(){w=!1;h&&h.setVisible(!0);g&&g.setVisible(!0)};this.addPropertyLabels=function(b,c,d,n){var h=this.selectedAtoms(c,h);c=$.extend(!0,{},n);for(n=0;n<h.length;n++){var e=\nh[n],m=null;"undefined"!=typeof e[b]?m=String(e[b]):typeof("undefined"!=e.properties[b])&&(m=String(e.properties[b]));null!=m&&(c.position=e,d.addLabel(m,c))}};this.addResLabels=function(b,c,d){var n=this.selectedAtoms(b,n);for(var h={},e=0;e<n.length;e++){b=n[e];var m=b.chain;var g=b.resn+""+b.resi;h[m]||(h[m]={});h[m][g]||(h[m][g]=[]);h[m][g].push(b)}d=$.extend(!0,{},d);for(m in h)if(h.hasOwnProperty(m)){var x=h[m];for(g in x)if(x.hasOwnProperty(g)){n=x[g];var f=new $3Dmol.Vector3(0,0,0);for(e=\n0;e<n.length;e++)b=n[e],f.x+=b.x,f.y+=b.y,f.z+=b.z;f.divideScalar(n.length);d.position=f;c.addLabel(g,d)}}};var N=function(){p=[];var b=new Int8Array(q.length);b.fill(0);for(var c=function(d,n,h){h.push([d,n]);n=q[d];b[d]=1;for(var e=0;e<n.bonds.length;e++){var m=n.bonds[e];q[m]&&!b[m]&&c(m,d,h)}},d=0;d<q.length;d++)if(q[d]&&!b[d]){var n=[];c(d,-1,n);p.push(n)}};this.setCoordinatesFromURL=function(b,c){l=[];var d=this;t&&N();return new Promise(function(n,h){b.startsWith("http://")||(b="http://"+b);\n$.get(b+"/traj/numframes/"+c,function(e){isNaN(parseInt(e))||(l.push(q),l.numFrames=e,l.url=b,l.path=c,d.setFrame(0).then(function(){n()}).catch(h))})})};this.setCoordinates=function(c,d){d=d||"";if(!c)return[];if(/\\.gz$/.test(d)){d=d.replace(/\\.gz$/,"");try{c=pako.inflate(c,{to:"string"})}catch(T){console.log(T)}}if({mdcrd:"",inpcrd:"",pdb:"",netcdf:""}.hasOwnProperty(d)){l=[];var n=q.length;c=b.parseCrd(c,d);for(d=0;d<c.length;){for(var h=[],e=0;e<n;e++){var m={},g;for(g in q[e])m[g]=q[e][g];h[e]=\nm;h[e].x=c[d++];h[e].y=c[d++];h[e].z=c[d++]}l.push(h)}q=l[0];return l}return[]};this.addAtomSpecs=function(c){for(var d=0;d<c.length;d++)b.validAtomSelectionSpecs.hasOwnProperty(c[d])&&b.validAtomSelectionSpecs.push(c[d])}}var c={line:{}},d={H:1.2,Li:1.82,LI:1.82,Na:2.27,NA:2.27,K:2.75,C:1.7,N:1.55,O:1.52,F:1.47,P:1.8,S:1.8,CL:1.75,Cl:1.75,BR:1.85,Br:1.85,SE:1.9,Se:1.9,ZN:1.39,Zn:1.39,CU:1.4,Cu:1.4,NI:1.63,Ni:1.63};b.validElements="H Li LI Na NA K C N O F P S CL Cl BR Br SE Se ZN Zn CU Cu NI Ni".split(" ");\nb.validAtomSpecs={resn:{type:"string",valid:!0},x:{type:"number",valid:!1,step:.1},y:{type:"number",valid:!1,step:.1},z:{type:"number",valid:!1,step:.1},color:{type:"color",gui:!0},surfaceColor:{type:"color",gui:!0},elem:{type:"element",gui:!0},hetflag:{type:"boolean",valid:!1},chain:{type:"string",gui:!0},resi:{type:"number",gui:!0},icode:{type:"number",valid:!1,step:.1},rescode:{type:"number",valid:!1,step:.1},serial:{type:"number",valid:!1,step:.1},atom:{type:"string",valid:!1},bonds:{type:"array",\nvalid:!1},ss:{type:"string",valid:!1},singleBonds:{type:"boolean",valid:!1},bondOrder:{type:"array",valid:!1},properties:{type:"properties",valid:!1},b:{type:"number",valid:!1,step:.1},pdbline:{type:"string",valid:!1},clickable:{type:"boolean",valid:!1},callback:{type:"function",valid:!1},invert:{type:"boolean",valid:!1},reflectivity:{type:"number",gui:!0,step:.1},altLoc:{type:"invalid",valid:!1}};b.validAtomSelectionSpecs=function(b,c){for(var d in c)c.hasOwnProperty(d)&&(b[d]=c[d]);return b}(b.validAtomSpecs,\n{model:{type:"string",valid:!1},bonds:{type:"string",valid:!1},predicate:{type:"string",valid:!1},invert:{type:"string",valid:!1},byres:{type:"string",valid:!1},expand:{type:"string",valid:!1},within:{type:"string",valid:!1},and:{type:"string",valid:!1},or:{type:"string",valid:!1},not:{type:"string",valid:!1}});b.validAtomStyleSpecs={line:{validItems:{hidden:{type:"boolean",gui:!0},linewidth:{type:"number",gui:!0,step:.1,default:1},colorscheme:{type:"colorscheme",gui:!0},color:{type:"color",gui:!0}},\ngui:!0},cross:{validItems:{hidden:{type:"boolean",gui:!0},linewidth:{type:"number",gui:!1,step:.1,default:1,min:0},colorscheme:{type:"colorscheme",gui:!0},color:{type:"color",gui:!0},radius:{type:"number",gui:!0,step:.1,default:1,min:.1},scale:{type:"number",gui:!0,step:.1,default:1,min:0}},gui:!0},stick:{validItems:{hidden:{type:"boolean",gui:!0},colorscheme:{type:"colorscheme",gui:!0},color:{type:"color",gui:!0},radius:{type:"number",gui:!0,step:.1,default:.25,min:.1},singleBonds:{type:"boolean",\ngui:!0}},gui:!0},sphere:{validItems:{hidden:{type:"boolean",gui:!0},singleBonds:{type:"boolean",gui:!0},colorscheme:{type:"colorscheme",gui:!0},color:{type:"color",gui:!0},radius:{type:"number",gui:!0,step:.1,default:1.5,min:0}},gui:!0},cartoon:{validItems:{style:{validItems:["trace","oval","rectangle","parabola","edged"],gui:!0},color:{type:"color",gui:!0},arrows:{type:"boolean",gui:!0},ribbon:{type:"boolean",gui:!0},hidden:{type:"boolean",gui:!0},tubes:{type:"boolean",gui:!0},thickness:{type:"number",\ngui:!0,step:.1,default:1,min:0},width:{type:"number",gui:!0,step:.1,default:1,min:0},opacity:{type:"number",gui:!0,step:.1,default:1,min:0,max:1}},gui:!0},colorfunc:{validItems:null,valid:!1}};b.validSurfaceSpecs={opacity:{type:"number",gui:!0,step:.1,default:1,min:0,max:1},colorscheme:{type:"colorscheme",gui:!0},color:{type:"color",gui:!0},voldata:{type:"number",gui:!1},volscheme:{type:"number",gui:!1},map:{type:"number",gui:!1}};b.validLabelResSpecs={font:{type:"string",gui:!0},fontSize:{type:"number",\ngui:!0,step:1,default:12,min:1},fontColor:{type:"color",gui:!0},fontOpacity:{type:"number",gui:!0,step:.1,default:1,min:0,max:1},borderThickness:{type:"number",gui:!0,step:.1,default:1,min:0},borderColor:{type:"color",gui:!0},borderOpacity:{type:"number",gui:!0,step:.1,default:1,min:0,max:1},backgroundColor:{type:"color",gui:!0},backgroundOpacity:{type:"number",gui:!0,step:.1,default:1,min:0,max:1},position:{type:"array",valid:!1},inFront:{type:"boolean",gui:!0},showBackground:{type:"boolean",gui:!0},\nfixed:{type:"boolean",gui:!0},alignment:{validItems:"topLeft topCenter topRight centerLeft center centerRight bottomLeft bottomCenter bottomRight".split(" "),gui:!0},scale:{type:"boolean",gui:!1}};b.parseCrd=function(b,c){var d,e=[],f=0;if("pdb"==c)for(d=b.indexOf("\\nATOM");-1!=d;){for(;"\\nATOM"==b.slice(d,d+5)||"\\nHETATM"==b.slice(d,d+7);)e[f++]=parseFloat(b.slice(d+31,d+39)),e[f++]=parseFloat(b.slice(d+39,d+47)),e[f++]=parseFloat(b.slice(d+47,d+55)),d=b.indexOf("\\n",d+54),"\\nTER"==b.slice(d,d+4)&&\n(d=b.indexOf("\\n",d+5));d=b.indexOf("\\nATOM",d)}else"netcdf"==c?(b=new netcdfjs(b),e=[].concat.apply([],b.getDataVariable("coordinates"))):(d=b.indexOf("\\n"),"inpcrd"==c&&(d=b.indexOf("\\n",d+1)),b=b.slice(d+1),e=b.match(/\\S+/g).map(parseFloat));return e};b.parseMolData=function(b,c,d){c=c||"";if(!b)return[];if(/\\.gz$/.test(c)){c=c.replace(/\\.gz$/,"");try{b=pako.inflate(b,{to:"string"})}catch(l){console.log(l)}}"undefined"==typeof $3Dmol.Parsers[c]&&(c=c.split(".").pop(),"undefined"==typeof $3Dmol.Parsers[c]&&\n(console.log("Unknown format: "+c),c=b instanceof Uint8Array?"mmtf":b.match(/^@<TRIPOS>MOLECULE/gm)?"mol2":b.match(/^HETATM/gm)||b.match(/^ATOM/gm)?"pdb":b.match(/ITEM: TIMESTEP/gm)?"lammpstrj":b.match(/^.*\\n.*\\n.\\s*(\\d+)\\s+(\\d+)/gm)?"sdf":b.match(/^%VERSION\\s+\\VERSION_STAMP/gm)?"prmtop":"xyz",console.log("Best guess: "+c)));return(0,$3Dmol.Parsers[c])(b,d)};b.setAtomDefaults=function(b,d){for(var e=0;e<b.length;e++){var f=b[e];f&&(f.style=f.style||c,f.color=f.color||ElementColors[f.elem]||defaultColor,\nf.model=d,f.clickable||f.hoverable)&&(f.intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]})}};return b}();\n$3Dmol.GLShape=function(){function b(b){b=b||{};$3Dmol.ShapeIDCount++;this.boundingSphere=new $3Dmol.Sphere;this.intersectionShape={sphere:[],cylinder:[],line:[],triangle:[]};f(this,b);var l=[],q=null,p=null,w=new $3Dmol.Geometry(!0),g=new $3Dmol.Geometry(!0);this.updateStyle=function(c){for(var d in c)b[d]=c[d];f(this,b)};this.addCustom=function(b){b.vertexArr=b.vertexArr||[];b.faceArr=b.faceArr||[];b.normalArr=b.normalArr||[];d(this,w,b)};this.addSphere=function(b){b.center=b.center||{x:0,y:0,z:0};\nb.radius=b.radius?$3Dmol.Math.clamp(b.radius,0,Infinity):1.5;b.color=$3Dmol.CC.color(b.color);this.intersectionShape.sphere.push(new $3Dmol.Sphere(b.center,b.radius));$3Dmol.GLDraw.drawSphere(w,b.center,b.radius,b.color);l.push({centroid:new $3Dmol.Vector3(b.center.x,b.center.y,b.center.z)});b=w.updateGeoGroup(0);e(this.boundingSphere,l,b.vertexArray,b.vertices)};this.addBox=function(b){var c=b.dimensions||{w:1,h:1,d:1},h=c.w;"number"==typeof c.w&&(h={x:c.w,y:0,z:0});var m=c.h;"number"==typeof c.h&&\n(m={x:0,y:c.h,z:0});var g=c.d;"number"==typeof c.d&&(g={x:0,y:0,z:c.d});c=b.corner;void 0==c&&(c=void 0!==b.center?{x:b.center.x-.5*(h.x+m.x+g.x),y:b.center.y-.5*(h.y+m.y+g.y),z:b.center.z-.5*(h.z+m.z+g.z)}:{x:0,y:0,z:0});h=[{x:c.x,y:c.y,z:c.z},{x:c.x+h.x,y:c.y+h.y,z:c.z+h.z},{x:c.x+m.x,y:c.y+m.y,z:c.z+m.z},{x:c.x+h.x+m.x,y:c.y+h.y+m.y,z:c.z+h.z+m.z},{x:c.x+g.x,y:c.y+g.y,z:c.z+g.z},{x:c.x+h.x+g.x,y:c.y+h.y+g.y,z:c.z+h.z+g.z},{x:c.x+m.x+g.x,y:c.y+m.y+g.y,z:c.z+m.z+g.z},{x:c.x+h.x+m.x+g.x,y:c.y+h.y+\nm.y+g.y,z:c.z+h.z+m.z+g.z}];m=[];g=[];m.splice(m.length,0,h[0],h[1],h[2],h[3]);g.splice(g.length,0,0,2,1,1,2,3);c=4;m.splice(m.length,0,h[2],h[3],h[6],h[7]);g.splice(g.length,0,c+0,c+2,c+1,c+1,c+2,c+3);c+=4;m.splice(m.length,0,h[4],h[5],h[0],h[1]);g.splice(g.length,0,c+0,c+2,c+1,c+1,c+2,c+3);c+=4;m.splice(m.length,0,h[6],h[7],h[4],h[5]);g.splice(g.length,0,c+0,c+2,c+1,c+1,c+2,c+3);c+=4;m.splice(m.length,0,h[3],h[1],h[7],h[5]);g.splice(g.length,0,c+0,c+2,c+1,c+1,c+2,c+3);c+=4;m.splice(m.length,0,h[2],\nh[0],h[6],h[4]);g.splice(g.length,0,c+0,c+2,c+1,c+1,c+2,c+3);b=$.extend({},b);b.vertexArr=m;b.faceArr=g;b.normalArr=[];d(this,w,b);b=new $3Dmol.Vector3;l.push({centroid:b.addVectors(h[0],h[7]).multiplyScalar(.5)});b=w.updateGeoGroup(0);e(this.boundingSphere,l,b.vertexArray,b.vertices)};this.addCylinder=function(b){b.start=b.start||{};b.end=b.end||{};var c=new $3Dmol.Vector3(b.start.x||0,b.start.y||0,b.start.z||0),d=new $3Dmol.Vector3(b.end.x,b.end.y||0,b.end.z||0);"undefined"==typeof d.x&&(d.x=3);\nvar h=b.radius||.1,g=$3Dmol.CC.color(b.color);this.intersectionShape.cylinder.push(new $3Dmol.Cylinder(c,d,h));$3Dmol.GLDraw.drawCylinder(w,c,d,h,g,b.fromCap,b.toCap);b=new $3Dmol.Vector3;l.push({centroid:b.addVectors(c,d).multiplyScalar(.5)});c=w.updateGeoGroup(0);e(this.boundingSphere,l,c.vertexArray,c.vertices)};this.addDashedCylinder=function(b){b.start=b.start||{};b.end=b.end||{};b.dashLength=b.dashLength||.25;b.gapLength=b.gapLength||.25;var c=new $3Dmol.Vector3(b.start.x||0,b.start.y||0,b.start.z||\n0),d=new $3Dmol.Vector3(b.end.x,b.end.y||0,b.end.z||0);"undefined"==typeof d.x&&(d.x=3);var h=b.radius||.1,g=$3Dmol.CC.color(b.color),f=Math.sqrt(Math.pow(c.x-d.x,2)+Math.pow(c.y-d.y,2)+Math.pow(c.z-d.z,2)),p=f/(b.gapLength+b.dashLength),q=new $3Dmol.Vector3(b.start.x||0,b.start.y||0,b.start.z||0);new $3Dmol.Vector3(b.end.x,b.end.y||0,b.end.z||0);for(var B=new $3Dmol.Vector3((d.x-c.x)/(f/b.gapLength),(d.y-c.y)/(f/b.gapLength),(d.z-c.z)/(f/b.gapLength)),t=new $3Dmol.Vector3((d.x-c.x)/(f/b.dashLength),\n(d.y-c.y)/(f/b.dashLength),(d.z-c.z)/(f/b.dashLength)),H=0;H<p;H++)f=new $3Dmol.Vector3(q.x+t.x,q.y+t.y,q.z+t.z),this.intersectionShape.cylinder.push(new $3Dmol.Cylinder(q,f,h)),$3Dmol.GLDraw.drawCylinder(w,q,f,h,g,b.fromCap,b.toCap),q=new $3Dmol.Vector3(f.x+B.x,f.y+B.y,f.z+B.z);b=new $3Dmol.Vector3;l.push({centroid:b.addVectors(c,d).multiplyScalar(.5)});c=w.updateGeoGroup(0);e(this.boundingSphere,l,c.vertexArray,c.vertices)};this.addCurve=function(b){b.points=b.points||[];b.smooth=b.smooth||10;"undefined"==\ntypeof b.fromCap&&(b.fromCap=2);"undefined"==typeof b.toCap&&(b.toCap=2);var c=$3Dmol.subdivide_spline(b.points,b.smooth);if(3>c.length)console.log("Too few points in addCurve");else{var d=b.radius||.1,e=$3Dmol.CC.color(b.color),h=0,g=c.length-1;var f=c[0].distanceTo(c[1]);var l=Math.ceil(2*d/f);b.toArrow&&(g-=l,f={start:c[g],end:c[c.length-1],radius:d,color:e,mid:1E-4},this.addArrow(f));b.fromArrow&&(h+=l,f={start:c[h],end:c[0],radius:d,color:e,mid:1E-4},this.addArrow(f));b=Math.ceil(c.length/2);\nfor(d={radius:d,color:e,fromCap:2,toCap:2};h<g;h++)d.start=c[h],d.end=c[h+1],d.fromCap=2,d.toCap=2,h<b?(d.fromCap=2,d.toCap=0):(d.fromCap=h>b?0:2,d.toCap=2),this.addCylinder(d)}};this.addLine=function(b){b.start=b.start||{};b.end=b.end||{};var c=new $3Dmol.Vector3(b.start.x||0,b.start.y||0,b.start.z||0);b=new $3Dmol.Vector3(b.end.x,b.end.y||0,b.end.z||0);"undefined"==typeof b.x&&(b.x=3);var d=w.updateGeoGroup(2),h=d.vertices,g=3*h,f=d.vertexArray;f[g]=c.x;f[g+1]=c.y;f[g+2]=c.z;f[g+3]=b.x;f[g+4]=b.y;\nf[g+5]=b.z;d.vertices+=2;g=d.lineArray;f=d.lineidx;g[f]=h;g[f+1]=h+1;d.lineidx+=2;d=new $3Dmol.Vector3;l.push({centroid:d.addVectors(c,b).multiplyScalar(.5)});d=w.updateGeoGroup(0);e(this.boundingSphere,l,d.vertexArray,d.vertices)};this.addArrow=function(b){b.start=b.start||{};b.end=b.end||{};b.start=new $3Dmol.Vector3(b.start.x||0,b.start.y||0,b.start.z||0);if(b.dir instanceof $3Dmol.Vector3&&b.length instanceof number){var c=b.dir.clone().multiplyScalar(b.length).add(start);b.end=c}else b.end=new $3Dmol.Vector3(b.end.x,\nb.end.y||0,b.end.z||0),"undefined"==typeof b.end.x&&(b.end.x=3);b.radius=b.radius||.1;b.radiusRatio=b.radiusRatio||1.618034;b.mid=0<b.mid&&1>b.mid?b.mid:.618034;var d=b.start,m=b.end,h=b.radius,g=b.radiusRatio,f=b.mid;if(d&&m){c=w.updateGeoGroup(51);var p=m.clone();p.sub(d).multiplyScalar(f);var q=d.clone().add(p);f=p.clone().negate();this.intersectionShape.cylinder.push(new $3Dmol.Cylinder(d.clone(),q.clone(),h));this.intersectionShape.sphere.push(new $3Dmol.Sphere(d.clone(),h));var t=[];t[0]=p.clone();\n1E-4<Math.abs(t[0].x)?t[0].y+=1:t[0].x+=1;t[0].cross(p);t[0].normalize();t[0]=t[0];t[4]=t[0].clone();t[4].crossVectors(t[0],p);t[4].normalize();t[8]=t[0].clone().negate();t[12]=t[4].clone().negate();t[2]=t[0].clone().add(t[4]).normalize();t[6]=t[4].clone().add(t[8]).normalize();t[10]=t[8].clone().add(t[12]).normalize();t[14]=t[12].clone().add(t[0]).normalize();t[1]=t[0].clone().add(t[2]).normalize();t[3]=t[2].clone().add(t[4]).normalize();t[5]=t[4].clone().add(t[6]).normalize();t[7]=t[6].clone().add(t[8]).normalize();\nt[9]=t[8].clone().add(t[10]).normalize();t[11]=t[10].clone().add(t[12]).normalize();t[13]=t[12].clone().add(t[14]).normalize();t[15]=t[14].clone().add(t[0]).normalize();var H=c.vertices,z=c.vertexArray,A=c.faceArray,D=c.normalArray,G=c.lineArray,L;var K=0;for(L=t.length;K<L;++K){var F=3*(H+3*K);var Q=t[K].clone().multiplyScalar(h).add(d),I=t[K].clone().multiplyScalar(h).add(q),N=t[K].clone().multiplyScalar(h*g).add(q);z[F]=Q.x;z[F+1]=Q.y;z[F+2]=Q.z;z[F+3]=I.x;z[F+4]=I.y;z[F+5]=I.z;z[F+6]=N.x;z[F+\n7]=N.y;z[F+8]=N.z;0<K&&(F=new $3Dmol.Vector3(z[F-3],z[F-2],z[F-1]),Q=m.clone(),I=q.clone(),N=new $3Dmol.Vector3(N.x,N.y,N.z),this.intersectionShape.triangle.push(new $3Dmol.Triangle(N,Q,F)),this.intersectionShape.triangle.push(new $3Dmol.Triangle(F.clone(),I,N.clone())))}c.vertices+=48;F=3*c.vertices;z[F]=d.x;z[F+1]=d.y;z[F+2]=d.z;z[F+3]=q.x;z[F+4]=q.y;z[F+5]=q.z;z[F+6]=m.x;z[F+7]=m.y;z[F+8]=m.z;c.vertices+=3;var E,J,R=c.vertices-3,W=c.vertices-2,V=c.vertices-1,U=3*R,ca=3*W,T=3*V;K=0;for(L=t.length-\n1;K<L;++K){var P=H+3*K;d=c.faceidx;m=c.lineidx;h=P;F=3*h;g=P+1;Q=3*g;q=P+2;I=3*q;z=P+4;var Y=3*z;N=P+5;var aa=3*N;P+=3;var C=3*P;var Z=E=t[K];var X=J=t[K+1];D[F]=Z.x;D[Q]=E.x;D[C]=J.x;D[F+1]=Z.y;D[Q+1]=E.y;D[C+1]=J.y;D[F+2]=Z.z;D[Q+2]=E.z;D[C+2]=J.z;D[Q]=E.x;D[Y]=X.x;D[C]=J.x;D[Q+1]=E.y;D[Y+1]=X.y;D[C+1]=J.y;D[Q+2]=E.z;D[Y+2]=X.z;D[C+2]=J.z;D[I]=E.x;D[aa]=X.x;D[I+1]=E.y;D[aa+1]=X.y;D[I+2]=E.z;D[aa+2]=X.z;A[d]=h;A[d+1]=g;A[d+2]=P;A[d+3]=g;A[d+4]=z;A[d+5]=P;A[d+6]=h;A[d+7]=P;A[d+8]=R;A[d+9]=q;A[d+10]=\nW;A[d+11]=N;A[d+12]=q;A[d+13]=V;A[d+14]=N;G[m]=h;G[m+1]=g;G[m+2]=h;G[m+3]=P;G[m+4]=z;G[m+5]=P;G[m+6]=h;G[m+7]=P;G[m+8]=q;G[m+9]=g;G[m+10]=q;G[m+11]=N;G[m+12]=z;G[m+13]=N;G[m+14]=q;G[m+15]=V;G[m+16]=q;G[m+17]=N;G[m+18]=V;G[m+19]=N;c.faceidx+=15;c.lineidx+=20}H=[H+45,H+46,H+1,H,H+47,H+2];d=c.faceidx;m=c.lineidx;h=H[0];F=3*h;g=H[1];Q=3*g;q=H[4];I=3*q;z=H[2];Y=3*z;N=H[5];aa=3*N;P=H[3];C=3*P;Z=E=t[15];X=J=t[0];D[F]=Z.x;D[Q]=E.x;D[C]=J.x;D[F+1]=Z.y;D[Q+1]=E.y;D[C+1]=J.y;D[F+2]=Z.z;D[Q+2]=E.z;D[C+2]=J.z;\nD[Q]=E.x;D[Y]=X.x;D[C]=J.x;D[Q+1]=E.y;D[Y+1]=X.y;D[C+1]=J.y;D[Q+2]=E.z;D[Y+2]=X.z;D[C+2]=J.z;D[I]=E.x;D[aa]=X.x;D[I+1]=E.y;D[aa+1]=X.y;D[I+2]=E.z;D[aa+2]=X.z;p.normalize();f.normalize();D[U]=f.x;D[ca]=D[T]=p.x;D[U+1]=f.y;D[ca+1]=D[T+1]=p.y;D[U+2]=f.z;D[ca+2]=D[T+2]=p.z;A[d]=h;A[d+1]=g;A[d+2]=P;A[d+3]=g;A[d+4]=z;A[d+5]=P;A[d+6]=h;A[d+7]=P;A[d+8]=R;A[d+9]=q;A[d+10]=W;A[d+11]=N;A[d+12]=q;A[d+13]=V;A[d+14]=N;G[m]=h;G[m+1]=g;G[m+2]=h;G[m+3]=P;G[m+4]=z;G[m+5]=P;G[m+6]=h;G[m+7]=P;G[m+8]=q;G[m+9]=g;G[m+10]=\nq;G[m+11]=N;G[m+12]=z;G[m+13]=N;G[m+14]=q;G[m+15]=V;G[m+16]=q;G[m+17]=N;G[m+18]=V;G[m+19]=N;c.faceidx+=15;c.lineidx+=20}c=new $3Dmol.Vector3;l.push({centroid:c.addVectors(b.start,b.end).multiplyScalar(.5)});b=w.updateGeoGroup(0);e(this.boundingSphere,l,b.vertexArray,b.vertices)};this.addIsosurface=function(b,c,e){var g=void 0!==c.isoval&&"number"===typeof c.isoval?c.isoval:0,h=c.voxel?!0:!1,n=void 0===c.smoothness?1:c.smoothness,f=b.size.x,l=b.size.y,p=b.size.z,y=new Int16Array(f*l*p),t=b.data,q;\nvar A=0;for(q=y.length;A<q;++A)y[A]=-1;y=new Uint8Array(f*l*p);A=0;for(q=t.length;A<q;++A)0<(0<=g?t[A]-g:g-t[A])&&(y[A]|=2);g=[];t=[];$3Dmol.MarchingCube.march(y,g,t,{fulltable:!0,voxel:h,unitCube:b.unit,origin:b.origin,matrix:b.matrix,nX:f,nY:l,nZ:p});!h&&0<n&&$3Dmol.MarchingCube.laplacianSmooth(n,g,t);h=[];n=[];f=[];c.selectedRegion&&void 0===c.coords&&(c.coords=c.selectedRegion);if(void 0!==c.coords){l=c.coords[0].x;p=c.coords[0].y;y=c.coords[0].z;q=c.coords[0].x;var D=c.coords[0].y,G=c.coords[0].z;\nfor(A=0;A<c.coords.length;A++)c.coords[A].x>l?l=c.coords[A].x:c.coords[A].x<q&&(q=c.coords[A].x),c.coords[A].y>p?p=c.coords[A].y:c.coords[A].y<D&&(D=c.coords[A].y),c.coords[A].z>y?y=c.coords[A].z:c.coords[A].z<G&&(G=c.coords[A].z);var L=2;void 0!==c.radius&&(L=c.radius);void 0!==c.selectedOffset&&(L=c.selectedOffset);void 0!==c.seldist&&(L=c.seldist);q-=L;l+=L;D-=L;p+=L;G-=L;y+=L;for(A=0;A<g.length;A++){var K;if(K=g[A].x>q&&g[A].x<l&&g[A].y>D&&g[A].y<p&&g[A].z>G&&g[A].z<y)a:{K=g[A];for(var F=c.coords,\nQ=L,I=0;I<F.length;I++){var N=F[I];if(Math.sqrt(Math.pow(N.x-K.x,2)+Math.pow(N.y-K.y,2)+Math.pow(N.z-K.z,2))<=Q){K=!0;break a}}K=!1}K?(h.push(n.length),n.push(g[A])):h.push(-1)}for(A=0;A+2<t.length;A+=3)-1!==h[t[A]]&&-1!==h[t[A+1]]&&-1!==h[t[A+2]]&&(f.push(t[A]-(t[A]-h[t[A]])),f.push(t[A+1]-(t[A+1]-h[t[A+1]])),f.push(t[A+2]-(t[A+2]-h[t[A+2]])));g=n;t=f}d(this,w,{vertexArr:g,faceArr:t,normalArr:[],clickable:c.clickable,hoverable:c.hoverable});this.updateStyle(c);A=new $3Dmol.Vector3(b.origin.x,b.origin.y,\nb.origin.z);t=new $3Dmol.Vector3(b.size.x*b.unit.x,b.size.y*b.unit.y,b.size.z*b.unit.z);b=new $3Dmol.Vector3(0,0,0);c=A.clone();t=A.clone().add(t);for(A=0;A<g.length;A++)b.add(g[A]),c.max(g[A]),t.min(g[A]);b.divideScalar(g.length);A=b.distanceTo(t);g=b.distanceTo(c);this.boundingSphere.center=b;this.boundingSphere.radius=Math.max(A,g);"function"==typeof e&&e()};this.addVolumetricData=function(b,c,d){b=new $3Dmol.VolumeData(b,c);this.addIsosurface(b,d)};this.finalize=function(){c(w);w.initTypedArrays()};\nthis.globj=function(b){var d;p&&(b.remove(p),p=null);if(!this.hidden){c(w);w.initTypedArrays();this.wireframe&&w.setUpWireframe();if("undefined"!=typeof this.color){(d=this.color)||$3Dmol.CC.color(d);w.colorsNeedUpdate=!0;if(d.constructor!==Array){var e=d.r;var h=d.g;var f=d.b}for(var l in w.geometryGroups){var t=w.geometryGroups[l],O=t.colorArray,B=0;for(t=t.vertices;B<t;++B)d.constructor===Array&&(f=d[B],e=f.r,h=f.g,f=f.b),O[3*B]=e,O[3*B+1]=h,O[3*B+2]=f}}q=new $3Dmol.Object3D;d=this.side==$3Dmol.DoubleSide?\nnew $3Dmol.MeshDoubleLambertMaterial({wireframe:this.wireframe,side:this.side,transparent:1>this.opacity?!0:!1,opacity:this.opacity,wireframeLinewidth:this.linewidth}):new $3Dmol.MeshLambertMaterial({wireframe:this.wireframe,side:this.side,transparent:1>this.opacity?!0:!1,opacity:this.opacity,wireframeLinewidth:this.linewidth});d=new $3Dmol.Mesh(w,d);q.add(d);d=new $3Dmol.LineBasicMaterial({linewidth:this.linewidth,color:this.color});d=new $3Dmol.Line(g,d,$3Dmol.LinePieces);q.add(d);p=q.clone();b.add(p)}};\nthis.removegl=function(b){p&&(void 0!==p.geometry&&p.geometry.dispose(),void 0!==p.material&&p.material.dispose(),b.remove(p),p=null);q=null}}var c=function(b){b=b.updateGeoGroup(0);0<b.vertices&&b.truncateArrayBuffers(!0,!0)},d=function(b,c,d){var f=d.faceArr;0!==d.vertexArr.length&&0!==f.length||console.warn("Error adding custom shape component: No vertices and/or face indices supplied!");f=d.color;"undefined"==typeof f&&(f=b.color);f=$3Dmol.CC.color(f);for(var l=$3Dmol.splitMesh(d),g=0,h=l.length;g<\nh;g++){var n,t=void 0,m=n=void 0;var x=b;var u=c;var q=l[g];var O=l[g].colorArr?l[g].colorArr:f,B=d.clickable,S=u.addGeoGroup(),H=q.vertexArr,z=q.normalArr,A=q.faceArr;S.vertices=H.length;S.faceidx=A.length;var D=S.vertexArray,G=S.colorArray;O.constructor!==Array&&(t=O.r,n=O.g,m=O.b);var L=0;for(q=S.vertices;L<q;++L){var K=3*L;var F=H[L];D[K]=F.x;D[K+1]=F.y;D[K+2]=F.z;O.constructor===Array&&(F=O[L],t=F.r,n=F.g,m=F.b);G[K]=t;G[K+1]=n;G[K+2]=m}if(B)for(L=0,q=S.faceidx/3;L<q;++L)K=3*L,n=A[K],m=A[K+1],\nF=A[K+2],K=new $3Dmol.Vector3,t=new $3Dmol.Vector3,O=new $3Dmol.Vector3,x.intersectionShape.triangle.push(new $3Dmol.Triangle(K.copy(H[n]),t.copy(H[m]),O.copy(H[F])));if(B){q=new $3Dmol.Vector3(0,0,0);for(n=L=0;n<u.geometryGroups.length;n++)q.add(u.geometryGroups[n].getCentroid()),L++;q.divideScalar(L);e(x.boundingSphere,{centroid:q},D,S.vertices)}S.faceArray=new Uint16Array(A);S.truncateArrayBuffers(!0,!0);if(z.length<S.vertices)S.setNormals();else for(u=S.normalArray=new Float32Array(3*S.vertices),\nL=0,q=S.vertices;L<q;++L)K=3*L,x=z[L],u[K]=x.x,u[K+1]=x.y,u[K+2]=x.z;S.setLineIndices();S.lineidx=S.lineArray.length}},e=function(b,c,d,e){b.center.set(0,0,0);var f;if(0<c.length){var g=0;for(f=c.length;g<f;++g)b.center.add(c[g].centroid);b.center.divideScalar(c.length)}c=b.radius*b.radius;d.length/3<e&&(e=d.length/3);g=0;for(f=e;g<f;g++)e=b.center.distanceToSquared({x:d[3*g],y:d[3*g+1],z:d[3*g+2]}),c=Math.max(c,e);b.radius=Math.sqrt(c)},f=function(b,c){"undefined"!=typeof c.color?(b.color=c.color||\nnew $3Dmol.Color,c.color instanceof $3Dmol.Color||(b.color=$3Dmol.CC.color(c.color))):b.color=$3Dmol.CC.color(0);b.wireframe=c.wireframe?!0:!1;b.opacity=c.alpha?$3Dmol.Math.clamp(c.alpha,0,1):1;"undefined"!=typeof c.opacity&&(b.opacity=$3Dmol.Math.clamp(c.opacity,0,1));b.side=void 0!==c.side?c.side:$3Dmol.DoubleSide;b.linewidth="undefined"==typeof c.linewidth?1:c.linewidth;b.clickable=c.clickable?!0:!1;b.callback="function"===typeof c.callback?c.callback:null;b.hoverable=c.hoverable?!0:!1;b.hover_callback=\n"function"===typeof c.hover_callback?c.hover_callback:null;b.unhover_callback="function"===typeof c.unhover_callback?c.unhover_callback:null;b.hidden=c.hidden};Object.defineProperty(b.prototype,"position",{get:function(){return this.boundingSphere.center}});Object.defineProperty(b.prototype,"x",{get:function(){return this.boundingSphere.center.x}});Object.defineProperty(b.prototype,"y",{get:function(){return this.boundingSphere.center.y}});Object.defineProperty(b.prototype,"z",{get:function(){return this.boundingSphere.center.z}});\nreturn b}();$3Dmol.ShapeIDCount=0;\n$3Dmol.splitMesh=function(b){if(64E3>b.vertexArr.length)return[b];var c=[{vertexArr:[],normalArr:[],faceArr:[]}];b.colorArr&&(c.colorArr=[]);for(var d=[],e=[],f=0,q=b.faceArr,l=0,t=q.length;l<t;l+=3){for(var p=c[f],w=0;3>w;w++){var g=q[l+w];d[g]!==f&&(d[g]=f,e[g]=p.vertexArr.length,p.vertexArr.push(b.vertexArr[g]),b.normalArr&&b.normalArr[g]&&p.normalArr.push(b.normalArr[g]),b.colorArr&&b.colorArr[g]&&p.colorArr.push(b.colorArr[g]));p.faceArr.push(e[g])}64E3<=p.vertexArr.length&&(c.push({vertexArr:[],\nnormalArr:[],faceArr:[]}),b.colorArr&&(c.colorArr=[]),f++)}return c};\n$3Dmol.GLViewer=function(){return function(b,c){function d(b){var c=[];if("undefined"===typeof b.model)for(b=0;b<m.length;b++)m[b]&&c.push(m[b]);else for(c=b.model,$.isArray(c)||(c=[c]),b=0;b<c.length;b++)if("number"===typeof c[b]){var d=c[b];0>d&&(d+=m.length);c[b]=m[d]}return c}function e(b){var c=[];"undefined"===typeof b&&(b={});for(var e=d(b),g=0;g<e.length;g++)c=c.concat(e[g].selectedAtoms(b));return c}function f(b,c,e,g,h){for(var m=d(c),n=0;n<m.length;n++)m[n][b](c,e,g,h)}function q(b){var c=\nnew $3Dmol.MeshLambertMaterial;c.vertexColors=$3Dmol.VertexColors;for(var d in b)"color"!==d&&"map"!==d&&b.hasOwnProperty(d)&&(c[d]=b[d]);void 0!==b.opacity&&(c.transparent=1===b.opacity?!1:!0);return c}c=c||{};var l=c.callback,t=c.defaultcolors;t||(t=$3Dmol.elementColors.defaultColors);var p=c.nomouse,w=0;c.backgroundColor=c.backgroundColor||"#ffffff";w=$3Dmol.CC.color(c.backgroundColor).getHex();var g=0;g=parseFloat(c.camerax);var h=this,n=b,y=null,m=[],x={},u=[],M=[],O=[],B=[],S=[],H=null,z=500;\nz=c.hoverDuration;var A=n.width(),D=n.height(),G=[],L=new $3Dmol.Renderer({antialias:!0,preserveDrawingBuffer:!0,premultipliedAlpha:!1,id:c.id,row:c.row,col:c.col,rows:c.rows,cols:c.cols,canvas:c.canvas});L.domElement.style.width="100%";L.domElement.style.height="100%";L.domElement.style.padding="0";L.domElement.style.position="absolute";L.domElement.style.top="0px";L.domElement.style.left="0px";L.domElement.style.zIndex="0";var K=c.row,F=c.col,Q=c.cols,I=c.rows,N=c.viewers,E=c.control_all,J=L.getAspect(A,\nD),R=new $3Dmol.Camera(20,J,1,800,c.orthographic);R.position=new $3Dmol.Vector3(g,0,150);var W=new $3Dmol.Vector3;R.lookAt(W);var V=new $3Dmol.Raycaster(new $3Dmol.Vector3(0,0,0),new $3Dmol.Vector3(0,0,0)),U=new $3Dmol.Projector;new $3Dmol.Vector3(0,0,0);var ca=null,T=null,P=null,Y=-50,aa=50,C=new $3Dmol.Quaternion(0,0,0,1),Z=new $3Dmol.Quaternion(0,0,0,1),X=0,da=!1,ma=0,ra=0,ha=0,ja=0,Ta=0,la=0,Ba=0,xa=function(){X--;0>X&&(X=0)},Ua=function(){var b=0,c;for(c in x)if(x.hasOwnProperty(c)){var d=parseInt(c);\nisNaN(d)||(c=d);c>b&&(b=c)}return b+1},ya=function(){var b=R.position.z-T.position.z;1>b&&(b=1);R.near=b+Y;1>R.near&&(R.near=1);R.far=b+aa;R.near+1>R.far&&(R.far=R.near+1);R.fov=20;R.right=b*Math.tan(Math.PI/180*20);R.left=-R.right;R.top=R.right/J;R.bottom=-R.top;R.updateProjectionMatrix();ca.fog.near=R.near+.4*(R.far-R.near);ca.fog.far=R.far;c.disableFog&&(ca.fog.near=ca.fog.far)},ea=function(b){L.setViewport();if(ca&&(ya(),L.render(ca,R),!b&&0<G.length)){b=h.getView();for(var c=0;c<G.length;c++)G[c].setView(b,\n!0)}};(function(){ca=new $3Dmol.Scene;ca.fog=new $3Dmol.Fog(w,100,200);P=new $3Dmol.Object3D;T=new $3Dmol.Object3D;T.useQuaternion=!0;T.quaternion=new $3Dmol.Quaternion(0,0,0,1);T.add(P);ca.add(T);var b=new $3Dmol.Light(16777215);b.position=(new $3Dmol.Vector3(.2,.2,1)).normalize();b.intensity=1;ca.add(b)})();L.setClearColorHex(w,1);ca.fog.color=$3Dmol.CC.color(w);var Za=function(b,c){H!=b&&(H&&H.unhover_callback(H,h,c,n),(H=b)&&void 0!==b.hover_callback&&"function"===typeof b.hover_callback&&b.hover_callback(b,\nh,c,n))},mb=function(b,c,d){V.setFromCamera({x:b,y:c,z:-1},R);b=V.intersectObjects(P,S);0!=b.length&&void 0!==b[0]||Za(null);void 0!==b[0]&&b[0].clickable!==H&&Za(null)},fb=function(b){var c=b.originalEvent.targetTouches[0].pageX-b.originalEvent.targetTouches[1].pageX;b=b.originalEvent.targetTouches[0].pageY-b.originalEvent.targetTouches[1].pageY;return Math.sqrt(c*c+b*b)},za=function(b){var c=b.pageX,d=b.pageY;void 0==c&&(c=b.originalEvent.pageX);void 0==d&&(d=b.originalEvent.pageY);b.originalEvent.targetTouches&&\nb.originalEvent.targetTouches[0]?(c=b.originalEvent.targetTouches[0].pageX,d=b.originalEvent.targetTouches[0].pageY):b.originalEvent.changedTouches&&b.originalEvent.changedTouches[0]&&(c=b.originalEvent.changedTouches[0].pageX,d=b.originalEvent.changedTouches[0].pageY);return[c,d]},$a=function(b,c){b/=A;c/=D;var d=T.quaternion,e=new $3Dmol.Vector3(0,0,T.position.z);U.projectVector(e,R);e.x+=2*b;e.y-=2*c;U.unprojectVector(e,R);e.z=0;e.applyQuaternion(d);return e},Wa=function(b,c){var d=n.width(),e=\nn.height();if(void 0!=N&&!E){d/=Q;e/=I;var g=$("canvas",n).offset();b=Math.floor((b-g.left)/d);if(I-Math.floor((c-g.top)/e)-1!=K||b!=F)return!1}return!0};$("body").bind("mouseup touchend",function(b){if(da&&ca){var c=za(b),d=c[0];c=c[1];if(d==ma&&c==ra){var e=$("canvas",n).offset();0!=B.length&&(V.setFromCamera({x:(d-e.left)/A*2-1,y:2*-((c-e.top)/D)+1,z:-1},R),d=V.intersectObjects(P,B),d.length&&(d=d[0].clickable,void 0!==d.callback&&"function"===typeof d.callback&&d.callback(d,h,b,n)))}}da=!1});\nvar Ea=function(b){if(c.lowerZoomLimit&&0<c.lowerZoomLimit){var d=150-c.lowerZoomLimit;b>d&&(b=d)}c.upperZoomLimit&&0<c.upperZoomLimit&&(d=150-c.upperZoomLimit,b<d&&(b=d));150<b&&(b=149.85);return b};this.setZoomLimits=function(b,d){"undefined"!==typeof b&&(c.lowerZoomLimit=b);d&&(c.upperZoomLimit=d);T.position.z=Ea(T.position.z);ea()};var Ia,Ja=this._handleMouseDown=function(b){b.preventDefault();if(ca){var c=za(b),d=c[0];c=c[1];void 0!==d&&(da=!0,Ia=b.which,ma=d,ra=c,ha=0,b.originalEvent.targetTouches&&\n2==b.originalEvent.targetTouches.length&&(ha=fb(b)),C=T.quaternion,Ta=T.position.z,ja=P.position.clone(),la=Y,Ba=aa)}},Ka=this._handleMouseScroll=function(b){b.preventDefault();if(ca){var c=za(b),d=c[0];void 0!==d&&Wa(d,c[1])&&(c=.85*(150-T.position.z),d=1,b.originalEvent.ctrlKey&&(d=-1),b.originalEvent.detail?T.position.z+=d*c*b.originalEvent.detail/10:b.originalEvent.wheelDelta&&(T.position.z-=d*c*b.originalEvent.wheelDelta/400),T.position.z=Ea(T.position.z),ea())}};this.pngURI=function(){return this.getCanvas().toDataURL("image/png")};\nthis.getCanvas=function(){return y.get(0)};this.setHoverDuration=function(b){z=b};var Xa,ab=this._handleMouseMove=function(b){A=n.width();D=n.height();clearTimeout(Xa);var c=$("canvas",n).offset(),d=(za(b)[0]-c.left)/A*2-1,e=2*-((za(b)[1]-c.top)/D)+1;null!==H&&mb(d,e,b);Xa=setTimeout(function(){if(0!=S.length){V.setFromCamera({x:d,y:e,z:-1},R);var b=V.intersectObjects(P,S);b.length?(b=b[0].clickable,Za(b),H=b):Za(null)}},z);b.preventDefault();if(ca&&da){c=0;var g=za(b),h=g[0],m=g[1];if(void 0!==h&&\nWa(h,m)){g=(h-ma)/A;var f=(m-ra)/D;0!=ha&&b.originalEvent.targetTouches&&2==b.originalEvent.targetTouches.length?(f=fb(b),c=2,f=2*(f-ha)/(A+D),console.log("pinch "+ha+" dy "+f)):b.originalEvent.targetTouches&&3==b.originalEvent.targetTouches.length&&(c=1);var x=L.getXYRatio(),u=x[0],l=x[1];g*=u;f*=l;x=Math.sqrt(g*g+f*f);3==c||3==Ia&&b.ctrlKey?(Y=la+100*g,aa=Ba+100*f):2==c||3==Ia||b.shiftKey?(b=.85*(150-T.position.z),80>b&&(b=80),T.position.z=Ta+f*b,T.position.z=Ea(T.position.z)):1==c||2==Ia||b.ctrlKey?\n(b=$a(u*(h-ma),l*(m-ra)),P.position.addVectors(ja,b)):0!==c&&1!=Ia||0===x||(b=Math.sin(x*Math.PI)/x,Z.x=Math.cos(x*Math.PI),Z.y=0,Z.z=b*g,Z.w=-b*f,T.quaternion=new $3Dmol.Quaternion(1,0,0,0),T.quaternion.multiply(Z),T.quaternion.multiply(C));ea()}}},ia=function(b){n=b;A=n.width();D=n.height();J=L.getAspect(A,D);L.setSize(A,D);n.append(L.domElement);y=$(L.domElement);p||(y.bind("mousedown touchstart",Ja),y.bind("DOMMouseScroll mousewheel",Ka),y.bind("mousemove touchmove",ab),y.bind("contextmenu",function(b){b.preventDefault()}))};\nia(n);this.setContainer=function(b){"string"===$.type(b)&&(b=$("#"+b));b||(b=n);ia(b);return this};this.setBackgroundColor=function(b,c){if("undefined"==typeof c)c=1;else if(0>c||1<c)c=1;b=$3Dmol.CC.color(b);ca.fog.color=b;w=b.getHex();L.setClearColorHex(b.getHex(),c);ea();return this};this.setProjection=function(b){R.ortho="orthographic"===b;ya()};this.setViewStyle=function(b){if("outline"===b.style){var c={};b.color&&(c.color=$3Dmol.CC.color(b.color));b.width&&(c.width=b.width);L.enableOutline(c)}else L.disableOutline();\nreturn this};c.style&&this.setViewStyle(c);this.setWidth=function(b){A=b||A;L.setSize(A,D);return this};this.setHeight=function(b){D=b||D;L.setSize(A,D);return this};this.resize=function(){A=n.width();D=n.height();J=L.getAspect(A,D);L.setSize(A,D);R.aspect=J;R.updateProjectionMatrix();ea();return this};$(window).resize(this.resize);this.getModel=function(b){return b in m?m[b]:0==m.length?null:m[m.length-1]};this.rotate=function(b,c,d,e){d=void 0!==d?d:0;"undefined"===typeof c&&(c="y");"x"==c&&(c=\n{x:1,y:0,z:0});"y"==c&&(c={x:0,y:1,z:0});"z"==c&&(c={x:0,y:0,z:1});var g=Math.PI*b/180;b=Math.sin(g/2);g=Math.cos(g/2);c=(new $3Dmol.Quaternion(c.x*b,c.y*b,c.z*b,g)).normalize();d?(c=(new $3Dmol.Quaternion).copy(T.quaternion).multiply(c),kb(d,e,P.position,T.position.z,c,W)):(T.quaternion.multiply(c),ea());return this};this.surfacesFinished=function(){for(var b in x)if(!x[b][0].done)return!1;return!0};this.getView=function(){if(!P)return[0,0,0,0,0,0,0,1];var b=P.position,c=T.quaternion;return[b.x,\nb.y,b.z,T.position.z,c.x,c.y,c.z,c.w]};this.setView=function(b,c){if(void 0===b||!(b instanceof Array||8!==b.length)||!P||!T)return this;P.position.x=b[0];P.position.y=b[1];P.position.z=b[2];T.position.z=b[3];T.quaternion.x=b[4];T.quaternion.y=b[5];T.quaternion.z=b[6];T.quaternion.w=b[7];"undefined"!=typeof b[8]&&(T.position.x=b[8],T.position.y=b[9]);ea(c);return this};this.render=function(b){L.setViewport();B.splice(0,B.length);S.splice(0,S.length);var c;var d=0;for(c=m.length;d<c;d++){var e=m[d];\nif(e){var g=e.selectedAtoms({clickable:!0});e=e.selectedAtoms({hoverable:!0});Array.prototype.push.apply(S,e);Array.prototype.push.apply(B,g)}}d=0;for(c=u.length;d<c;d++)(g=u[d])&&g.clickable&&B.push(g),g&&g.hoverable&&S.push(g);d=this.getView();g=L.supportedExtensions();for(c=0;c<m.length;c++)m[c]&&m[c].globj(P,g);for(c=0;c<u.length;c++)u[c]&&u[c].globj(P,g);for(c in x)if(x.hasOwnProperty(c))for(e=x[c],g=0;g<e.length;g++)if(e.hasOwnProperty(g)){var h=e[g].geo;if(!e[g].finished)if(h.verticesNeedUpdate=\n!0,h.elementsNeedUpdate=!0,h.normalsNeedUpdate=!0,h.colorsNeedUpdate=!0,h.buffersNeedUpdate=!0,h.boundingSphere=null,e[g].done&&(e[g].finished=!0),e[g].lastGL&&P.remove(e[g].lastGL),h=e[g].mat instanceof $3Dmol.LineBasicMaterial?new $3Dmol.Line(h,e[g].mat):new $3Dmol.Mesh(h,e[g].mat),h.visible=e[g].mat.transparent&&0==e[g].mat.opacity?!1:!0,1<e[g].symmetries.length||1==e[g].symmetries.length&&!e[g].symmetries[g].isIdentity()){var n,f=new $3Dmol.Object3D;for(n=0;n<e[g].symmetries.length;n++){var l=\nh.clone();l.matrix=e[g].symmetries[n];l.matrixAutoUpdate=!1;f.add(l)}e[g].lastGL=f;P.add(f)}else e[g].lastGL=h,P.add(h)}this.setView(d);"function"===typeof b&&b(this);return this};this.selectedAtoms=function(b){return e(b)};this.getUniqueValues=function(b,c){"undefined"===typeof c&&(c={});c=e(c);var d={},g;for(g in c)c[g].hasOwnProperty(b)&&(d[c[g][b]]=!0);return Object.keys(d)};this.pdbData=function(b){b=e(b);for(var c="",d=0,g=b.length;d<g;++d)c+=b[d].pdbline+"\\n";return c};var xb=function(b,c,\nd){if(1==d)return c;if(0==d)return b;var e=b.x*c.x+b.y*c.y+b.z*c.z+b.w*c.w;if(.9995<e)return b=new $3Dmol.Quaternion(b.x+d*(c.x-b.x),b.y+d*(c.y-b.y),b.z+d*(c.z-b.z),b.w+d*(c.w-b.w)),b.normalize(),b;0>e&&(c=c.clone().multiplyScalar(-1),e=-e);1<e?e=1:-1>e&&(e=-1);d*=Math.acos(e);c=c.clone();c.sub(b.clone().multiplyScalar(e));c.normalize();e=Math.cos(d);d=Math.sin(d);b=new $3Dmol.Quaternion(b.x*e+c.x*d,b.y*e+c.y*d,b.z*e+c.z*d,b.w*e+c.w*d);b.normalize();return b},nb;this.spin=function(b){clearInterval(nb);\n"undefined"==typeof b&&(b="y");if("boolean"==typeof b)if(b)b="y";else return;Array.isArray(b)&&(b={x:b[0],y:b[1],z:b[2]});var c=this;nb=setInterval(function(){c.rotate(1,b)},25)};var kb=function(b,c,d,e,g,h){var m=Math.ceil(b/20);1>m&&(m=1);X++;b=P.position.clone();var n=T.position.z,f=T.quaternion.clone(),x=W.clone();if(c){m=Array(m);for(var u=m.length,l=0;l<u;l++){var p=(l+1)/u;c={mpos:b,rz:n,rot:f};d&&(c.mpos=d.clone().sub(b).multiplyScalar(p).add(b));"undefined"!=typeof e&&null!=e&&(c.rz=n+p*\n(e-n));g&&(c.rot=xb(f,g,p));h&&(c.cam=h.clone().sub(x).multiplyScalar(p).add(x));m[l]=c}var t=0;var y=function(){var b=m[t];t+=1;b.mpos&&(P.position=b.mpos);b.rz&&(T.position.z=b.rz);b.rot&&(T.quaternion=b.rot);b.cam&&R.lookAt(b.cam);t<m.length?setTimeout(y,20):xa();ea()}}else{var q,w,Pa;p=1/m;d&&(q=d.clone().sub(b).multiplyScalar(p));"undefined"!=typeof e&&null!=e&&(w=p*(e-n));if(g){c=xb(f,g,p);var B=f.clone().inverse().multiply(c)}h&&(Pa=h.clone().sub(x).multiplyScalar(p));t=0;y=function(){t+=1;\nq&&P.position.add(q);w&&(T.position.z+=w);B&&T.quaternion.multiply(B);Pa&&(W.add(Pa),R.lookAt(W));t<m?setTimeout(y,20):xa();ea()}}setTimeout(y,20)};this.zoom=function(b,c,d){c=void 0!==c?c:0;b=150-(150-T.position.z)/(b||2);0<c?kb(c,d,P.position,Ea(b),T.quaternion,W):(T.position.z=Ea(b),ea());return this};this.translate=function(b,c,d,e){d=void 0!==d?d:0;b/=A;c/=D;var g=new $3Dmol.Vector3(0,0,-150);U.projectVector(g,R);g.x-=b;g.y-=c;U.unprojectVector(g,R);g.z=0;b=W.clone().add(g);0<d?kb(d,e,P.position,\nT.position.z,T.quaternion,b):(W=b,R.lookAt(W),ea());return this};this.fitSlab=function(b){b=b||{};b=e(b);var c=$3Dmol.getExtent(b);b=c[1][0]-c[0][0];var d=c[1][1]-c[0][1];c=c[1][2]-c[0][2];b=Math.sqrt(b*b+d*d+c*c);5>b&&(b=5);Y=-b/1.9;aa=b/2;return this};this.center=function(b,c,d){c=void 0!==c?c:0;b=b||{};var g=e(b),h=$3Dmol.getExtent(g);if($.isEmptyObject(b)){$.each(u,function(b,c){c&&c.boundingSphere&&c.boundingSphere.center&&(b=c.boundingSphere.center,c=c.boundingSphere.radius,0<c?(g.push(new $3Dmol.Vector3(b.x+\nc,b.y,b.z)),g.push(new $3Dmol.Vector3(b.x-c,b.y,b.z)),g.push(new $3Dmol.Vector3(b.x,b.y+c,b.z)),g.push(new $3Dmol.Vector3(b.x,b.y-c,b.z)),g.push(new $3Dmol.Vector3(b.x,b.y,b.z+c)),g.push(new $3Dmol.Vector3(b.x,b.y,b.z-c))):g.push(b))});h=$3Dmol.getExtent(g);b=g;var m=h}else b=e({}),m=$3Dmol.getExtent(b);b=new $3Dmol.Vector3(h[2][0],h[2][1],h[2][2]);var n=m[1][0]-m[0][0],f=m[1][1]-m[0][1];m=m[1][2]-m[0][2];n=Math.sqrt(n*n+f*f+m*m);5>n&&(n=5);Y=-n/1.9;aa=n/2;n=h[1][0]-h[0][0];f=h[1][1]-h[0][1];m=h[1][2]-\nh[0][2];n=Math.sqrt(n*n+f*f+m*m);5>n&&(n=5);h=25;for(n=0;n<g.length;n++)g[n]&&(f=b.distanceToSquared(g[n]),f>h&&(h=f));n=2*Math.sqrt(h);b=b.clone().multiplyScalar(-1);0<c?kb(c,d,b,T.position.z,T.quaternion,W):(P.position=b,ea());return this};this.zoomTo=function(b,c,d){c=void 0!==c?c:0;b=b||{};var g=e(b),h=$3Dmol.getExtent(g);if($.isEmptyObject(b)){$.each(u,function(b,c){c&&c.boundingSphere&&c.boundingSphere.center&&(b=c.boundingSphere.center,c=c.boundingSphere.radius,0<c?(g.push(new $3Dmol.Vector3(b.x+\nc,b.y,b.z)),g.push(new $3Dmol.Vector3(b.x-c,b.y,b.z)),g.push(new $3Dmol.Vector3(b.x,b.y+c,b.z)),g.push(new $3Dmol.Vector3(b.x,b.y-c,b.z)),g.push(new $3Dmol.Vector3(b.x,b.y,b.z+c)),g.push(new $3Dmol.Vector3(b.x,b.y,b.z-c))):g.push(b))});h=$3Dmol.getExtent(g);var m=g;var n=h}else m=e({}),n=$3Dmol.getExtent(m);m=new $3Dmol.Vector3(h[2][0],h[2][1],h[2][2]);var f=n[1][0]-n[0][0],x=n[1][1]-n[0][1];n=n[1][2]-n[0][2];f=Math.sqrt(f*f+x*x+n*n);5>f&&(f=5);Y=-f/1.9;aa=f/2;0===Object.keys(b).length&&(Y=-999999,\naa=999999);f=h[1][0]-h[0][0];x=h[1][1]-h[0][1];n=h[1][2]-h[0][2];f=Math.sqrt(f*f+x*x+n*n);5>f&&(f=5);b=25;for(h=0;h<g.length;h++)g[h]&&(f=m.distanceToSquared(g[h]),f>b&&(b=f));f=2*Math.sqrt(b);m=m.clone().multiplyScalar(-1);b=-(.5*f/Math.tan(Math.PI/180*R.fov/2)-150);b=Ea(b);0<c?kb(c,d,m,b,T.quaternion,W):(P.position=m,T.position.z=b,ea());return this};this.setSlab=function(b,c){Y=b;aa=c};this.getSlab=function(b){return{near:Y,far:aa}};this.addLabel=function(b,c,d){c=c||{};d&&(d=$3Dmol.getExtent(e(d)),\nc.position={x:d[2][0],y:d[2][1],z:d[2][2]});b=new $3Dmol.Label(b,c);b.setContext();P.add(b.sprite);c.fixed&&O.push(M.length);M.push(b);ea();return b};this.addResLabels=function(b,c){f("addResLabels",b,this,c);ea();return this};this.addPropertyLabels=function(b,c,d){f("addPropertyLabels",b,c,this,d);ea();return this};this.removeLabel=function(b){for(var c=0;c<M.length;c++)if(M[c]==b){M.splice(c,1);b.dispose();P.remove(b.sprite);break}ea();return this};this.removeAllLabels=function(){for(var b=0;b<\nM.length;b++)P.remove(M[b].sprite);M.splice(0,M.length);ea();return this};this.setLabelStyle=function(b,c){P.remove(b.sprite);b.dispose();b.stylespec=c;b.setContext();P.add(b.sprite);ea();return b};this.setLabelText=function(b,c){P.remove(b.sprite);b.dispose();b.text=c;b.setContext();P.add(b.sprite);ea();return b};this.addShape=function(b){b=b||{};b=new $3Dmol.GLShape(b);b.shapePosition=u.length;u.push(b);return b};this.removeShape=function(b){if(!b)return this;b.removegl(P);for(delete u[b.shapePosition];0<\nu.length&&"undefined"===typeof u[u.length-1];)u.pop();return this};this.removeAllShapes=function(){for(var b=0;b<u.length;b++)u[b].removegl(P);u.splice(0,u.length);return this};var Na=function(b){if(b.hasOwnProperty("x")&&b.hasOwnProperty("y")&&b.hasOwnProperty("z"))return b;b=e(b);if(0==b.length)return{x:0,y:0,z:0};b=$3Dmol.getExtent(b);return{x:b[0][0]+(b[1][0]-b[0][0])/2,y:b[0][1]+(b[1][1]-b[0][1])/2,z:b[0][2]+(b[1][2]-b[0][2])/2}};this.addSphere=function(b){b=b||{};b.center=Na(b.center);var c=\nnew $3Dmol.GLShape(b);c.shapePosition=u.length;c.addSphere(b);u.push(c);c.finalize();return c};this.addBox=function(b){b=b||{};void 0!=b.corner&&(b.corner=Na(b.corner));void 0!=b.center&&(b.center=Na(b.center));var c=new $3Dmol.GLShape(b);c.shapePosition=u.length;c.addBox(b);u.push(c);c.finalize();return c};this.addArrow=function(b){b=b||{};b.start=Na(b.start);b.end=Na(b.end);var c=new $3Dmol.GLShape(b);c.shapePosition=u.length;c.addArrow(b);u.push(c);c.finalize();return c};this.addCylinder=function(b){b=\nb||{};b.start=Na(b.start);b.end=Na(b.end);var c=new $3Dmol.GLShape(b);c.shapePosition=u.length;b.dashed?c.addDashedCylinder(b):c.addCylinder(b);u.push(c);c.finalize();return c};this.addCurve=function(b){b=b||{};var c=new $3Dmol.GLShape(b);c.shapePosition=u.length;c.addCurve(b);u.push(c);c.finalize();return c};this.addLine=function(b){b=b||{};b.start=Na(b.start);b.end=Na(b.end);b.wireframe=!0;var c=new $3Dmol.GLShape(b);c.shapePosition=u.length;if(b.dashed){b.dashLength=b.dashLength||.5;b.gapLength=\nb.gapLength||.5;b.start=b.start||{};b.end=b.end||{};var d=new $3Dmol.Vector3(b.start.x||0,b.start.y||0,b.start.z||0),e=new $3Dmol.Vector3(b.end.x,b.end.y||0,b.end.z||0),g=new $3Dmol.Vector3;new $3Dmol.Vector3;new $3Dmol.Vector3;var h,m=d.clone(),n=0;g.subVectors(e,d);var f=g.length();g.normalize();var x=g.clone();g=g.clone();x.multiplyScalar(b.dashLength);g.multiplyScalar(b.gapLength);var l=x.length();for(h=g.length();n<f;){if(n+l>f){b.start=d;b.end=e;c.addLine(b);break}m.addVectors(d,x);b.start=\nd;b.end=m;c.addLine(b);d=m.clone();n+=l;m.addVectors(d,g);d=m.clone();n+=h}c.finalize()}else c.addLine(b);u.push(c);c.finalize();return c};this.addUnitCell=function(b){b||(b=this.getModel());var c=new $3Dmol.GLShape({wireframe:!0});c.shapePosition=u.length;var d=b.getCrystData();if(d){if(d.matrix)b=d.matrix;else{b=d.a;var e=d.b,g=d.c,h=d.alpha,m=d.beta;d=d.gamma;h=h*Math.PI/180;m=m*Math.PI/180;d=d*Math.PI/180;var n=Math.cos(m);h=(Math.cos(h)-Math.cos(m)*Math.cos(d))/Math.sin(d);b=new $3Dmol.Matrix4(b,\ne*Math.cos(d),g*n,0,0,e*Math.sin(d),g*h,0,0,0,g*Math.sqrt(Math.max(0,1-n*n-h*h)),0,0,0,0,1)}e=[new $3Dmol.Vector3(0,0,0),new $3Dmol.Vector3(1,0,0),new $3Dmol.Vector3(0,1,0),new $3Dmol.Vector3(0,0,1),new $3Dmol.Vector3(1,1,0),new $3Dmol.Vector3(0,1,1),new $3Dmol.Vector3(1,0,1),new $3Dmol.Vector3(1,1,1)];for(g=0;g<e.length;g++)e[g]=e[g].applyMatrix4(b);c.addLine({start:e[0],end:e[1]});c.addLine({start:e[0],end:e[2]});c.addLine({start:e[1],end:e[4]});c.addLine({start:e[2],end:e[4]});c.addLine({start:e[0],\nend:e[3]});c.addLine({start:e[3],end:e[5]});c.addLine({start:e[2],end:e[5]});c.addLine({start:e[1],end:e[6]});c.addLine({start:e[4],end:e[7]});c.addLine({start:e[6],end:e[7]});c.addLine({start:e[3],end:e[6]});c.addLine({start:e[5],end:e[7]})}u.push(c);c.finalize();return c};this.addCustom=function(b){b=b||{};var c=new $3Dmol.GLShape(b);c.shapePosition=u.length;c.addCustom(b);u.push(c);c.finalize();return c};this.addVolumetricData=function(b,c,d){d=d||{};var e=new $3Dmol.GLShape(d);e.shapePosition=\nu.length;e.addVolumetricData(b,c,d);u.push(e);return e};this.addIsosurface=function(b,c,d){c=c||{};var e=new $3Dmol.GLShape(c);e.shapePosition=u.length;e.addIsosurface(b,c,d);u.push(e);return e};this.enableFog=function(b){b?ca.fog=new $3Dmol.Fog(w,100,200):(c.disableFog=!0,ea())};this.setFrame=function(b){return new Promise(function(c,d){d=m.map(function(c){return c.setFrame(b)});Promise.all(d).then(function(){c()})})};this.getNumFrames=function(){for(var b=0,c=0;c<m.length;c++)m[c].getNumFrames()>\nb&&(b=m[c].getNumFrames());return b};this.animate=function(b){X++;var c=100,d="forward",e=0;b=b||{};b.interval&&(c=b.interval);b.loop&&(d=b.loop);b.reps&&(e=b.reps);var g=this.getNumFrames(),h=this,m=0,n=1;b.step&&(n=b.step,e/=n);var f=0,x=g*e,l=new Date,u=function(){h.render();if(++f!=x&&h.isAnimated()){var b=c-(new Date-l);setTimeout(p,0<b?b:0,d)}else clearTimeout(t),xa()},p=function(b){l=new Date;"forward"==b?h.setFrame(m).then(function(){m=(m+n)%g;u()}):"backward"==b?h.setFrame(g-1-m).then(function(){m=\n(m+n)%g;u()}):h.setFrame(m).then(function(){m+=n;n*=0==m%(g-1)?-1:1;u()})},t=setTimeout(p,0,d);return this};this.stopAnimate=function(){X=0;return this};this.isAnimated=function(){return 0<X};this.addModel=function(b,c,d){d&&!d.defaultcolors&&(d.defaultcolors=t);var e=new $3Dmol.GLModel(m.length,d);e.addMolData(b,c,d);m.push(e);return e};this.addModels=function(b,c,d){d=d||{};d.multimodel=!0;d.frames=!0;b=$3Dmol.GLModel.parseMolData(b,c,d);for(c=0;c<b.length;c++){var e=new $3Dmol.GLModel(m.length,\nt);e.setAtomDefaults(b[c]);e.addFrame(b[c]);e.setFrame(0);b.modelData&&e.setModelData(b.modelData[c]);e.setDontDuplicateAtoms(!d.duplicateAssemblyAtoms);m.push(e)}return m};this.addModelsAsFrames=function(b,c,d){d=d||{};d.multimodel=!0;d.frames=!0;var e=new $3Dmol.GLModel(m.length,t);e.addMolData(b,c,d);m.push(e);return e};this.addAsOneMolecule=function(b,c,d){d=d||{};d.multimodel=!0;d.onemol=!0;var e=new $3Dmol.GLModel(m.length,t);e.addMolData(b,c,d);m.push(e);return e};this.removeModel=function(b){if(b){b.removegl(P);\nfor(delete m[b.getID()];0<m.length&&"undefined"===typeof m[m.length-1];)m.pop();return this}};this.removeAllModels=function(){for(var b=0;b<m.length;b++)m[b].removegl(P);m.splice(0,m.length);return this};this.exportJSON=function(b,c){var d={};d.m=void 0===c?m.map(function(c){return c.toCDObject(b)}):[model[c].toCDObject()];return JSON.stringify(d)};this.createModelFrom=function(b,c){for(var d=new $3Dmol.GLModel(m.length,t),e=0;e<m.length;e++)if(m[e]){var g=m[e].selectedAtoms(b);d.addAtoms(g);c&&m[e].removeAtoms(g)}m.push(d);\nreturn d};this.setStyle=function(b,c){"undefined"===typeof c&&(c=b,b={});f("setStyle",b,c,!1);return this};this.addStyle=function(b,c){"undefined"===typeof c&&(c=b,b={});f("setStyle",b,c,!0);return this};this.setClickable=function(b,c,d){f("setClickable",b,c,d);return this};this.setHoverable=function(b,c,d,e){f("setHoverable",b,c,d,e);return this};this.vibrate=function(b,c){f("vibrate",b,c);return this};this.setColorByProperty=function(b,c,d,e){f("setColorByProperty",b,c,d,e);return this};this.setColorByElement=\nfunction(b,c){f("setColorByElement",b,c);return this};var ta=function(b,c){for(var d=[],e=0;e<b.length;e++){var g=b[e];"undefined"!=typeof g&&(g.x<c[0][0]||g.x>c[1][0]||g.y<c[0][1]||g.y>c[1][1]||g.z<c[0][2]||g.z>c[1][2]||d.push(g))}return d},oa=function(b){return(b[1][0]-b[0][0])*(b[1][1]-b[0][1])*(b[1][2]-b[0][2])},qa=function(b,c,d){for(var e=[],g={},h=0,m=c.length;h<m;h++)g[c[h].index]=h;var n=function(b){for(var c=[],d=0,e=b.length;d<e;d++)b[d].index in g&&c.push(g[b[d].index]);return c},f=function(b){var c=\n[];c[0]=[b[0][0],b[0][1],b[0][2]];c[1]=[b[1][0],b[1][1],b[1][2]];return c},x=function(b){if(64E3>oa(b))return[b];var c=b[1][0]-b[0][0],d=b[1][1]-b[0][1],e=b[1][2]-b[0][2];d=c>d&&c>e?0:d>c&&d>e?1:2;e=f(b);c=f(b);b=(b[1][d]-b[0][d])/2+b[0][d];e[1][d]=b;c[0][d]=b;b=x(e);c=x(c);return b.concat(c)};b=x(b);h=0;for(m=b.length;h<m;h++){var l=f(b[h]);l[0][0]-=6;l[0][1]-=6;l[0][2]-=6;l[1][0]+=6;l[1][1]+=6;l[1][2]+=6;l=ta(c,l);var u=ta(d,b[h]);e.push({extent:b[h],atoms:n(l),toshow:n(u)})}return e},Oa=function(b,\nc,d){var e=new $3Dmol.Geometry(!0),g=e.updateGeoGroup(0),h=[];var m=0;for(x=b.length;m<x;m++){var n=b[m];n&&("undefined"!=typeof n.surfaceColor?h[m]=n.surfaceColor:n.color&&(h[m]=$3Dmol.CC.color(n.color)))}var f=g.vertexArray;n=c.vertices;var x;m=0;for(x=n.length;m<x;m++)b=3*g.vertices,f[b]=n[m].x,f[b+1]=n[m].y,f[b+2]=n[m].z,g.vertices++;f=g.colorArray;if(d.voldata&&d.volscheme){h=d.volscheme;var l=d.voldata;var u=h.range()||[-1,1];m=0;for(x=n.length;m<x;m++){b=l.getVal(n[m].x,n[m].y,n[m].z);var p=\n$3Dmol.CC.color(h.valueToHex(b,u));b=3*m;f[b]=p.r;f[b+1]=p.g;f[b+2]=p.b}}else if(0<h.length)for(m=0,x=n.length;m<x;m++)l=n[m].atomid,b=3*m,f[b]=h[l].r,f[b+1]=h[l].g,f[b+2]=h[l].b;c=c.faces;g.faceidx=c.length;e.initTypedArrays();n=g.vertexArray;f=g.normalArray;m=0;for(x=c.length;m<x;m+=3){h=c[m+1];l=c[m+2];b=3*c[m];h*=3;l*=3;u=new $3Dmol.Vector3(n[b],n[b+1],n[b+2]);p=new $3Dmol.Vector3(n[h],n[h+1],n[h+2]);var t=new $3Dmol.Vector3(n[l],n[l+1],n[l+2]);t.subVectors(t,p);u.subVectors(u,p);t.cross(u);u=\nt;u.normalize();f[b]+=u.x;f[h]+=u.x;f[l]+=u.x;f[b+1]+=u.y;f[h+1]+=u.y;f[l+1]+=u.y;f[b+2]+=u.z;f[h+2]+=u.z;f[l+2]+=u.z}g.faceArray=new Uint16Array(c);d=new $3Dmol.Mesh(e,d);d.doubleSided=!0;return d};this.addMesh=function(b){b={geo:b.geometry,mat:b.material,done:!0,finished:!1};var c=Ua();x[c]=b;return c};var ua=function(b){var c=[];$.each(b,function(b,d){c[b]=$.extend({},d)});return c},La={VDW:$3Dmol.SurfaceType.VDW,MS:$3Dmol.SurfaceType.MS,SAS:$3Dmol.SurfaceType.SAS,SES:$3Dmol.SurfaceType.SES};this.addSurface=\nfunction(b,c,d,g,n,f){var l=Ua();"string"==typeof b?void 0!==La[b]?b=La[b]:console.log("Surface type : "+b+" is not recognized"):void 0===b&&console.log("Surface type : "+b+" is not recognized");var u=null,p=null;d=ua(e(d));u=g?ua(e(g)):d;var t=!1;for(g=0;g<m.length;g++)if(m[g]){var y=m[g].getSymmetries();if(1<y.length||1==y.length&&!y[0].isIdentity()){t=!0;break}}y=function(d,g,m){p=n?ua(e(n)):m;var f=$3Dmol.getExtent(m,!0);if(c.map&&c.map.prop){var x=c.map.prop;var u=c.map.scheme||c.map.gradient||\nnew $3Dmol.Gradient.RWB;var t=u.range();t||(t=$3Dmol.getPropertyRange(m,x));c.colorscheme={prop:x,gradient:u}}var y=0;for(x=g.length;y<x;y++)u=g[y],u.surfaceColor=$3Dmol.getColorFromStyle(u,c);var q=oa(f),B=qa(f,g,m);if(p&&p.length&&0<p.length){var M=$3Dmol.getExtent(p,!0);B.sort(function(b,c){var d=function(b,c){var d=b.extent;b=d[1][0]-d[0][0]-c[2][0];var e=d[1][1]-d[0][1]-c[2][1];c=d[1][2]-d[0][2]-c[2][2];return b*b+e*e+c*c};b=d(b,M);c=d(c,M);return b-c})}var A=[];y=0;for(x=g.length;y<x;y++)u=\ng[y],A[y]={x:u.x,y:u.y,z:u.z,serial:y,elem:u.elem};if($3Dmol.syncSurface){m=function(c){return new Promise(function(e,m){m=b;var n=B[c].extent,f=B[c].atoms;var x=B[c].toshow;var l=new $3Dmol.ProteinSurface;l.initparm(n,1===m?!1:!0,q);l.fillvoxels(A,f);l.buildboundary();if(m==$3Dmol.SurfaceType.SES||m==$3Dmol.SurfaceType.MS)l.fastdistancemap(),l.boundingatom(!1),l.fillvoxelswaals(A,f);l.marchingcube(m);x=l.getFacesAndVertices(x);m=$3Dmol.splitMesh({vertexArr:x.vertices,faceArr:x.faces});n=0;for(f=\nm.length;n<f;n++)x={vertices:m[n].vertexArr,faces:m[n].faceArr},x=Oa(g,x,w),$3Dmol.mergeGeos(d.geo,x);h.render();e()})};f=[];for(y=0;y<B.length;y++)f.push(m(y));return Promise.all(f).then(function(){d.done=!0;return Promise.resolve(l)})}var z=[];0>b&&(b=0);y=0;for(x=4;y<x;y++)m=new Worker($3Dmol.SurfaceWorker),z.push(m),m.postMessage({type:-1,atoms:A,volume:q});return new Promise(function(c,e){var m=0,n=function(b){b=$3Dmol.splitMesh({vertexArr:b.data.vertices,faceArr:b.data.faces});for(var e=0,n=\nb.length;e<n;e++){var f=Oa(g,{vertices:b[e].vertexArr,faces:b[e].faceArr},w);$3Dmol.mergeGeos(d.geo,f)}h.render();m++;m==B.length&&(d.done=!0,c(l))},f=function(b){console.log(b.message+" ("+b.filename+":"+b.lineno+")");e(b)};for(y=0;y<B.length;y++){var x=z[y%z.length];x.onmessage=n;x.onerror=f;x.postMessage({type:b,expandedExtent:B[y].extent,extendedAtoms:B[y].atoms,atomsToShow:B[y].toshow})}})};c=c||{};var w=q(c),B=[];g=null;if(t){t={};var M={};for(g=0;g<m.length;g++)t[g]=[],M[g]=[];for(g=0;g<u.length;g++)t[u[g].model].push(u[g]);\nfor(g=0;g<d.length;g++)M[d[g].model].push(d[g]);u=[];for(g=0;g<m.length;g++)0<M[g].length&&(B.push({geo:new $3Dmol.Geometry(!0),mat:w,done:!1,finished:!1,symmetries:m[g].getSymmetries()}),u.append(y(B[g],t[g],M[g])));g=Promise.all(u)}else B.push({geo:new $3Dmol.Geometry(!0),mat:w,done:!1,finished:!1,symmetries:[new $3Dmol.Matrix4]}),g=y(B[B.length-1],u,d);x[l]=B;g.surfid=l;return f&&"function"==typeof f?(g.then(function(b){f(b)}),l):g};this.setSurfaceMaterialStyle=function(b,c){if(x[b]){b=x[b];for(var d=\n0;d<b.length;d++){var e=b[d].mat=q(c);b[d].mat.side=$3Dmol.FrontSide;if(c.color){b[d].mat.color=c.color;b[d].geo.colorsNeedUpdate=!0;var g=$3Dmol.CC.color(c.color);b[d].geo.setColors(function(){return g})}else if(e.voldata&&e.volscheme){var h=e.volscheme,m=e.voldata,n=h.range()||[-1,1];b[d].geo.setColors(function(b,c,d){b=m.getVal(b,c,d);return $3Dmol.CC.color(h.valueToHex(b,n))})}b[d].finished=!1}}return this};this.removeSurface=function(b){for(var c=x[b],d=0;d<c.length;d++)c[d]&&c[d].lastGL&&(void 0!==\nc[d].geo&&c[d].geo.dispose(),void 0!==c[d].mat&&c[d].mat.dispose(),P.remove(c[d].lastGL));delete x[b];ea();return this};this.removeAllSurfaces=function(){for(var b in x)if(x.hasOwnProperty(b)){for(var c=x[b],d=0;d<c.length;d++)c[d]&&c[d].lastGL&&(void 0!==c[d].geo&&c[d].geo.dispose(),void 0!==c[d].mat&&c[d].mat.dispose(),P.remove(c[d].lastGL));delete x[b]}ea();return this};this.jmolMoveTo=function(){var b=P.position;b="center { "+-b.x+" "+-b.y+" "+-b.z+" }; ";var c=T.quaternion;return b+="moveto .5 quaternion { "+\nc.x+" "+c.y+" "+c.z+" "+c.w+" };"};this.clear=function(){this.removeAllSurfaces();this.removeAllModels();this.removeAllLabels();this.removeAllShapes();ea();return this};this.mapAtomProperties=function(b,c){c=c||{};var g=e(c);if("function"==typeof b)for(var h=0,m=g.length;h<m;h++)c=g[h],b(c);else for(h=0,m=g.length;h<m;h++){c=g[h];for(var n=0,f=b.length;n<f;n++){var x=b[n];if(x.props)for(var l in x.props)if(x.props.hasOwnProperty(l)){a:{var u=c;var p=x;"undefined"===typeof p&&(p={});for(var t=d(p),\ny=0;y<t.length;y++)if(t[y].atomIsSelected(u,p)){u=!0;break a}u=!1}u&&(c.properties||(c.properties={}),c.properties[l]=x.props[l])}}}return this};this.linkViewer=function(b){G.push(b);return this};try{"function"===typeof l&&l(this)}catch(Pa){console.log("error with glviewer callback: "+Pa)}this.getPerceivedDistance=function(){return 150-T.position.z};this.setPerceivedDistance=function(b){T.position.z=150-b};this.setAutoEyeSeparation=function(b){var c=this.getPerceivedDistance();R.position.x=b||0<R.position.x?\nc*Math.tan(Math.PI/180*5):-c*Math.tan(Math.PI/180*5);R.lookAt(new $3Dmol.Vector3(0,0,T.position.z));return R.position.x}}}();$3Dmol.glmolViewer=$3Dmol.GLViewer;$3Dmol=$3Dmol||{};$3Dmol.Gradient=function(b,c){};$3Dmol.Gradient.valueToHex=function(b,c){};$3Dmol.Gradient.range=function(){};$3Dmol.Gradient.normalizeValue=function(b,c,d){if(c>=b)return d<b&&(d=b),d>c&&(d=c),{lo:b,hi:c,val:d};d>b&&(d=b);d<c&&(d=c);return{lo:c,hi:b,val:b-d+c}};\n$3Dmol.Gradient.RWB=function(b,c,d){"undefined"==typeof c&&$.isArray(b)&&2<=b.length&&(c=b[1],b=b[0]);this.valueToHex=function(e,f){e*=1;if(f){var q=f[0];var l=f[1]}else q=b,l=c;if(void 0===e)return 16777215;e=$3Dmol.Gradient.normalizeValue(q,l,e);q=e.lo;l=e.hi;e=e.val;f=f&&"undefined"!=typeof f[2]?f[2]:"undefined"!=typeof d?d:(q+l)/2;if(e<=f)return q=Math.floor(255*Math.sqrt((e-q)/(f-q))),16711680+256*q+q;q=Math.floor(255*Math.sqrt(1-(e-f)/(l-f)));return 65536*q+256*q+255};this.range=function(){return"undefined"!=\ntypeof b&&"undefined"!=typeof c?[b,c]:null}};\n$3Dmol.Gradient.ROYGB=function(b,c){"undefined"==typeof c&&$.isArray(b)&&2<=b.length&&(c=b[1],b=b[0]);this.valueToHex=function(d,e){d*=1;if(e){var f=e[0];e=e[1]}else f=b,e=c;if("undefined"==typeof d)return 16777215;d=$3Dmol.Gradient.normalizeValue(f,e,d);f=d.lo;e=d.hi;d=d.val;var q=(f+e)/2,l=(f+q)/2,t=(q+e)/2;if(d<l)return f=Math.floor(255*Math.sqrt((d-f)/(l-f))),256*f+16711680;if(d<q)return f=Math.floor(255*Math.sqrt(1-(d-l)/(q-l))),65536*f+65280;if(d<t)return f=Math.floor(255*Math.sqrt((d-q)/(t-\nq))),65280+1*f;f=Math.floor(255*Math.sqrt(1-(d-t)/(e-t)));return 256*f+255};this.range=function(){return"undefined"!=typeof b&&"undefined"!=typeof c?[b,c]:null}};\n$3Dmol.Gradient.Sinebow=function(b,c){var d=1;"undefined"==typeof c&&$.isArray(b)&&2<=b.length&&(c=b[1],b=b[0]);c<b&&(d=-1,b*=-1,c*=-1);this.valueToHex=function(e,f){e*=d;if(f){var q=f[0];f=f[1]}else q=b,f=c;if("undefined"==typeof e)return 16777215;e=$3Dmol.Gradient.normalizeValue(q,f,e);q=e.lo;f=e.hi;e=e.val;f=(e-q)/(f-q)*5/6+.5;q=Math.sin(Math.PI*f);e=Math.sin(Math.PI*(f+1/3));f=Math.sin(Math.PI*(f+2/3));return 65536*Math.floor(255*q*q)+256*Math.floor(255*f*f)+1*Math.floor(255*e*e)};this.range=\nfunction(){return"undefined"!=typeof b&&"undefined"!=typeof c?[b,c]:null}};$3Dmol.Gradient.builtinGradients={rwb:$3Dmol.Gradient.RWB,roygb:$3Dmol.Gradient.ROYGB,sinebow:$3Dmol.Gradient.Sinebow};$3Dmol.LabelCount=0;$3Dmol.Label=function(b,c){this.id=$3Dmol.LabelCount++;this.stylespec=c||{};this.canvas=document.createElement("canvas");this.canvas.width=134;this.canvas.height=35;this.context=this.canvas.getContext("2d");this.sprite=new $3Dmol.Sprite;this.text=b};\n$3Dmol.Label.prototype={constructor:$3Dmol.Label,getStyle:function(){return this.stylespec},setContext:function(){var b=function(b,d,e){"undefined"!=typeof b&&(e=b instanceof $3Dmol.Color?b.scaled():$3Dmol.CC.color(b).scaled());"undefined"!=typeof d&&(e.a=parseFloat(d));return e};return function(){var c=this.stylespec,d="undefined"==typeof c.useScreen?!1:c.useScreen,e=c.showBackground;if("0"===e||"false"===e)e=!1;"undefined"==typeof e&&(e=!0);var f=c.font?c.font:"sans-serif",q=parseInt(c.fontSize)?\nparseInt(c.fontSize):18,l=b(c.fontColor,c.fontOpacity,{r:255,g:255,b:255,a:1}),t=c.padding?c.padding:4,p=c.borderThickness?c.borderThickness:0,w=b(c.backgroundColor,c.backgroundOpacity,{r:0,g:0,b:0,a:1}),g=b(c.borderColor,c.borderOpacity,w),h=c.position?c.position:{x:-10,y:1,z:1},n=void 0!==c.inFront?c.inFront:!0;if("false"===n||"0"===n)n=!1;var y=c.alignment||$3Dmol.SpriteAlignment.topLeft;"string"==typeof y&&y in $3Dmol.SpriteAlignment&&(y=$3Dmol.SpriteAlignment[y]);var m="";c.bold&&(m="bold ");\nthis.context.font=m+q+"px  "+f;var x=this.context.measureText(this.text).width;e||(p=0);var u=x+2.5*p+2*t,M=1.25*q+2*p+2*t;if(c.backgroundImage){var O=c.backgroundImage;var B=c.backgroundWidth?c.backgroundWidth:O.width;m=c.backgroundHeight?c.backgroundHeight:O.height;B>u&&(u=B);m>M&&(M=m)}this.canvas.width=u;this.canvas.height=M;this.context.clearRect(0,0,this.canvas.width,this.canvas.height);m="";c.bold&&(m="bold ");this.context.font=m+q+"px  "+f;this.context.fillStyle="rgba("+w.r+","+w.g+","+w.b+\n","+w.a+")";this.context.strokeStyle="rgba("+g.r+","+g.g+","+g.b+","+g.a+")";this.context.lineWidth=p;e&&(e=this.context,w=f=p,u-=2*p,M-=2*p,g=0<p,e.beginPath(),e.moveTo(f+6,w),e.lineTo(f+u-6,w),e.quadraticCurveTo(f+u,w,f+u,w+6),e.lineTo(f+u,w+M-6),e.quadraticCurveTo(f+u,w+M,f+u-6,w+M),e.lineTo(f+6,w+M),e.quadraticCurveTo(f,w+M,f,w+M-6),e.lineTo(f,w+6),e.quadraticCurveTo(f,w,f+6,w),e.closePath(),e.fill(),g&&e.stroke());c.backgroundImage&&(O=c.backgroundImage,B=c.backgroundWidth?c.backgroundWidth:\nO.width,m=c.backgroundHeight?c.backgroundHeight:O.height,this.context.drawImage(O,0,0,B,m));this.context.fillStyle="rgba("+l.r+","+l.g+","+l.b+","+l.a+")";this.context.fillText(this.text,p+t,q+p+t,x);c=new $3Dmol.Texture(this.canvas);c.needsUpdate=!0;this.sprite.material=new $3Dmol.SpriteMaterial({map:c,useScreenCoordinates:d,alignment:y,depthTest:!n});this.sprite.scale.set(1,1,1);this.sprite.position.set(h.x,h.y,h.z)}}(),dispose:function(){void 0!==this.sprite.material.map&&this.sprite.material.map.dispose();\nvoid 0!==this.sprite.material&&this.sprite.material.dispose()}};$3Dmol=$3Dmol||{};\n$3Dmol.MarchingCubeInitializer=function(){var b={march:function(b,l,t,p){var q=!!p.fulltable,g=p.hasOwnProperty("origin")&&p.origin.hasOwnProperty("x")?p.origin:{x:0,y:0,z:0},h=!!p.voxel,n=p.matrix,y=p.nX||0,m=p.nY||0,x=p.nZ||0,u=p.scale||1,M=null;M=p.unitCube?p.unitCube:{x:u,y:u,z:u};var O=new Int32Array(y*m*x);p=0;for(u=O.length;p<u;++p)O[p]=-1;u=function(b,c,d,e,f,u){var p={x:0,y:0,z:0},t=f;!(e&1<<f)&&e&1<<u&&(t=u);t&1&&d++;t&2&&c++;t&4&&b++;n?(p=new $3Dmol.Vector3(b,c,d),p=p.applyMatrix4(n),p=\n{x:p.x,y:p.y,z:p.z}):(p.x=g.x+M.x*b,p.y=g.y+M.y*c,p.z=g.z+M.z*d);b=(m*b+c)*x+d;if(h)return l.push(p),l.length-1;0>O[b]&&(O[b]=l.length,l.push(p));return O[b]};var B=new Int32Array(12),S=q?e:c;q=q?f:d;for(p=0;p<y-1;++p)for(var H=0;H<m-1;++H)for(var z=0;z<x-1;++z){for(var A=0,D=0;8>D;++D)A|=!!(b[(m*(p+((D&4)>>2))+H+((D&2)>>1))*x+z+(D&1)]&2)<<D;if(0!==A&&255!==A){var G=S[A];if(0!==G)for(D=q[A],G&1&&(B[0]=u(p,H,z,A,0,1)),G&2&&(B[1]=u(p,H,z,A,1,3)),G&4&&(B[2]=u(p,H,z,A,3,2)),G&8&&(B[3]=u(p,H,z,A,2,0)),\nG&16&&(B[4]=u(p,H,z,A,4,5)),G&32&&(B[5]=u(p,H,z,A,5,7)),G&64&&(B[6]=u(p,H,z,A,7,6)),G&128&&(B[7]=u(p,H,z,A,6,4)),G&256&&(B[8]=u(p,H,z,A,0,4)),G&512&&(B[9]=u(p,H,z,A,1,5)),G&1024&&(B[10]=u(p,H,z,A,3,7)),G&2048&&(B[11]=u(p,H,z,A,2,6)),A=0;A<D.length;A+=3){G=B[D[A]];var L=B[D[A+1]],K=B[D[A+2]];h&&3<=A&&(l.push(l[G]),G=l.length-1,l.push(l[L]),L=l.length-1,l.push(l[K]),K=l.length-1);t.push(G);t.push(L);t.push(K)}}}},laplacianSmooth:function(b,c,d){var e=Array(c.length),f,g;var h=0;for(f=c.length;h<f;h++)e[h]=\n{x:0,y:0,z:0};var n=Array(20);for(h=0;20>h;h++)n[h]=Array(c.length);h=0;for(f=c.length;h<f;h++)n[0][h]=0;h=0;for(f=d.length/3;h<f;h++){var l=3*h,m=3*h+1,x=3*h+2;var u=!0;var t=0;for(g=n[0][d[l]];t<g;t++)if(d[m]==n[t+1][d[l]]){u=!1;break}u&&(n[0][d[l]]++,n[n[0][d[l]]][d[l]]=d[m]);u=!0;t=0;for(g=n[0][d[l]];t<g;t++)if(d[x]==n[t+1][d[l]]){u=!1;break}u&&(n[0][d[l]]++,n[n[0][d[l]]][d[l]]=d[x]);u=!0;t=0;for(g=n[0][d[m]];t<g;t++)if(d[l]==n[t+1][d[m]]){u=!1;break}u&&(n[0][d[m]]++,n[n[0][d[m]]][d[m]]=d[l]);\nu=!0;t=0;for(g=n[0][d[m]];t<g;t++)if(d[x]==n[t+1][d[m]]){u=!1;break}u&&(n[0][d[m]]++,n[n[0][d[m]]][d[m]]=d[x]);u=!0;for(t=0;t<n[0][d[x]];t++)if(d[l]==n[t+1][d[x]]){u=!1;break}u&&(n[0][d[x]]++,n[n[0][d[x]]][d[x]]=d[l]);u=!0;t=0;for(g=n[0][d[x]];t<g;t++)if(d[m]==n[t+1][d[x]]){u=!1;break}u&&(n[0][d[x]]++,n[n[0][d[x]]][d[x]]=d[m])}for(d=0;d<b;d++){h=0;for(f=c.length;h<f;h++)if(3>n[0][h])e[h].x=c[h].x,e[h].y=c[h].y,e[h].z=c[h].z;else if(3==n[0][h]||4==n[0][h]){e[h].x=0;e[h].y=0;t=e[h].z=0;for(g=n[0][h];t<\ng;t++)e[h].x+=c[n[t+1][h]].x,e[h].y+=c[n[t+1][h]].y,e[h].z+=c[n[t+1][h]].z;e[h].x+=.5*c[h].x;e[h].y+=.5*c[h].y;e[h].z+=.5*c[h].z;e[h].x/=.5+n[0][h];e[h].y/=.5+n[0][h];e[h].z/=.5+n[0][h]}else{e[h].x=0;e[h].y=0;t=e[h].z=0;for(g=n[0][h];t<g;t++)e[h].x+=c[n[t+1][h]].x,e[h].y+=c[n[t+1][h]].y,e[h].z+=c[n[t+1][h]].z;e[h].x+=1*c[h].x;e[h].y+=1*c[h].y;e[h].z+=1*c[h].z;e[h].x/=1+n[0][h];e[h].y/=1+n[0][h];e[h].z/=1+n[0][h]}h=0;for(f=c.length;h<f;h++)c[h].x=e[h].x,c[h].y=e[h].y,c[h].z=e[h].z}},edgeTable:[0,0,\n0,0,0,0,0,2816,0,0,0,1792,0,3328,3584,3840,0,0,0,138,0,21,0,134,0,0,0,652,0,2067,3865,3600,0,0,0,42,0,0,0,294,0,0,21,28,0,3875,1049,3360,0,168,162,170,0,645,2475,2210,0,687,293,172,4010,3747,3497,3232,0,0,0,0,0,69,0,900,0,0,0,1792,138,131,1608,1920,0,81,0,2074,84,85,84,86,0,81,0,3676,330,1105,1881,1616,0,0,0,42,0,69,0,502,0,0,21,3580,138,2035,1273,1520,2816,104,2337,106,840,581,367,102,2816,3695,3429,3180,1898,1635,1385,1120,0,0,0,0,0,0,0,3910,0,0,69,588,42,2083,41,2880,0,0,0,1722,0,2293,4095,3830,\n0,255,757,764,2538,2291,3065,2800,0,0,81,338,0,3925,1119,3414,84,855,85,340,2130,2899,89,2384,1792,712,194,1162,4036,3781,3535,3270,708,719,197,204,3018,2755,2505,2240,0,0,0,0,168,420,168,1958,162,162,676,2988,170,163,680,928,3328,3096,3328,3642,52,53,1855,1590,2340,2111,2869,2620,298,51,825,560,3584,3584,3090,3482,1668,1941,1183,1430,146,2975,2069,2460,154,915,153,400,3840,3592,3329,3082,1796,1541,1295,1030,2818,2575,2309,2060,778,515,265,0]},c=new Uint32Array(b.edgeTable),d=b.triTable=[[],[],[],\n[],[],[],[],[11,9,8],[],[],[],[8,10,9],[],[10,8,11],[9,11,10],[8,10,9,8,11,10],[],[],[],[1,7,3],[],[4,2,0],[],[2,1,7],[],[],[],[2,7,3,2,9,7],[],[1,4,11,1,0,4],[3,8,0,11,9,4,11,10,9],[4,11,9,11,10,9],[],[],[],[5,3,1],[],[],[],[2,5,8,2,1,5],[],[],[2,4,0],[3,2,4],[],[0,9,1,8,10,5,8,11,10],[3,4,0,3,10,4],[5,8,10,8,11,10],[],[3,5,7],[7,1,5],[1,7,3,1,5,7],[],[9,2,0,9,7,2],[0,3,8,1,7,11,1,5,7],[11,1,7,1,5,7],[],[9,1,0,5,3,2,5,7,3],[8,2,5,8,0,2],[2,5,3,5,7,3],[3,9,1,3,8,9,7,11,10,7,10,5],[9,1,0,10,7,11,10,\n5,7],[3,8,0,7,10,5,7,11,10],[11,5,7,11,10,5],[],[],[],[],[],[0,6,2],[],[7,2,9,7,9,8],[],[],[],[8,10,9],[7,1,3],[7,1,0],[6,9,3,6,10,9],[7,10,8,10,9,8],[],[6,0,4],[],[11,1,4,11,3,1],[2,4,6],[2,0,4,2,4,6],[2,4,6],[1,4,2,4,6,2],[],[6,0,4],[],[2,11,3,6,9,4,6,10,9],[8,6,1,8,1,3],[10,0,6,0,4,6],[8,0,3,9,6,10,9,4,6],[10,4,6,10,9,4],[],[],[],[5,3,1],[],[0,6,2],[],[7,4,8,5,2,1,5,6,2],[],[],[2,4,0],[7,4,8,2,11,3,10,5,6],[7,1,3],[5,6,10,0,9,1,8,7,4],[5,6,10,7,0,3,7,4,0],[10,5,6,4,8,7],[9,11,8],[3,5,6],[0,5,11,\n0,11,8],[6,3,5,3,1,5],[3,9,6,3,8,9],[9,6,0,6,2,0],[0,3,8,2,5,6,2,1,5],[1,6,2,1,5,6],[9,11,8],[1,0,9,6,10,5,11,3,2],[6,10,5,2,8,0,2,11,8],[3,2,11,10,5,6],[10,5,6,9,3,8,9,1,3],[0,9,1,5,6,10],[8,0,3,10,5,6],[10,5,6],[],[],[],[],[],[],[],[1,10,2,9,11,6,9,8,11],[],[],[6,0,2],[3,6,9,3,2,6],[3,5,1],[0,5,1,0,11,5],[0,3,5],[6,9,11,9,8,11],[],[],[],[4,5,9,7,1,10,7,3,1],[],[11,6,7,2,4,5,2,0,4],[11,6,7,8,0,3,1,10,2,9,4,5],[6,7,11,1,10,2,9,4,5],[],[4,1,0,4,5,1,6,7,3,6,3,2],[9,4,5,0,6,7,0,2,6],[4,5,9,6,3,2,6,7,\n3],[6,7,11,5,3,8,5,1,3],[6,7,11,4,1,0,4,5,1],[4,5,9,3,8,0,11,6,7],[9,4,5,7,11,6],[],[],[0,6,4],[8,6,4,8,1,6],[],[0,10,2,0,9,10,4,8,11,4,11,6],[10,2,1,6,0,3,6,4,0],[10,2,1,11,4,8,11,6,4],[4,2,6],[1,0,9,2,4,8,2,6,4],[2,4,0,2,6,4],[8,2,4,2,6,4],[11,4,1,11,6,4],[0,9,1,4,11,6,4,8,11],[3,6,0,6,4,0],[8,6,4,8,11,6],[10,8,9],[6,3,9,6,7,3],[6,7,1],[10,7,1,7,3,1],[7,11,6,8,10,2,8,9,10],[11,6,7,10,0,9,10,2,0],[2,1,10,7,11,6,8,0,3],[1,10,2,6,7,11],[7,2,6,7,9,2],[1,0,9,3,6,7,3,2,6],[7,0,6,0,2,6],[2,7,3,2,6,7],\n[7,11,6,3,9,1,3,8,9],[9,1,0,11,6,7],[0,3,8,11,6,7],[11,6,7],[],[],[],[],[5,3,7],[8,5,2,8,7,5],[5,3,7],[1,10,2,5,8,7,5,9,8],[1,7,5],[1,7,5],[9,2,7,9,7,5],[11,3,2,8,5,9,8,7,5],[1,3,7,1,7,5],[0,7,1,7,5,1],[9,3,5,3,7,5],[9,7,5,9,8,7],[8,10,11],[3,4,10,3,10,11],[8,10,11],[5,9,4,1,11,3,1,10,11],[2,4,5],[5,2,4,2,0,4],[0,3,8,5,9,4,10,2,1],[2,1,10,9,4,5],[2,8,5,2,11,8],[3,2,11,1,4,5,1,0,4],[9,4,5,8,2,11,8,0,2],[11,3,2,9,4,5],[8,5,3,5,1,3],[5,0,4,5,1,0],[3,8,0,4,5,9],[9,4,5],[11,9,10],[11,9,10],[1,11,4,1,10,\n11],[8,7,4,11,1,10,11,3,1],[2,7,9,2,9,10],[4,8,7,0,10,2,0,9,10],[2,1,10,0,7,4,0,3,7],[10,2,1,8,7,4],[1,7,4],[3,2,11,4,8,7,9,1,0],[11,4,2,4,0,2],[2,11,3,7,4,8],[4,1,7,1,3,7],[1,0,9,8,7,4],[3,4,0,3,7,4],[8,7,4],[8,9,10,8,10,11],[3,9,11,9,10,11],[0,10,8,10,11,8],[10,3,1,10,11,3],[2,8,10,8,9,10],[9,2,0,9,10,2],[8,0,3,1,10,2],[10,2,1],[1,11,9,11,8,9],[11,3,2,0,9,1],[11,0,2,11,8,0],[11,3,2],[8,1,3,8,9,1],[9,1,0],[8,0,3],[]],e=[0,265,515,778,2060,2309,2575,2822,1030,1295,1541,1804,3082,3331,3593,3840,400,\n153,915,666,2460,2197,2975,2710,1430,1183,1941,1692,3482,3219,3993,3728,560,825,51,314,2620,2869,2111,2358,1590,1855,1077,1340,3642,3891,3129,3376,928,681,419,170,2988,2725,2479,2214,1958,1711,1445,1196,4010,3747,3497,3232,2240,2505,2755,3018,204,453,719,966,3270,3535,3781,4044,1226,1475,1737,1984,2384,2137,2899,2650,348,85,863,598,3414,3167,3925,3676,1370,1107,1881,1616,2800,3065,2291,2554,764,1013,255,502,3830,4095,3317,3580,1786,2035,1273,1520,2912,2665,2403,2154,876,613,367,102,3942,3695,3429,\n3180,1898,1635,1385,1120,1120,1385,1635,1898,3180,3429,3695,3942,102,367,613,876,2154,2403,2665,2912,1520,1273,2035,1786,3580,3317,4095,3830,502,255,1013,764,2554,2291,3065,2800,1616,1881,1107,1370,3676,3925,3167,3414,598,863,85,348,2650,2899,2137,2384,1984,1737,1475,1226,4044,3781,3535,3270,966,719,453,204,3018,2755,2505,2240,3232,3497,3747,4010,1196,1445,1711,1958,2214,2479,2725,2988,170,419,681,928,3376,3129,3891,3642,1340,1077,1855,1590,2358,2111,2869,2620,314,51,825,560,3728,3993,3219,3482,1692,\n1941,1183,1430,2710,2975,2197,2460,666,915,153,400,3840,3593,3331,3082,1804,1541,1295,1030,2822,2575,2309,2060,778,515,265,0],f=[[],[8,3,0],[9,0,1],[8,3,1,8,1,9],[11,2,3],[11,2,0,11,0,8],[11,2,3,0,1,9],[2,1,11,1,9,11,11,9,8],[10,1,2],[8,3,0,1,2,10],[9,0,2,9,2,10],[3,2,8,2,10,8,8,10,9],[10,1,3,10,3,11],[1,0,10,0,8,10,10,8,11],[0,3,9,3,11,9,9,11,10],[8,10,9,8,11,10],[8,4,7],[3,0,4,3,4,7],[1,9,0,8,4,7],[9,4,1,4,7,1,1,7,3],[2,3,11,7,8,4],[7,11,4,11,2,4,4,2,0],[3,11,2,4,7,8,9,0,1],[2,7,11,2,1,7,1,4,7,\n1,9,4],[10,1,2,8,4,7],[2,10,1,0,4,7,0,7,3],[4,7,8,0,2,10,0,10,9],[2,7,3,2,9,7,7,9,4,2,10,9],[8,4,7,11,10,1,11,1,3],[11,4,7,1,4,11,1,11,10,1,0,4],[3,8,0,7,11,4,11,9,4,11,10,9],[7,11,4,4,11,9,11,10,9],[9,5,4],[3,0,8,4,9,5],[5,4,0,5,0,1],[4,8,5,8,3,5,5,3,1],[11,2,3,9,5,4],[9,5,4,8,11,2,8,2,0],[3,11,2,1,5,4,1,4,0],[8,5,4,2,5,8,2,8,11,2,1,5],[2,10,1,9,5,4],[0,8,3,5,4,9,10,1,2],[10,5,2,5,4,2,2,4,0],[3,4,8,3,2,4,2,5,4,2,10,5],[5,4,9,1,3,11,1,11,10],[0,9,1,4,8,5,8,10,5,8,11,10],[3,4,0,3,10,4,4,10,5,3,11,\n10],[4,8,5,5,8,10,8,11,10],[9,5,7,9,7,8],[0,9,3,9,5,3,3,5,7],[8,0,7,0,1,7,7,1,5],[1,7,3,1,5,7],[11,2,3,8,9,5,8,5,7],[9,2,0,9,7,2,2,7,11,9,5,7],[0,3,8,2,1,11,1,7,11,1,5,7],[2,1,11,11,1,7,1,5,7],[1,2,10,5,7,8,5,8,9],[9,1,0,10,5,2,5,3,2,5,7,3],[5,2,10,8,2,5,8,5,7,8,0,2],[10,5,2,2,5,3,5,7,3],[3,9,1,3,8,9,7,11,10,7,10,5],[9,1,0,10,7,11,10,5,7],[3,8,0,7,10,5,7,11,10],[11,5,7,11,10,5],[11,7,6],[0,8,3,11,7,6],[9,0,1,11,7,6],[7,6,11,3,1,9,3,9,8],[2,3,7,2,7,6],[8,7,0,7,6,0,0,6,2],[1,9,0,3,7,6,3,6,2],[7,6,2,\n7,2,9,2,1,9,7,9,8],[1,2,10,6,11,7],[2,10,1,7,6,11,8,3,0],[11,7,6,10,9,0,10,0,2],[7,6,11,3,2,8,8,2,10,8,10,9],[6,10,7,10,1,7,7,1,3],[6,10,1,6,1,7,7,1,0,7,0,8],[9,0,3,6,9,3,6,10,9,6,3,7],[6,10,7,7,10,8,10,9,8],[8,4,6,8,6,11],[11,3,6,3,0,6,6,0,4],[0,1,9,4,6,11,4,11,8],[1,9,4,11,1,4,11,3,1,11,4,6],[3,8,2,8,4,2,2,4,6],[2,0,4,2,4,6],[1,9,0,3,8,2,2,8,4,2,4,6],[9,4,1,1,4,2,4,6,2],[10,1,2,11,8,4,11,4,6],[10,1,2,11,3,6,6,3,0,6,0,4],[0,2,10,0,10,9,4,11,8,4,6,11],[2,11,3,6,9,4,6,10,9],[8,4,6,8,6,1,6,10,1,8,1,\n3],[1,0,10,10,0,6,0,4,6],[8,0,3,9,6,10,9,4,6],[10,4,6,10,9,4],[9,5,4,7,6,11],[4,9,5,3,0,8,11,7,6],[6,11,7,4,0,1,4,1,5],[6,11,7,4,8,5,5,8,3,5,3,1],[4,9,5,6,2,3,6,3,7],[9,5,4,8,7,0,0,7,6,0,6,2],[4,0,1,4,1,5,6,3,7,6,2,3],[7,4,8,5,2,1,5,6,2],[6,11,7,1,2,10,9,5,4],[11,7,6,8,3,0,1,2,10,9,5,4],[11,7,6,10,5,2,2,5,4,2,4,0],[7,4,8,2,11,3,10,5,6],[4,9,5,6,10,7,7,10,1,7,1,3],[5,6,10,0,9,1,8,7,4],[5,6,10,7,0,3,7,4,0],[10,5,6,4,8,7],[5,6,9,6,11,9,9,11,8],[0,9,5,0,5,3,3,5,6,3,6,11],[0,1,5,0,5,11,5,6,11,0,11,8],\n[11,3,6,6,3,5,3,1,5],[9,5,6,3,9,6,3,8,9,3,6,2],[5,6,9,9,6,0,6,2,0],[0,3,8,2,5,6,2,1,5],[1,6,2,1,5,6],[1,2,10,5,6,9,9,6,11,9,11,8],[1,0,9,6,10,5,11,3,2],[6,10,5,2,8,0,2,11,8],[3,2,11,10,5,6],[10,5,6,9,3,8,9,1,3],[0,9,1,5,6,10],[8,0,3,10,5,6],[10,5,6],[10,6,5],[8,3,0,10,6,5],[0,1,9,5,10,6],[10,6,5,9,8,3,9,3,1],[3,11,2,10,6,5],[6,5,10,2,0,8,2,8,11],[1,9,0,6,5,10,11,2,3],[1,10,2,5,9,6,9,11,6,9,8,11],[1,2,6,1,6,5],[0,8,3,2,6,5,2,5,1],[5,9,6,9,0,6,6,0,2],[9,6,5,3,6,9,3,9,8,3,2,6],[11,6,3,6,5,3,3,5,1],[0,\n5,1,0,11,5,5,11,6,0,8,11],[0,5,9,0,3,5,3,6,5,3,11,6],[5,9,6,6,9,11,9,8,11],[10,6,5,4,7,8],[5,10,6,7,3,0,7,0,4],[5,10,6,0,1,9,8,4,7],[4,5,9,6,7,10,7,1,10,7,3,1],[7,8,4,2,3,11,10,6,5],[11,6,7,10,2,5,2,4,5,2,0,4],[11,6,7,8,0,3,1,10,2,9,4,5],[6,7,11,1,10,2,9,4,5],[7,8,4,5,1,2,5,2,6],[4,1,0,4,5,1,6,7,3,6,3,2],[9,4,5,8,0,7,0,6,7,0,2,6],[4,5,9,6,3,2,6,7,3],[6,7,11,4,5,8,5,3,8,5,1,3],[6,7,11,4,1,0,4,5,1],[4,5,9,3,8,0,11,6,7],[9,4,5,7,11,6],[10,6,4,10,4,9],[8,3,0,9,10,6,9,6,4],[1,10,0,10,6,0,0,6,4],[8,6,4,\n8,1,6,6,1,10,8,3,1],[2,3,11,6,4,9,6,9,10],[0,10,2,0,9,10,4,8,11,4,11,6],[10,2,1,11,6,3,6,0,3,6,4,0],[10,2,1,11,4,8,11,6,4],[9,1,4,1,2,4,4,2,6],[1,0,9,3,2,8,2,4,8,2,6,4],[2,4,0,2,6,4],[3,2,8,8,2,4,2,6,4],[1,4,9,11,4,1,11,1,3,11,6,4],[0,9,1,4,11,6,4,8,11],[11,6,3,3,6,0,6,4,0],[8,6,4,8,11,6],[6,7,10,7,8,10,10,8,9],[9,3,0,6,3,9,6,9,10,6,7,3],[6,1,10,6,7,1,7,0,1,7,8,0],[6,7,10,10,7,1,7,3,1],[7,11,6,3,8,2,8,10,2,8,9,10],[11,6,7,10,0,9,10,2,0],[2,1,10,7,11,6,8,0,3],[1,10,2,6,7,11],[7,2,6,7,9,2,2,9,1,7,8,\n9],[1,0,9,3,6,7,3,2,6],[8,0,7,7,0,6,0,2,6],[2,7,3,2,6,7],[7,11,6,3,9,1,3,8,9],[9,1,0,11,6,7],[0,3,8,11,6,7],[11,6,7],[11,7,5,11,5,10],[3,0,8,7,5,10,7,10,11],[9,0,1,10,11,7,10,7,5],[3,1,9,3,9,8,7,10,11,7,5,10],[10,2,5,2,3,5,5,3,7],[5,10,2,8,5,2,8,7,5,8,2,0],[9,0,1,10,2,5,5,2,3,5,3,7],[1,10,2,5,8,7,5,9,8],[2,11,1,11,7,1,1,7,5],[0,8,3,2,11,1,1,11,7,1,7,5],[9,0,2,9,2,7,2,11,7,9,7,5],[11,3,2,8,5,9,8,7,5],[1,3,7,1,7,5],[8,7,0,0,7,1,7,5,1],[0,3,9,9,3,5,3,7,5],[9,7,5,9,8,7],[4,5,8,5,10,8,8,10,11],[3,0,4,\n3,4,10,4,5,10,3,10,11],[0,1,9,4,5,8,8,5,10,8,10,11],[5,9,4,1,11,3,1,10,11],[3,8,4,3,4,2,2,4,5,2,5,10],[10,2,5,5,2,4,2,0,4],[0,3,8,5,9,4,10,2,1],[2,1,10,9,4,5],[8,4,5,2,8,5,2,11,8,2,5,1],[3,2,11,1,4,5,1,0,4],[9,4,5,8,2,11,8,0,2],[11,3,2,9,4,5],[4,5,8,8,5,3,5,1,3],[5,0,4,5,1,0],[3,8,0,4,5,9],[9,4,5],[7,4,11,4,9,11,11,9,10],[3,0,8,7,4,11,11,4,9,11,9,10],[11,7,4,1,11,4,1,10,11,1,4,0],[8,7,4,11,1,10,11,3,1],[2,3,7,2,7,9,7,4,9,2,9,10],[4,8,7,0,10,2,0,9,10],[2,1,10,0,7,4,0,3,7],[10,2,1,8,7,4],[2,11,7,2,\n7,1,1,7,4,1,4,9],[3,2,11,4,8,7,9,1,0],[7,4,11,11,4,2,4,0,2],[2,11,3,7,4,8],[9,1,4,4,1,7,1,3,7],[1,0,9,8,7,4],[3,4,0,3,7,4],[8,7,4],[8,9,10,8,10,11],[0,9,3,3,9,11,9,10,11],[1,10,0,0,10,8,10,11,8],[10,3,1,10,11,3],[3,8,2,2,8,10,8,9,10],[9,2,0,9,10,2],[8,0,3,1,10,2],[10,2,1],[2,11,1,1,11,9,11,8,9],[11,3,2,0,9,1],[11,0,2,11,8,0],[11,3,2],[8,1,3,8,9,1],[9,1,0],[8,0,3],[]];return b};$3Dmol.MarchingCube=$3Dmol.MarchingCubeInitializer();\n$3Dmol.Parsers=function(){var b={},c=function(b){for(var c,d,e,g=0,f=b.length;g<f;g++)b[g].index||(b[g].index=g);f={};for(var u=0;u<b.length;u++)g=b[u],e=Math.floor(g.x/4.95),d=Math.floor(g.y/4.95),c=Math.floor(g.z/4.95),f[e]||(f[e]={}),f[e][d]||(f[e][d]={}),f[e][d][c]||(f[e][d][c]=[]),f[e][d][c].push(g);b=[{x:0,y:0,z:1},{x:0,y:1,z:-1},{x:0,y:1,z:0},{x:0,y:1,z:1},{x:1,y:-1,z:-1},{x:1,y:-1,z:0},{x:1,y:-1,z:1},{x:1,y:0,z:-1},{x:1,y:0,z:0},{x:1,y:0,z:1},{x:1,y:1,z:-1},{x:1,y:1,z:0},{x:1,y:1,z:1}];for(e in f)for(d in e=\nparseInt(e),f[e])for(c in d=parseInt(d),f[e][d]){c=parseInt(c);u=f[e][d][c];for(g=0;g<u.length;g++)for(var p=u[g],t=g+1;t<u.length;t++){var q=u[t];l(p,q)&&-1==p.bonds.indexOf(q.index)&&(p.bonds.push(q.index),p.bondOrder.push(1),q.bonds.push(p.index),q.bondOrder.push(1))}for(g=0;g<b.length;g++)if(t=b[g],f[e+t.x]&&f[e+t.x][d+t.y]&&f[e+t.x][d+t.y][c+t.z])for(p=u,t=f[e+t.x][d+t.y][c+t.z],q=0;q<p.length;q++)for(var w=p[q],H=0;H<t.length;H++){var z=t[H];if(l(w,z)){var A=w.bonds.indexOf(z.index),D=z.bonds.indexOf(w.index);\n-1==A&&-1==D?(w.bonds.push(z.index),w.bondOrder.push(1),z.bonds.push(w.index),z.bondOrder.push(1)):-1==A?(w.bonds.push(z.index),w.bondOrder.push(z.bondOrder[D])):-1==D&&(z.bonds.push(w.index),z.bondOrder.push(w.bondOrder[A]))}}}},d=function(b){var d=[],e=[],g;var m=0;for(g=b.length;m<g;m++){var f=b[m];f.index=m;f.hetflag?e.push(f):d.push(f)}c(e);d.sort(function(b,c){return b.chain!=c.chain?b.chain<c.chain?-1:1:b.resi-c.resi});e=b=-1;m=0;for(g=d.length;m<g;m++){f=d[m];if(f.resi!==b){b=f.resi;u||e++;\nvar u=!1}f.reschain=e;for(var p=m+1;p<d.length;p++){var t=d[p];if(t.chain!=f.chain)break;if(1<t.resi-f.resi)break;l(f,t)&&(-1===f.bonds.indexOf(t.index)&&(f.bonds.push(t.index),f.bondOrder.push(1),t.bonds.push(f.index),t.bondOrder.push(1)),f.resi!==t.resi&&(u=!0))}}},e=function(b){var c=[],d;var e=0;for(d=b.length;e<d;e++){b[e].index=e;var g=b[e];g.hetflag||"N"!==g.atom&&"O"!==g.atom||(c.push(g),g.hbondOther=null,g.hbondDistanceSq=Number.POSITIVE_INFINITY)}c.sort(function(b,c){return b.z-c.z});e=\n0;for(d=c.length;e<d;e++)for(g=c[e],b=e+1;b<d;b++){var f=c[b],u=f.z-g.z;if(3.2<u)break;if(f.atom!=g.atom){var l=Math.abs(f.y-g.y);if(!(3.2<l)){var p=Math.abs(f.x-g.x);3.2<p||(u=p*p+l*l+u*u,10.24<u||f.chain==g.chain&&4>Math.abs(f.resi-g.resi)||(u<g.hbondDistanceSq&&(g.hbondOther=f,g.hbondDistanceSq=u),u<f.hbondDistanceSq&&(f.hbondOther=g,f.hbondDistanceSq=u)))}}}},f=function(b){var c;e(b);var d={},g;var f=0;for(c=b.length;f<c;f++){var l=b[f];"undefined"===typeof d[l.chain]&&(d[l.chain]=[]);if(isFinite(l.hbondDistanceSq)){var u=\nl.hbondOther;"undefined"===typeof d[u.chain]&&(d[u.chain]=[]);4===Math.abs(u.resi-l.resi)&&(d[l.chain][l.resi]="h")}}for(g in d)for(l=1;l<d[g].length-1;l++)c=d[g][l-1],f=d[g][l+1],u=d[g][l],"h"==c&&c==f&&u!=c&&(d[g][l]=c);f=0;for(c=b.length;f<c;f++)l=b[f],isFinite(l.hbondDistanceSq)&&"h"!=d[l.chain][l.resi]&&"h"!=l.ss&&(d[l.chain][l.resi]="maybesheet");f=0;for(c=b.length;f<c;f++)if(l=b[f],isFinite(l.hbondDistanceSq)&&"maybesheet"==d[l.chain][l.resi]){u=l.hbondOther;var p=d[u.chain][u.resi];if("maybesheet"==\np||"s"==p)d[l.chain][l.resi]="s",d[u.chain][u.resi]="s"}for(g in d){for(l=1;l<d[g].length-1;l++)c=d[g][l-1],f=d[g][l+1],u=d[g][l],"s"==c&&c==f&&u!=c&&(d[g][l]=c);for(l=0;l<d[g].length;l++)u=d[g][l],"h"!=u&&"s"!=u||d[g][l-1]==u||d[g][l+1]==u||delete d[g][l]}f=0;for(c=b.length;f<c;f++)l=b[f],u=d[l.chain][l.resi],"undefined"!=typeof u&&"maybesheet"!=u&&(l.ss=u,d[l.chain][l.resi-1]!=u&&(l.ssbegin=!0),d[l.chain][l.resi+1]!=u&&(l.ssend=!0))};b.vasp=b.VASP=function(b,c){c=[[]];var d=b.replace(/^\\s+/,"").split(/[\\n\\r]/);\nif(3>d.length)return c;if(d[1].match(/\\d+/))b=parseFloat(d[1]);else return console.log("Warning: second line of the vasp structure file must be a number"),c;if(0>b)return console.log("Warning: Vasp implementation for negative lattice lengths is not yet available"),c;var e=new Float32Array(d[2].replace(/^\\s+/,"").split(/\\s+/));var g=new Float32Array(d[3].replace(/^\\s+/,"").split(/\\s+/));var f=new Float32Array(d[4].replace(/^\\s+/,"").split(/\\s+/));var h=new $3Dmol.Matrix4(e[0],e[1],e[2],0,g[0],g[1],\ng[2],0,f[0],f[1],f[2],0,0,0,0,1);h.multiplyScalar(b);c.modelData=[{symmetries:[],cryst:{matrix:h}}];h=d[5].replace(/\\s+/,"").replace(/\\s+$/,"").split(/\\s+/);var l=new Int16Array(d[6].replace(/^\\s+/,"").split(/\\s+/)),p=d[7].replace(/\\s+/,"");if(p.match(/C/))p="cartesian";else if(p.match(/D/))p="direct";else return console.log("Warning: Unknown vasp mode in POSCAR file: mode must be either C(artesian) or D(irect)"),c;if(h.length!=l.length)return console.log("Warning: declaration of atomary species wrong:"),\nconsole.log(h),console.log(l),c;d.splice(0,8);for(var t=0,q=0,w=h.length;q<w;q++){for(var z=h[q],A=0,D=l[q];A<D;A++){var G=new Float32Array(d[t+A].replace(/^\\s+/,"").split(/\\s+/)),L={};L.elem=z;"cartesian"==p?(L.x=b*G[0],L.y=b*G[1],L.z=b*G[2]):(L.x=b*(G[0]*e[0]+G[1]*g[0]+G[2]*f[0]),L.y=b*(G[0]*e[1]+G[1]*g[1]+G[2]*f[1]),L.z=b*(G[0]*e[2]+G[1]*g[2]+G[2]*f[2]));L.bonds=[];c[0].push(L)}t+=l[q]}return c};b.cube=b.CUBE=function(b,d){d=[[]];b=b.replace(/^\\s+/,"").split(/\\n\\r|\\r+/);if(6>b.length)return d;\nvar e=b[2].replace(/^\\s+/,"").replace(/\\s+/g," ").split(" "),g=Math.abs(parseFloat(e[0]));e=b[3].replace(/^\\s+/,"").replace(/\\s+/g," ").split(" ");e=0<parseFloat(e[0])?.529177:1;b=b.splice(6,g);g=d[d.length-1].length;for(var f=g+b.length,h=g;h<f;++h){var l={};l.serial=h;var p=b[h-g].replace(/^\\s+/,"").replace(/\\s+/g," ").split(" ");6==p[0]?l.elem="C":1==p[0]?l.elem="H":8==p[0]?l.elem="O":17==p[0]&&(l.elem="Cl");l.x=parseFloat(p[2])*e;l.y=parseFloat(p[3])*e;l.z=parseFloat(p[4])*e;l.hetflag=!0;l.bonds=\n[];l.bondOrder=[];l.properties={};d[d.length-1].push(l)}for(h=0;h<d.length;h++)c(d[h]);return d};b.xyz=b.XYZ=function(b,d){for(var e=[[]],g=b.split(/\\r?\\n|\\r/);0<g.length&&!(3>g.length);){var f=parseInt(g[0]);if(isNaN(f)||0>=f)break;if(g.length<f+2)break;b=2;var h=e[e.length-1].length;for(f=h+f;h<f;h++){var l=g[b++].replace(/^\\s+/,"").replace(/\\s+/g," ").split(" "),p={};p.serial=h;var t=l[0];p.atom=p.elem=t[0].toUpperCase()+t.substr(1).toLowerCase();p.x=parseFloat(l[1]);p.y=parseFloat(l[2]);p.z=parseFloat(l[3]);\np.hetflag=!0;p.bonds=[];p.bondOrder=[];p.properties={};e[e.length-1][h]=p;7<=l.length&&(p.dx=parseFloat(l[4]),p.dy=parseFloat(l[5]),p.dz=parseFloat(l[6]))}if(d.multimodel)e.push([]),g.splice(0,b);else break}for(h=0;h<e.length;h++)c(e[h]);if(d.onemol)for(d=e,e=[],e.push(d[0]),h=1;h<d.length;h++)for(b=e[0].length,g=0;g<d[h].length;g++){f=d[h][g];for(l=0;l<f.bonds.length;l++)f.bonds[l]+=b;f.index=e[0].length;f.serial=e[0].length;e[0].push(f)}return e};b.sdf=b.SDF=function(b,c){var d=[[]],e=!1;"undefined"!==\ntypeof c.keepH&&(e=!c.keepH);for(b=b.split(/\\r?\\n|\\r/);0<b.length&&!(4>b.length);){var g=parseInt(b[3].substr(0,3));if(isNaN(g)||0>=g)break;var f=parseInt(b[3].substr(3,3)),h=4;if(b.length<4+g+f)break;var l=[],p=d[d.length-1].length,t=p+g;for(g=p;g<t;g++,h++){var q=b[h];var w={},z=q.substr(31,3).replace(/ /g,"");w.atom=w.elem=z[0].toUpperCase()+z.substr(1).toLowerCase();"H"==w.elem&&e||(w.serial=g,l[g]=d[d.length-1].length,w.x=parseFloat(q.substr(0,10)),w.y=parseFloat(q.substr(10,10)),w.z=parseFloat(q.substr(20,\n10)),w.hetflag=!0,w.bonds=[],w.bondOrder=[],w.properties={},w.index=d[d.length-1].length,d[d.length-1].push(w))}for(g=0;g<f;g++,h++)q=b[h],t=l[parseInt(q.substr(0,3))-1+p],w=l[parseInt(q.substr(3,3))-1+p],q=parseInt(q.substr(6,3)),"undefined"!=typeof t&&"undefined"!=typeof w&&(d[d.length-1][t].bonds.push(w),d[d.length-1][t].bondOrder.push(q),d[d.length-1][w].bonds.push(t),d[d.length-1][w].bondOrder.push(q));if(c.multimodel){for(c.onemol||d.push([]);"$$$$"!=b[h];)h++;b.splice(0,++h)}else break}return d};\nb.cdjson=b.json=function(b,c){var d=[[]];"string"===typeof b&&(b=JSON.parse(b));var e=b.m,g=e[0].a;b=e[0].b;var f=e[0].s,h=void 0!==c&&void 0!==c.parseStyle?c.parseStyle:void 0!==f;c=d[d.length-1].length;for(e=0;e<g.length;e++){var l=g[e],p={};p.id=l.i;p.x=l.x;p.y=l.y;p.z=l.z||0;p.bonds=[];p.bondOrder=[];var t=l.l||"C";p.elem=t[0].toUpperCase()+t.substr(1).toLowerCase();p.serial=d[d.length-1].length;h&&(p.style=f[l.s||0]);d[d.length-1].push(p)}for(e=0;e<b.length;e++)h=b[e],g=h.b+c,f=h.e+c,h=h.o||\n1,l=d[d.length-1][g],p=d[d.length-1][f],l.bonds.push(f),l.bondOrder.push(h),p.bonds.push(g),p.bondOrder.push(h);return d};b.mcif=b.cif=function(b,d){function e(b,c){for(var d=[],e=0,g=0;g<b.length;){for(;b.substr(g,c.length)!==c&&g<b.length;){if("\'"===b[g])for(g++;g<b.length&&"\'"!==b[g];)g++;else if(\'"\'===b[g])for(g++;g<b.length&&\'"\'!==b[g];)g++;g++}d.push(b.substr(e,g-e));e=g+=c.length}return d}var g=[],h=!d.doAssembly;d=!d.duplicateAssemblyAtoms;var l=g.modelData=[],p=b.split(/\\r?\\n|\\r/);b=[];for(var q=\n!1,w=0;w<p.length;w++){var B=p[w].split("#")[0];q?";"===B[0]&&(q=!1):";"===B[0]&&(q=!0);if(q||""!==B){if(!q&&(B=B.trim(),"_"===B[0])){var S=B.split(/\\s/)[0].indexOf(".");-1<S&&(B[S]="_",B=B.substr(0,S)+"_"+B.substr(S+1))}b.push(B)}}for(w=0;w<b.length;){p=function(b){var c=b.match("-");b=b.replace(/[-xyz]/g,"");b=b.split("/");var d=void 0===b[1]?1:parseInt(b[1]);return(""===b[0]?1:parseInt(b[0]))/d*(c?-1:1)};for(S=function(b,c,d){return{x:N[0][0]*b+N[0][1]*c+N[0][2]*d,y:N[1][0]*b+N[1][1]*c+N[1][2]*\nd,z:N[2][0]*b+N[2][1]*c+N[2][2]*d}};!b[w].startsWith("data_")||"data_global"===b[w];)w++;w++;for(q={};w<b.length&&!b[w].startsWith("data_");)if(void 0===b[w][0])w++;else if("_"===b[w][0]){var H=b[w].split(/\\s/)[0].toLowerCase();B=q[H]=q[H]||[];var z=b[w].substr(b[w].indexOf(H)+H.length);if(""===z)if(w++,";"===b[w][0]){z=b[w].substr(1);for(w++;";"!==b[w];)z=z+"\\n"+b[w],w++;B.push(z)}else B.push(b[w]);else B.push(z.trim());w++}else if("loop_"===b[w].substr(0,5)){w++;for(z=[];""===b[w]||"_"===b[w][0];)""!==\nb[w]&&(H=b[w].split(/\\s/)[0].toLowerCase(),B=q[H]=q[H]||[],z.push(B)),w++;for(H=0;w<b.length&&"_"!==b[w][0]&&!b[w].startsWith("loop_")&&!b[w].startsWith("data_");){B=e(b[w]," ");for(var A=0;A<B.length;A++)""!==B[A]&&(z[H].push(B[A]),H=(H+1)%z.length);w++}}else w++;l.push({symmetries:[]});g.push([]);z=void 0!==q._atom_site_id?q._atom_site_id.length:q._atom_site_label.length;if(void 0!==q._cell_length_a){B=parseFloat(q._cell_length_a);H=parseFloat(q._cell_length_b);A=parseFloat(q._cell_length_c);var D=\nparseFloat(q._cell_angle_alpha)||90,G=parseFloat(q._cell_angle_beta)||90,L=parseFloat(q._cell_angle_gamma)||90,K=L*Math.PI/180,F=Math.cos(D*Math.PI/180),Q=Math.cos(G*Math.PI/180),I=Math.cos(K);K=Math.sin(K);var N=[[B,H*I,A*Q],[0,H*K,A*(F-Q*I)/K],[0,0,A*Math.sqrt(1-F*F-Q*Q-I*I+2*F*Q*I)/K]];l[l.length-1].cryst={a:B,b:H,c:A,alpha:D,beta:G,gamma:L}}for(B=0;B<z;B++)if(void 0===q._atom_site_group_pdb||"TER"!==q._atom_site_group_pdb[B])H={},void 0!==q._atom_site_cartn_x?(H.x=parseFloat(q._atom_site_cartn_x[B]),\nH.y=parseFloat(q._atom_site_cartn_y[B]),H.z=parseFloat(q._atom_site_cartn_z[B])):(A=S(parseFloat(q._atom_site_fract_x[B]),parseFloat(q._atom_site_fract_y[B]),parseFloat(q._atom_site_fract_z[B])),H.x=A.x,H.y=A.y,H.z=A.z),H.chain=q._atom_site_auth_asym_id?q._atom_site_auth_asym_id[B]:void 0,H.resi=q._atom_site_auth_seq_id?parseInt(q._atom_site_auth_seq_id[B]):void 0,H.resn=q._atom_site_auth_comp_id?q._atom_site_auth_comp_id[B].trim():void 0,H.atom=q._atom_site_auth_atom_id?q._atom_site_auth_atom_id[B].replace(/"/gm,\n""):void 0,H.hetflag=!q._atom_site_group_pdb||"HETA"===q._atom_site_group_pdb[B]||"HETATM"===q._atom_site_group_pdb[B],A=q._atom_site_type_symbol[B],H.elem=A[0].toUpperCase()+A.substr(1).toLowerCase(),H.bonds=[],H.ss="c",H.serial=B,H.bondOrder=[],H.properties={},g[g.length-1].push(H);if(void 0!==q._pdbx_struct_oper_list_id&&!h){for(B=0;B<q._pdbx_struct_oper_list_id.length;B++){S=parseFloat(q["_pdbx_struct_oper_list_matrix[1][1]"][B]);z=parseFloat(q["_pdbx_struct_oper_list_matrix[1][2]"][B]);H=parseFloat(q["_pdbx_struct_oper_list_matrix[1][3]"][B]);\nA=parseFloat(q["_pdbx_struct_oper_list_vector[1]"][B]);D=parseFloat(q["_pdbx_struct_oper_list_matrix[2][1]"][B]);G=parseFloat(q["_pdbx_struct_oper_list_matrix[2][2]"][B]);L=parseFloat(q["_pdbx_struct_oper_list_matrix[2][3]"][B]);F=parseFloat(q["_pdbx_struct_oper_list_vector[2]"][B]);Q=parseFloat(q["_pdbx_struct_oper_list_matrix[3][1]"][B]);I=parseFloat(q["_pdbx_struct_oper_list_matrix[3][2]"][B]);K=parseFloat(q["_pdbx_struct_oper_list_matrix[3][3]"][B]);var E=parseFloat(q["_pdbx_struct_oper_list_vector[3]"][B]);\nS=new $3Dmol.Matrix4(S,z,H,A,D,G,L,F,Q,I,K,E);l[l.length-1].symmetries.push(S)}for(B=0;B<g.length;B++)t(l[l.length-1].symmetries,d,g[B])}if(void 0!==q._symmetry_equiv_pos_as_xyz)for(B=0;B<q._symmetry_equiv_pos_as_xyz.length;B++){z=q._symmetry_equiv_pos_as_xyz[B].replace(/["\' ]/g,"").split(",").map(function(b){return b.replace(/-/g,"+-")});S=new $3Dmol.Matrix4(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);for(H=0;3>H;H++)for(A=z[H].split("+"),D=0;D<A.length;D++)G=A[D],""!==G&&(L=p(G),G.match("x")?S.elements[H+\n0]=L:G.match("y")?S.elements[H+4]=L:G.match("z")?S.elements[H+8]=L:S.elements[H+12]=L);z=new $3Dmol.Matrix4(N[0][0],N[0][1],N[0][2],0,N[1][0],N[1][1],N[1][2],0,N[2][0],N[2][1],N[2][2],0);H=(new $3Dmol.Matrix4).getInverse(z,!0);S=(new $3Dmol.Matrix4).multiplyMatrices(S,H);S=(new $3Dmol.Matrix4).multiplyMatrices(z,S);l[l.length-1].symmetries.push(S)}}for(B=0;B<g.length;B++)c(g[B]),f(g[B]),t(l[B].symmetries,d,g[B]);return g};b.mol2=b.MOL2=function(b,c){var d=[[]],e=!1;"undefined"!==typeof c.keepH&&(e=\n!c.keepH);var g=b.search(/@<TRIPOS>MOLECULE/),f=b.search(/@<TRIPOS>ATOM/);if(-1==g||-1==f)return d;for(b=b.substr(g,b.length).split(/\\r?\\n|\\r/);0<b.length;){g=[];var h=b[2].replace(/^\\s+/,"").replace(/\\s+/g," ").split(" "),l=parseInt(h[0]);f=0;1<h.length&&(f=parseInt(h[1]));var p=4,t;for(t=3;t<b.length;t++)if("@<TRIPOS>ATOM"==b[t]){p=t+1;break}t=d[d.length-1].length;for(l=t+l;t<l;t++){h=b[p++];h=h.replace(/^\\s+/,"").replace(/\\s+/g," ").split(" ");var q={},w=h[5].split(".")[0];q.atom=q.elem=w[0].toUpperCase()+\nw.substr(1).toLowerCase();if("H"!=q.elem||!e){w=d[d.length-1].length;var z=parseInt(h[0]);q.serial=z;q.x=parseFloat(h[2]);q.y=parseFloat(h[3]);q.z=parseFloat(h[4]);q.atom=h[5];h=parseFloat(h[8]);q.index=w;q.bonds=[];q.bondOrder=[];q.properties={charge:h,partialCharge:h};g[z]=w;d[d.length-1].push(q)}}for(t=!1;p<b.length;)if("@<TRIPOS>BOND"==b[p++]){t=!0;break}if(t&&f)for(t=0;t<f;t++)h=b[p++],h=h.replace(/^\\s+/,"").replace(/\\s+/g," ").split(" "),l=parseInt(h[1]),q=d[d.length-1][g[l]],w=parseInt(h[2]),\nz=d[d.length-1][g[w]],h=parseInt(h[3]),isNaN(h)&&(h=1),void 0!==q&&void 0!==z&&(q.bonds.push(g[w]),q.bondOrder.push(h),z.bonds.push(g[l]),z.bondOrder.push(h));if(c.multimodel)c.onemol||d.push([]),b.splice(0,p),b.join("\\n");else break}return d};var q={H:.37,He:.32,Li:1.34,Be:.9,B:.82,C:.77,N:.75,O:.73,F:.71,Ne:.69,Na:1.54,Mg:1.3,Al:1.18,Si:1.11,P:1.06,S:1.02,Cl:.99,Ar:.97,K:1.96,Ca:1.74,Sc:1.44,Ti:1.56,V:1.25,Mn:1.39,Fe:1.25,Co:1.26,Ni:1.21,Cu:1.38,Zn:1.31,Ga:1.26,Ge:1.22,Se:1.16,Br:1.14,Kr:1.1,Rb:2.11,\nSr:1.92,Y:1.62,Zr:1.48,Nb:1.37,Mo:1.45,Tc:1.56,Ru:1.26,Rh:1.35,Pd:1.31,Ag:1.53,Cd:1.48,In:1.44,Sn:1.41,Sb:1.38,Te:1.35,I:1.33,Xe:1.3,Cs:2.25,Ba:1.98,Lu:1.6,Hf:1.5,Ta:1.38,W:1.46,Re:1.59,Os:1.44,Ir:1.37,Pt:1.28,Au:1.44,Hg:1.49,Tl:1.48,Pb:1.47,Bi:1.46,Rn:1.45},l=function(b,c){var d=(q[b.elem]||1.6)+(q[c.elem]||1.6);d+=.25;d*=d;var e=b.x-c.x;e*=e;if(e>d)return!1;var g=b.y-c.y;g*=g;if(g>d)return!1;var f=b.z-c.z;f*=f;if(f>d)return!1;e=e+g+f;return isNaN(e)?!1:.5>e?!1:e>d?!1:b.altLoc!=c.altLoc&&" "!=b.altLoc&&\n" "!=c.altLoc?!1:!0},t=function(b,c,d){var e=d.length,g=e,f,h;if(!c)for(c=0;c<b.length;c++){if(!b[c].isIdentity()){var l=new $3Dmol.Vector3;for(h=0;h<e;h++){var n=[];for(f=0;f<d[h].bonds.length;f++)n.push(d[h].bonds[f]+g);l.set(d[h].x,d[h].y,d[h].z);l.applyMatrix4(b[c]);f={};for(var p in d[h])f[p]=d[h][p];f.x=l.x;f.y=l.y;f.z=l.z;f.bonds=n;d.push(f)}g=d.length}}else if(1<b.length)for(c=0;c<d.length;c++){e=[];for(f=0;f<b.length;f++)b[f].isIdentity()||(g=new $3Dmol.Vector3,g.set(d[c].x,d[c].y,d[c].z),\ng.applyMatrix4(b[f]),e.push(g));d[c].symmetries=e}},p=function(b,c){b=b.replace(/ /g,"");0<b.length&&"H"==b[0]&&"Hg"!=b&&(b="H");1<b.length&&(b=b[0].toUpperCase()+b.substr(1).toLowerCase(),"undefined"===typeof q[b]?b=b[0]:c&&("Ca"==b?b="C":"Cd"==b&&(b="C")));return b};b.pdb=b.PDB=b.pdbqt=b.PDBQT=function(b,c){var e=[],g={};e.modelData=[];for(var h=b.split(/\\r?\\n|\\r/);0<h.length;){var l,u=h;b=g;h=[];var w=!c.keepH,O=!!c.noSecondaryStructure,B=!c.noComputeSecondaryStructure,S=!c.doAssembly,H=!c.duplicateAssemblyAtoms,\nz=c.altLoc?c.altLoc:"A",A={symmetries:[]},D=[],G=[],L={};for(l=0;l<u.length;l++){var K=u[l].replace(/^\\s*/,"");var F=K.substr(0,6);if(0==F.indexOf("END")){D=u.slice(l+1);if("END"==F)for(var Q in b)b.hasOwnProperty(Q)&&delete b[Q];break}else if("ATOM  "==F||"HETATM"==F){var I=K.substr(16,1);if(" "==I||I==z||"*"==z){var N=parseInt(K.substr(6,5));var E=K.substr(12,4).replace(/ /g,"");var J=K.substr(17,3).replace(/ /g,"");var R=K.substr(21,1);var W=parseInt(K.substr(22,4));var V=K.substr(26,1);var U=\nparseFloat(K.substr(30,8));var ca=parseFloat(K.substr(38,8));var T=parseFloat(K.substr(46,8));var P=parseFloat(K.substr(60,8));var Y=K.substr(76,2).replace(/ /g,"");Y=""===Y||"undefined"===typeof q[Y]?p(K.substr(12,2),"A"==K[0]):Y[0].toUpperCase()+Y.substr(1).toLowerCase();"H"==Y&&w||(F="H"==F[0]?!0:!1,G[N]=h.length,h.push({resn:J,x:U,y:ca,z:T,elem:Y,hetflag:F,altLoc:I,chain:R,resi:W,icode:V,rescode:W+(" "!=V?"^"+V:""),serial:N,atom:E,bonds:[],ss:"c",bondOrder:[],properties:{},b:P,pdbline:K}))}}else if("SHEET "==\nF){P=K.substr(21,1);E=parseInt(K.substr(22,4));K.substr(32,1);K=parseInt(K.substr(33,4));P in b||(b[P]={});b[P][E]="s1";for(E+=1;E<K;E++)b[P][E]="s";b[P][K]="s2"}else if("CONECT"==F)for(P=parseInt(K.substr(6,5)),E=G[P],N=h[E],J=[11,16,21,26],P=0;4>P;P++){if(R=parseInt(K.substr(J[P],5)),R=G[R],W=h[R],void 0!==N&&void 0!==W)if(L[[E,R]])for(L[[E,R]]+=1,W=0;W<N.bonds.length;W++)N.bonds[W]==R&&(V=L[[E,R]],N.bondOrder[W]=4<=V?1:V);else if(L[[E,R]]=1,0==N.bonds.length||N.bonds[N.bonds.length-1]!=R)N.bonds.push(R),\nN.bondOrder.push(1)}else if("HELIX "==F){P=K.substr(19,1);E=parseInt(K.substr(21,4));K.substr(31,1);K=parseInt(K.substr(33,4));P in b||(b[P]={});b[P][E]="h1";for(E+=1;E<K;E++)b[P][E]="h";b[P][K]="h2"}else if(S||"REMARK"!=F||"BIOMT"!=K.substr(13,5))"CRYST1"==F?(E=parseFloat(K.substr(7,8)),P=parseFloat(K.substr(16,8)),N=parseFloat(K.substr(25,8)),J=parseFloat(K.substr(34,6)),R=parseFloat(K.substr(41,6)),K=parseFloat(K.substr(48,6)),A.cryst={a:E,b:P,c:N,alpha:J,beta:R,gamma:K}):"ANISOU"==F&&(N=parseInt(K.substr(6,\n5)),P=h[G[N]])&&(K=K.substr(30).trim().split(/\\s+/),K={u11:parseInt(K[0]),u22:parseInt(K[1]),u33:parseInt(K[2]),u12:parseInt(K[3]),u13:parseInt(K[4]),u23:parseInt(K[5])},P.uMat=K);else{E=new $3Dmol.Matrix4;for(P=1;3>=P;P++)if(K=u[l].replace(/^\\s*/,""),parseInt(K.substr(18,1))==P)E.elements[P-1]=parseFloat(K.substr(23,10)),E.elements[P-1+4]=parseFloat(K.substr(33,10)),E.elements[P-1+8]=parseFloat(K.substr(43,10)),E.elements[P-1+12]=parseFloat(K.substr(53)),l++;else for(;"BIOMT"==K.substr(13,5);)l++,\nK=u[l].replace(/^\\s*/,"");E.elements[3]=0;E.elements[7]=0;E.elements[11]=0;E.elements[15]=1;A.symmetries.push(E);l--}}(new Date).getTime();l=h;u=0;for(w=l.length;u<w;u++)for(z=l[u],L=0;L<z.bonds.length;L++)K=l[z.bonds[L]],P=G[z.serial],K&&P&&0>K.bonds.indexOf(P)&&(K.bonds.push(P),K.bondOrder.push(z.bondOrder[L]));d(h);S||t(A.symmetries,H,h);B&&!O&&((new Date).getTime(),f(h));(new Date).getTime();a:{O=void 0;B=b;for(O in B){O=!1;break a}O=!0}if(!O)for(l=0;l<h.length;l++)E=h[l],void 0!==E&&E.chain in\nb&&E.resi in b[E.chain]&&(O=b[E.chain][E.resi],E.ss=O[0],1<O.length&&("1"==O[1]?E.ssbegin=!0:"2"==O[1]&&(E.ssend=!0)));h=[h,A,D];b=h[0];A=h[1];h=h[2];if(0!=b.length){if(c.multimodel&&c.onemol&&0<e.length)for(A=e[0].length,D=0;D<b.length;D++){O=b[D];O.index=D;for(B=0;B<O.bonds.length;B++)O.bonds[B]+=A;e[0].push(O)}else e.modelData.push(A),e.push(b);if(!c.multimodel)break}}return e};b.pqr=b.PQR=function(b,c){var e=[[]],g=!c.noSecondaryStructure;e.modelData=[{symmetries:[]}];var h=[];b=b.split(/\\r?\\n|\\r/);\nvar l;for(l=0;l<b.length;l++){var p=b[l].replace(/^\\s*/,"");var t=p.substr(0,6);if(0==t.indexOf("END"))if(c.multimodel)c.onemol||e.push([]);else break;else if("ATOM  "==t||"HETATM"==t){var q=parseInt(p.substr(6,5));t=p.substr(12,4).replace(/ /g,"");var w=p.substr(17,3),S=p.substr(21,1),H=parseInt(p.substr(22,4));var z=p.substr(30).trim().split(/\\s+/);var A=parseFloat(z[0]),D=parseFloat(z[1]),G=parseFloat(z[2]),L=parseFloat(z[3]),K=parseFloat(z[4]),F=t[0];1<t.length&&t[1].toUpperCase()!=t[1]&&(F=t.substr(0,\n2));z="H"==p[0]?!0:!1;h[q]=e[e.length-1].length;e[e.length-1].push({resn:w,x:A,y:D,z:G,elem:F,hetflag:z,chain:S,resi:H,serial:q,atom:t,bonds:[],ss:"c",bondOrder:[],properties:{charge:L,partialCharge:L,radius:K},pdbline:p})}else if("CONECT"==t)for(t=parseInt(p.substr(6,5)),q=e[e.length-1][h[t]],t=0;4>t;t++)w=parseInt(p.substr([11,16,21,26][t],5)),S=e[e.length-1][h[w]],void 0!==q&&void 0!==S&&(q.bonds.push(h[w]),q.bondOrder.push(1))}for(l=0;l<e.length;l++)d(e[l]),g&&f(e[l]);return e};var w=function(b){return 0==\nb||2==b||4==b?"h":3==b?"s":"c"};b.mmtf=b.MMTF=function(b,c){var d=!c.keepH,e=c.altLoc?c.altLoc:"A",g=!!c.noSecondaryStructure,h=!c.noComputeSecondaryStructure,l=!c.doAssembly,p=!c.duplicateAssemblyAtoms,q=c.assemblyIndex?c.assemblyIndex:0;"string"==typeof b&&(b=$3Dmol.base64ToArray(b));b=MMTF.decode(b);var B=[[]],S=B.modelData=[],H=0,z=0,A=0,D=0,G=b.secStructList,L=b.insCodeList,K=b.bFactorList,F=b.altLocList,Q=b.occupancyList,I=b.bondAtomList,N=b.bondOrderList,E=b.numModels;if(0==E)return B;c.multimodel||\n(E=1);var J,R=[];if(!l&&b.bioAssemblyList&&0<b.bioAssemblyList.length){var W=b.bioAssemblyList[q].transformList;q=0;for(J=W.length;q<J;q++){var V=new $3Dmol.Matrix4(W[q].matrix);V.transpose();R.push(V)}}V=null;b.unitCell&&(q=b.unitCell,V={a:q[0],b:q[1],c:q[2],alpha:q[3],beta:q[4],gamma:q[5]});var U=0;for(W=0;W<E;W++){var ca=b.chainsPerModel[W],T=B[B.length-1],P=[];S.push({symmetries:R,cryst:V});for(q=0;q<ca;++q){var Y=b.groupsPerChain[z],aa=String.fromCharCode.apply(null,b.chainIdList.subarray(4*\nz,4*z+4)).replace(/\\0/g,"");b.chainNameList&&(aa=String.fromCharCode.apply(null,b.chainNameList.subarray(4*z,4*z+4)).replace(/\\0/g,""));var C=A,Z="";for(J=0;J<Y;++J){var X=b.groupList[b.groupTypeList[A]];var da=X.atomNameList.length;var ma=0;var ra=!1;var ha=!1;if(G){ma=G[A];var ja=w(ma);if(0==A||ja!=Z)ra=!0;Z=ja;var Ta=A+1;if(Ta>=G.length||w(G[Ta]!=ja))ha=!0}b.insCodeList&&String.fromCharCode(L[A]);var la=b.groupIdList[A];var Ba=X.groupName;Ta=D;for(ja=0;ja<da;++ja){var xa=X.elementList[ja];if(!d||\n"H"!=xa){var Ua="";K&&(Ua=K[D]);var ya="";F&&F[D]&&(ya=String.fromCharCode(F[D]));var ea="";Q&&(ea=Q[D]);if(""==ya||ya==e||"*"==e){var Za=b.atomIdList[D],mb=X.atomNameList[ja],fb=0;X.atomChargeList&&(fb=X.atomChargeList[ja]);var za=b.xCoordList[D],$a=b.yCoordList[D],Wa=b.zCoordList[D];P[D]=T.length;T.push({resn:Ba,x:za,y:$a,z:Wa,elem:xa,hetflag:0>ma,chain:aa,resi:la,icode:ya,rescode:la+(" "!=ya?"^"+ya:""),serial:Za,altLoc:ya,index:D,atom:mb,bonds:[],ss:w(ma),ssbegin:ra,ssend:ha,bondOrder:[],properties:{charge:fb,\noccupancy:ea},b:Ua})}}D+=1}ra=X.bondAtomList;ja=0;for(ma=X.bondOrderList.length;ja<ma;++ja)ha=Ta+ra[2*ja],la=Ta+ra[2*ja+1],da=X.bondOrderList[ja],ha=P[ha],xa=P[la],Ba=T[ha],la=T[xa],Ba&&la&&(Ba.bonds.push(xa),Ba.bondOrder.push(da),la.bonds.push(ha),la.bondOrder.push(da));A+=1}A=C;for(J=0;J<Y;++J)A+=1;z+=1}if(I)for(ja=U,ma=I.length;ja<ma;ja+=2){ha=I[ja];la=I[ja+1];da=N?N[ja/2]:1;if(ha>=D){U=ja;break}ha=P[ha];xa=P[la];Ba=T[ha];la=T[xa];Ba&&la&&(Ba.bonds.push(xa),Ba.bondOrder.push(da),la.bonds.push(ha),\nla.bondOrder.push(da))}c.multimodel&&(c.onemol||B.push([]));if(!l)for(J=0;J<B.length;J++)t(S[H].symmetries,p,B[J]);H+=1}h&&!g&&f(B);return B};b.prmtop=b.PRMTOP=function(b,c){function d(b){var c=h.indexOf(l.filter(function(c){return c.includes(b)})[0]);if(Number.isInteger(c)&&0<c){for(;!h[c].includes("FORMAT");)c++;return c}return-1}function e(b){var c=h[b].match(/\\((\\d*)\\S*/),d=h[b].match(/[a-zA-Z](\\d*)\\)\\s*/);null==d&&(d=h[b].match(/[a-zA-Z](\\d*)\\.\\d*\\)\\s*/));return[c[1],d[1]]}var f;c=[];var g=0,\nh=b.split(/\\r?\\n|\\r/);if(0<h.length&&h[0].includes("VERSION")){var l=h.filter(function(b){return b.includes("POINTERS")||b.includes("ATOM_NAME")||b.includes("CHARGE")||b.includes("RADII")||b.includes("BONDS_INC_HYDROGEN")||b.includes("BONDS_WITHOUT_HYDROGEN")});b=d("POINTERS");if(-1==b)return[];var p=e(b),q=parseInt(h[b+1].slice(0,p[1]));if(isNaN(q)||0>=q)return[];b=d("ATOM_NAME");if(-1==b)return[];p=e(b);for(var t=p[0],w=0;w<q/p[0];w++){w==parseInt(q/p[0])&&(t=q%p[0]);for(var z=0;z<t;z++){var A=\n{};A.serial=g;A.x=0;A.y=0;A.z=0;A.atom=h[b+1].slice(p[1]*z,p[1]*(z+1));A.elem=h[b+1].slice(p[1]*z,p[1]*z+1);A.properties={charge:"",radii:""};A.bonds=[];A.bondOrder=[];c.push(A);g++}b++}b=d("CHARGE");if(-1!=b)for(p=e(b),g=0,t=p[0],w=0;w<q/p[0];w++){w==parseInt(q/p[0])&&(t=q%p[0]);for(z=0;z<t;z++)c[g].properties.charge=parseFloat(h[b+1].slice(p[1]*z,p[1]*(z+1))),g++;b++}b=d("RADII");if(-1!=b)for(p=e(b),g=0,t=p[0],w=0;w<q/p[0];w++){w==parseInt(q/p[0])&&(t=q%p[0]);for(z=0;z<t;z++)c[g].properties.radii=\nparseFloat(h[b+1].slice(p[1]*z,p[1]*(z+1))),g++;b++}b=d("BONDS_WITHOUT_HYDROGEN");if(-1!=b)for(p=e(b),g=0,t=p[0],b+=1;!h[b].match(/^%FLAG/);){h[b+1].match(/^%FLAG/)&&(t=q%p[0]);for(z=0;z<t;z++)0==g%3&&(f=parseInt(h[b].slice(p[1]*z,p[1]*(z+1))/3)),1==g%3&&c[f].bonds.push(parseInt(h[b].slice(p[1]*z,p[1]*(z+1))/3)),g++;b++}b=d("BONDS_INC_HYDROGEN");if(-1!=b)for(p=e(b),g=0,t=p[0],b+=1;!h[b].match(/^%FLAG/);){h[b+1].match(/^%FLAG/)&&(t=q%p[0]);for(z=0;z<t;z++)0==g%3&&(f=parseInt(h[b].slice(p[1]*z,p[1]*\n(z+1))/3)),1==g%3&&c[f].bonds.push(parseInt(h[b].slice(p[1]*z,p[1]*(z+1))/3)),g++;b++}}else return[];return[c]};b.gro=b.GRO=function(b,c){c=[];for(b=b.split(/\\r?\\n|\\r/);0<b.length&&!(3>b.length);){var e=parseInt(b[1]);if(isNaN(e)||0>=e)break;if(b.length<e+3)break;var f=[];c.push(f);var g=2,h=f.length;for(e=h+e;h<e;h++){var l=b[g++],q={};q.serial=h;q.atom=l.slice(10,15).trim();q.elem=p(q.atom,!0);q.x=10*parseFloat(l.slice(20,28));q.y=10*parseFloat(l.slice(28,36));q.z=10*parseFloat(l.slice(36,44));\nq.resi=parseInt(l.slice(0,5));q.resn=l.slice(5,10).trim();q.bonds=[];q.bondOrder=[];q.properties={};44<l.length&&(q.dx=10*parseFloat(l.slice(44,52)),q.dy=10*parseFloat(l.slice(52,60)),q.dz=10*parseFloat(l.slice(60,68)));f[h]=q}if(b.length<=g+3&&(f=b[g++].trim().split(/\\s+/),3==f.length)){for(e=0;3>e;e++)f[e]=10*parseFloat(f[e]);c.box=f}b.splice(0,++g)}for(h=0;h<c.length;h++)d(c[h]);return c};b.lammpstrj=b.LAMMPSTRJ=function(b,d){var e=[],f={id:"serial",type:"atom",element:"elem",q:"charge",radius:"radius",\nx:"x",xu:"x",xs:"x",xsu:"x",y:"y",yu:"y",ys:"y",ysu:"y",z:"z",zu:"z",zs:"z",zsu:"z"};b=b.split(/\\r?\\n|\\r/);for(var g=0,h=0,l=0;l<b.length-9;){for(;l<b.length;l++)if(b[l].match(/ITEM: NUMBER OF ATOMS/)&&(h=parseInt(b[l+1])),b[l].match(/ITEM: ATOMS/)){g=l+1;break}var p=b[g-1].replace("ITEM: ATOMS ","").split(" ");e.push([]);for(l=g;l<g+h;l++){for(var q={},t={},w=b[l].split(" "),H=0;H<w.length;H++){var z=f[p[H]];void 0!=z&&("serial"==z?q[z]=parseInt(w[H]):"x"==z||"y"==z||"z"===z?q[z]=parseFloat(w[H]):\n"charge"==z||"radius"==z?t[z]=parseFloat(w[H]):q[z]=w[H]);q.properties=t;q.bonds=[];q.bondOrder=[]}e[e.length-1][l-g]=q}l=g+h-1}if(d.assignbonds)for(d=0;d<e.length;d++)c(e[d]);return e};return b}();$3Dmol=$3Dmol||{};\n$3Dmol.partialCharges={"ALA:N":-.15,"ALA:CA":.1,"ALA:CB":0,"ALA:C":.6,"ALA:O":-.55,"ARG:N":-.15,"ARG:CA":.1,"ARG:CB":0,"ARG:CG":0,"ARG:CD":.1,"ARG:NE":-.1,"ARG:CZ":.5,"ARG:NH1":.25,"ARG:NH2":.25,"ARG:C":.6,"ARG:O":-.55,"ASN:N":-.15,"ASN:CA":.1,"ASN:CB":0,"ASN:CG":.55,"ASN:OD1":-.55,"ASN:ND2":0,"ASN:C":.6,"ASN:O":-.55,"ASP:N":-.15,"ASP:CA":.1,"ASP:CB":0,"ASP:CG":.14,"ASP:OD1":-.57,"ASP:OD2":-.57,"ASP:C":.6,"ASP:O":-.55,"CYS:N":-.15,"CYS:CA":.1,"CYS:CB":.19,"CYS:SG":-.19,"CYS:C":.6,"CYS:O":-.55,"GLN:N":-.15,\n"GLN:CA":.1,"GLN:CB":0,"GLN:CG":0,"GLN:CD":.55,"GLN:OE1":-.55,"GLN:NE2":0,"GLN:C":.6,"GLN:O":-.55,"GLU:N":-.15,"GLU:CA":.1,"GLU:CB":0,"GLU:CG":0,"GLU:CD":.14,"GLU:OE1":-.57,"GLU:OE2":-.57,"GLU:C":.6,"GLU:O":-.55,"GLY:N":-.15,"GLY:CA":.1,"GLY:C":.6,"GLY:O":-.55,"HIS:N":-.15,"HIS:CA":.1,"HIS:CB":0,"HIS:CG":.1,"HIS:ND1":-.1,"HIS:CD2":.1,"HIS:NE2":-.4,"HIS:CE1":.3,"HIS:C":.6,"HIS:O":-.55,"ILE:N":-.15,"ILE:CA":.1,"ILE:CB":0,"ILE:CG2":0,"ILE:CG1":0,"ILE:CD":0,"ILE:C":.6,"ILE:O":-.55,"LEU:N":-.15,"LEU:CA":.1,\n"LEU:CB":0,"LEU:CG":0,"LEU:CD1":0,"LEU:CD2":0,"LEU:C":.6,"LEU:O":-.55,"LYS:N":-.15,"LYS:CA":.1,"LYS:CB":0,"LYS:CG":0,"LYS:CD":0,"LYS:CE":.25,"LYS:NZ":.75,"LYS:C":.6,"LYS:O":-.55,"MET:N":-.15,"MET:CA":.1,"MET:CB":0,"MET:CG":.06,"MET:SD":-.12,"MET:CE":.06,"MET:C":.6,"MET:O":-.55,"PHE:N":-.15,"PHE:CA":.1,"PHE:CB":0,"PHE:CG":0,"PHE:CD1":0,"PHE:CD2":0,"PHE:CE1":0,"PHE:CE2":0,"PHE:CZ":0,"PHE:C":.6,"PHE:O":-.55,"PRO:N":-.25,"PRO:CD":.1,"PRO:CA":.1,"PRO:CB":0,"PRO:CG":0,"PRO:C":.6,"PRO:O":-.55,"SER:N":-.15,\n"SER:CA":.1,"SER:CB":.25,"SER:OG":-.25,"SER:C":.6,"SER:O":-.55,"THR:N":-.15,"THR:CA":.1,"THR:CB":.25,"THR:OG1":-.25,"THR:CG2":0,"THR:C":.6,"THR:O":-.55,"TRP:N":-.15,"TRP:CA":.1,"TRP:CB":0,"TRP:CG":-.03,"TRP:CD2":.1,"TRP:CE2":-.04,"TRP:CE3":-.03,"TRP:CD1":.06,"TRP:NE1":-.06,"TRP:CZ2":0,"TRP:CZ3":0,"TRP:CH2":0,"TRP:C":.6,"TRP:O":-.55,"TYR:N":-.15,"TYR:CA":.1,"TYR:CB":0,"TYR:CG":0,"TYR:CD1":0,"TYR:CE1":0,"TYR:CD2":0,"TYR:CE2":0,"TYR:CZ":.25,"TYR:OH":-.25,"TYR:C":.6,"TYR:O":-.55,"VAL:N":-.15,"VAL:CA":.1,\n"VAL:CB":0,"VAL:CG1":0,"VAL:CG2":0,"VAL:C":.6,"VAL:O":-.55};$3Dmol.applyPartialCharges=function(b,c){c&&"undefined"!==typeof b.partialCharge||b.resn&&b.atom&&(b.properties.partialCharge=$3Dmol.partialCharges[b.resn+":"+b.atom])};"undefined"===typeof console&&(console={log:function(){}});\n$3Dmol.ProteinSurface=function(){var b=0,c=0,d=0,e=2,f=0,q=0,l=0,t=0,p=null,w=null,g=null,h=0,n=0,y=0,m=0,x=0,u=0,M={H:1.2,Li:1.82,Na:2.27,K:2.75,C:1.7,N:1.55,O:1.52,F:1.47,P:1.8,S:1.8,CL:1.75,BR:1.85,SE:1.9,ZN:1.39,CU:1.4,NI:1.63,X:2},O=function(b){return b.elem&&"undefined"!=typeof M[b.elem]?b.elem:"X"},B={},S={},H,z,A=[new Int32Array([1,0,0]),new Int32Array([-1,0,0]),new Int32Array([0,1,0]),new Int32Array([0,-1,0]),new Int32Array([0,0,1]),new Int32Array([0,0,-1]),new Int32Array([1,1,0]),new Int32Array([1,\n-1,0]),new Int32Array([-1,1,0]),new Int32Array([-1,-1,0]),new Int32Array([1,0,1]),new Int32Array([1,0,-1]),new Int32Array([-1,0,1]),new Int32Array([-1,0,-1]),new Int32Array([0,1,1]),new Int32Array([0,1,-1]),new Int32Array([0,-1,1]),new Int32Array([0,-1,-1]),new Int32Array([1,1,1]),new Int32Array([1,1,-1]),new Int32Array([1,-1,1]),new Int32Array([-1,1,1]),new Int32Array([1,-1,-1]),new Int32Array([-1,-1,1]),new Int32Array([-1,1,-1]),new Int32Array([-1,-1,-1])];this.getFacesAndVertices=function(f){var h=\n{},l;var m=0;for(l=f.length;m<l;m++)h[f[m]]=!0;f=z;m=0;for(l=f.length;m<l;m++)f[m].x=f[m].x/e-b,f[m].y=f[m].y/e-c,f[m].z=f[m].z/e-d;var n=[];m=0;for(l=H.length;m<l;m+=3){var q=H[m],t=H[m+1],u=H[m+2],x=f[t].atomid,y=f[u].atomid,A=f[q].atomid;x<A&&(A=x);y<A&&(A=y);h[A]&&q!==t&&t!==u&&q!==u&&(n.push(q),n.push(t),n.push(u))}g=w=p=null;return{vertices:f,faces:n}};this.initparm=function(A,B,z){1E6<z&&(e=1);z=1/e*5.5;h=A[0][0];m=A[1][0];n=A[0][1];x=A[1][1];y=A[0][2];u=A[1][2];B?(h-=1.4+z,n-=1.4+z,y-=1.4+\nz,m+=1.4+z,x+=1.4+z,u+=1.4+z):(h-=z,n-=z,y-=z,m+=z,x+=z,u+=z);h=Math.floor(h*e)/e;n=Math.floor(n*e)/e;y=Math.floor(y*e)/e;m=Math.ceil(m*e)/e;x=Math.ceil(x*e)/e;u=Math.ceil(u*e)/e;b=-h;c=-n;d=-y;l=Math.ceil(e*(m-h))+1;q=Math.ceil(e*(x-n))+1;f=Math.ceil(e*(u-y))+1;this.boundingatom(B);t=1.4*e;p=new Uint8Array(l*q*f);w=new Float64Array(l*q*f);g=new Int32Array(l*q*f)};this.boundingatom=function(b){var c=[];flagradius=b;for(var d in M)if(M.hasOwnProperty(d)){var f=M[d];c[d]=b?(f+1.4)*e+.5:f*e+.5;f=c[d]*\nc[d];S[d]=Math.floor(c[d])+1;B[d]=new Int32Array(S[d]*S[d]);for(j=indx=0;j<S[d];j++)for(k=0;k<S[d];k++){var g=j*j+k*k;g>f?B[d][indx]=-1:(g=Math.sqrt(f-g),B[d][indx]=Math.floor(g));indx++}}};this.fillvoxels=function(b,c){var d;var e=0;for(d=p.length;e<d;e++)p[e]=0,w[e]=-1,g[e]=-1;for(e in c)d=b[c[e]],void 0!==d&&this.fillAtom(d,b);e=0;for(d=p.length;e<d;e++)p[e]&1&&(p[e]|=2)};this.fillAtom=function(h,m){var n,t,w,u,x,A;var y=Math.floor(.5+e*(h.x+b));var z=Math.floor(.5+e*(h.y+c));var G=Math.floor(.5+\ne*(h.z+d));var L=O(h),D=0,H=q*f;var M=0;for(A=S[L];M<A;M++)for(n=0;n<A;n++){if(-1!=B[L][D])for(w=-1;2>w;w++)for(u=-1;2>u;u++)for(x=-1;2>x;x++)if(0!==w&&0!==u&&0!==x){var P=w*M;var Y=x*n;for(t=0;t<=B[L][D];t++){var aa=t*u;var C=y+P;var Z=z+aa;var X=G+Y;if(!(0>C||0>Z||0>X||C>=l||Z>=q||X>=f))if(X=C*H+Z*f+X,p[X]&1){var da=m[g[X]];da.serial!=h.serial&&(C=y+P-Math.floor(.5+e*(da.x+b)),Z=z+aa-Math.floor(.5+e*(da.y+c)),da=G+Y-Math.floor(.5+e*(da.z+d)),P*P+aa*aa+Y*Y<C*C+Z*Z+da*da&&(g[X]=h.serial))}else p[X]|=\n1,g[X]=h.serial}}D++}};this.fillvoxelswaals=function(b,c){var d;var e=0;for(d=p.length;e<d;e++)p[e]&=-3;for(e in c)d=b[c[e]],void 0!==d&&this.fillAtomWaals(d,b)};this.fillAtomWaals=function(h,m){var n=0,t,w,u,x,A,y;var z=Math.floor(.5+e*(h.x+b));var G=Math.floor(.5+e*(h.y+c));var D=Math.floor(.5+e*(h.z+d));var L=O(h),H=q*f;var M=0;for(y=S[L];M<y;M++)for(t=0;t<y;t++){if(-1!=B[L][n])for(u=-1;2>u;u++)for(x=-1;2>x;x++)for(A=-1;2>A;A++)if(0!==u&&0!==x&&0!==A){var P=u*M;var Y=A*t;for(w=0;w<=B[L][n];w++){var aa=\nw*x;var C=z+P;var Z=G+aa;var X=D+Y;if(!(0>C||0>Z||0>X||C>=l||Z>=q||X>=f))if(X=C*H+Z*f+X,p[X]&2){var da=m[g[X]];da.serial!=h.serial&&(C=z+P-Math.floor(.5+e*(da.x+b)),Z=G+aa-Math.floor(.5+e*(da.y+c)),da=D+Y-Math.floor(.5+e*(da.z+d)),P*P+aa*aa+Y*Y<C*C+Z*Z+da*da&&(g[X]=h.serial))}else p[X]|=2,g[X]=h.serial}}n++}};this.buildboundary=function(){var b=q*f;for(i=0;i<l;i++)for(j=0;j<f;j++)for(k=0;k<q;k++){var c=i*b+k*f+j;if(p[c]&1)for(var d=0;26>d;){var e=i+A[d][0],g=j+A[d][2],h=k+A[d][1];if(-1<e&&e<l&&-1<\nh&&h<q&&-1<g&&g<f&&!(p[e*b+h*f+g]&1)){p[c]|=4;break}else d++}}};var D=function(b,c,d){var e=new Int32Array(b*c*d*3);this.set=function(b,f,g,h){b=3*((b*c+f)*d+g);e[b]=h.ix;e[b+1]=h.iy;e[b+2]=h.iz};this.get=function(b,f,g){b=3*((b*c+f)*d+g);return{ix:e[b],iy:e[b+1],iz:e[b+2]}}};this.fastdistancemap=function(){var b,c,d,g=new D(l,q,f),h=q*f,m=t*t,n=[];for(b=0;b<l;b++)for(c=0;c<q;c++)for(d=0;d<f;d++){var u=b*h+c*f+d;p[u]&=-3;if(p[u]&1&&p[u]&4){var x={ix:b,iy:c,iz:d};g.set(b,c,d,x);n.push(x);w[u]=0;p[u]|=\n2;p[u]&=-5}}do for(d=this.fastoneshell(n,g),n=[],b=0,c=d.length;b<c;b++)u=h*d[b].ix+f*d[b].iy+d[b].iz,p[u]&=-5,w[u]<=1.0404*m&&n.push({ix:d[b].ix,iy:d[b].iy,iz:d[b].iz});while(0!==n.length);b=e-.5;0>b&&(b=0);m-=.5/(.1+b);for(b=0;b<l;b++)for(c=0;c<q;c++)for(d=0;d<f;d++)u=b*h+c*f+d,p[u]&=-5,p[u]&1&&(!(p[u]&2)||p[u]&2&&w[u]>=m)&&(p[u]|=4)};this.fastoneshell=function(b,c){var d,e,g=[];if(0===b.length)return g;tnv={ix:-1,iy:-1,iz:-1};var h=q*f;var m=0;for(e=b.length;m<e;m++){var n=b[m].ix;var t=b[m].iy;\nvar u=b[m].iz;var x=c.get(n,t,u);for(d=0;6>d;d++)if(tnv.ix=n+A[d][0],tnv.iy=t+A[d][1],tnv.iz=u+A[d][2],tnv.ix<l&&-1<tnv.ix&&tnv.iy<q&&-1<tnv.iy&&tnv.iz<f&&-1<tnv.iz){var y=tnv.ix*h+f*tnv.iy+tnv.iz;if(p[y]&1&&!(p[y]&2)){c.set(tnv.ix,tnv.iy,u+A[d][2],x);var z=tnv.ix-x.ix;var B=tnv.iy-x.iy;var D=tnv.iz-x.iz;z=z*z+B*B+D*D;w[y]=z;p[y]|=2;p[y]|=4;g.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})}else p[y]&1&&p[y]&2&&(z=tnv.ix-x.ix,B=tnv.iy-x.iy,D=tnv.iz-x.iz,z=z*z+B*B+D*D,z<w[y]&&(c.set(tnv.ix,tnv.iy,tnv.iz,x),w[y]=\nz,p[y]&4||(p[y]|=4,g.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz}))))}}m=0;for(e=b.length;m<e;m++)for(n=b[m].ix,t=b[m].iy,u=b[m].iz,x=c.get(n,t,u),d=6;18>d;d++)tnv.ix=n+A[d][0],tnv.iy=t+A[d][1],tnv.iz=u+A[d][2],tnv.ix<l&&-1<tnv.ix&&tnv.iy<q&&-1<tnv.iy&&tnv.iz<f&&-1<tnv.iz&&(y=tnv.ix*h+f*tnv.iy+tnv.iz,p[y]&1&&!(p[y]&2)?(c.set(tnv.ix,tnv.iy,u+A[d][2],x),z=tnv.ix-x.ix,B=tnv.iy-x.iy,D=tnv.iz-x.iz,z=z*z+B*B+D*D,w[y]=z,p[y]|=2,p[y]|=4,g.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})):p[y]&1&&p[y]&2&&(z=tnv.ix-x.ix,B=tnv.iy-\nx.iy,D=tnv.iz-x.iz,z=z*z+B*B+D*D,z<w[y]&&(c.set(tnv.ix,tnv.iy,tnv.iz,x),w[y]=z,p[y]&4||(p[y]|=4,g.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})))));m=0;for(e=b.length;m<e;m++)for(n=b[m].ix,t=b[m].iy,u=b[m].iz,x=c.get(n,t,u),d=18;26>d;d++)tnv.ix=n+A[d][0],tnv.iy=t+A[d][1],tnv.iz=u+A[d][2],tnv.ix<l&&-1<tnv.ix&&tnv.iy<q&&-1<tnv.iy&&tnv.iz<f&&-1<tnv.iz&&(y=tnv.ix*h+f*tnv.iy+tnv.iz,p[y]&1&&!(p[y]&2)?(c.set(tnv.ix,tnv.iy,u+A[d][2],x),z=tnv.ix-x.ix,B=tnv.iy-x.iy,D=tnv.iz-x.iz,z=z*z+B*B+D*D,w[y]=z,p[y]|=2,p[y]|=\n4,g.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})):p[y]&1&&p[y]&2&&(z=tnv.ix-x.ix,B=tnv.iy-x.iy,D=tnv.iz-x.iz,z=z*z+B*B+D*D,z<w[y]&&(c.set(tnv.ix,tnv.iy,tnv.iz,x),w[y]=z,p[y]&4||(p[y]|=4,g.push({ix:tnv.ix,iy:tnv.iy,iz:tnv.iz})))));return g};this.marchingcubeinit=function(b){for(var c=0,d=p.length;c<d;c++)1==b?p[c]&=-5:4==b?(p[c]&=-3,p[c]&4&&(p[c]|=2),p[c]&=-5):2==b?p[c]&4&&p[c]&2?p[c]&=-5:p[c]&4&&!(p[c]&2)&&(p[c]|=2):3==b&&(p[c]&=-5)};this.marchingcube=function(b){this.marchingcubeinit(b);z=[];H=[];$3Dmol.MarchingCube.march(p,\nz,H,{smooth:1,nX:l,nY:q,nZ:f});b=q*f;for(var c=0,d=z.length;c<d;c++)z[c].atomid=g[z[c].x*b+f*z[c].y+z[c].z];$3Dmol.MarchingCube.laplacianSmooth(1,z,H)}};(function(){});\n$3Dmol.VolumeData=function(b,c,d){this.unit={x:1,y:1,z:1};this.origin={x:0,y:0,z:0};this.size={x:0,y:0,z:0};this.data=new Float32Array([]);this.matrix=null;c=c.toLowerCase();if(/\\.gz$/.test(c)){c=c.replace(/\\.gz$/,"");try{b=this[c]&&this[c].isbinary?pako.inflate(b):(new TextDecoder("utf-8")).decode(pako.inflate(b))}catch(q){console.log(q)}}if(this[c])this[c](b);if(d){if(d.negate)for(b=0,c=this.data.length;b<c;b++)this.data[b]=-this.data[b];if(d.normalize){var e=0;b=0;for(c=this.data.length;b<c;b++)e+=\nthis.data[b];d=e/this.data.length;console.log("computed mean: "+d);b=e=0;for(c=this.data.length;b<c;b++){var f=this.data[b]-d;e+=f*f}e/=this.data.length;b=0;for(c=this.data.length;b<c;b++)this.data[b]=(this.data[b]-d)/e}}};\n$3Dmol.VolumeData.prototype.getVal=function(b,c,d){this.matrix?(this.inversematrix||(this.inversematrix=(new $3Dmol.Matrix4).getInverse(this.matrix)),d=new $3Dmol.Vector3(b,c,d),d=d.applyMatrix4(this.inversematrix),b=d.x,c=d.y,d=d.z):(b-=this.origin.x,c-=this.origin.y,d-=this.origin.z,b/=this.unit.x,c/=this.unit.y,d/=this.unit.z);b=Math.round(b);c=Math.round(c);d=Math.round(d);return 0>b||b>=this.size.x||0>c||c>=this.size.y||0>d||d>=this.size.z?0:this.data[b*this.size.y*this.size.z+c*this.size.z+\nd]};$3Dmol.VolumeData.prototype.getCoordinates=function(b){var c=b/(this.size.y*this.size.z),d=b%(this.size.y*this.size.z);b%=this.size.z;c*=this.unit.x;d*=this.unit.y;b*=this.unit.z;c+=this.origin.x;d+=this.origin.y;b+=this.origin.z;return{x:c,y:d,z:b}};\n$3Dmol.VolumeData.prototype.vasp=function(b){var c=b.replace(/^\\s+/,"").split(/[\\n\\r]/),d=$3Dmol.Parsers.vasp(b)[0].length;if(0==d)console.log("No good formating of CHG or CHGCAR file, not atomic information provided in the file."),this.data=[];else{var e=parseFloat(c[1]);var f=c[2].replace(/^\\s+/,"").split(/\\s+/);b=(new $3Dmol.Vector3(parseFloat(f[0]),parseFloat(f[1]),parseFloat(f[2]))).multiplyScalar(1.889725992*e);f=c[3].replace(/^\\s+/,"").split(/\\s+/);var q=(new $3Dmol.Vector3(parseFloat(f[0]),\nparseFloat(f[1]),parseFloat(f[2]))).multiplyScalar(1.889725992*e);f=c[4].replace(/^\\s+/,"").split(/\\s+/);f=(new $3Dmol.Vector3(parseFloat(f[0]),parseFloat(f[1]),parseFloat(f[2]))).multiplyScalar(1.889725992*e);e=b.x*(q.y*f.z-f.y*q.z)-q.x*(b.y*f.z-f.y*b.z)+f.x*(b.y*q.z-q.y*b.z);e=Math.abs(e)/Math.pow(1.889725992,3);e=1/e;c.splice(0,8+d+1);var l=c[0].replace(/^\\s+/,"").replace(/\\s+/g," ").split(" ");d=Math.abs(l[0]);var t=Math.abs(l[1]);l=Math.abs(l[2]);var p=this.origin=new $3Dmol.Vector3(0,0,0);this.size=\n{x:d,y:t,z:l};this.unit=new $3Dmol.Vector3(b.x,q.y,f.z);b=b.multiplyScalar(1/(1.889725992*d));q=q.multiplyScalar(1/(1.889725992*t));f=f.multiplyScalar(1/(1.889725992*l));if(0!=b.y||0!=b.z||0!=q.x||0!=q.z||0!=f.x||0!=f.y)this.matrix=new $3Dmol.Matrix4(b.x,q.x,f.x,0,b.y,q.y,f.y,0,b.z,q.z,f.z,0,0,0,0,1),this.matrix=this.matrix.multiplyMatrices(this.matrix,(new $3Dmol.Matrix4).makeTranslation(p.x,p.y,p.z)),this.origin=new $3Dmol.Vector3(0,0,0),this.unit=new $3Dmol.Vector3(1,1,1);c.splice(0,1);c=c.join(" ");\nc=c.replace(/^\\s+/,"");c=c.split(/[\\s\\r]+/);c.splice(d*t*l+1);c=new Float32Array(c);for(b=0;b<c.length;b++)c[b]=c[b]*e*.036749309;this.data=c}};\n$3Dmol.VolumeData.prototype.dx=function(b){b=b.split(/[\\n\\r]+/);var c,d,e=/gridpositions\\s+counts\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)/,f=/^origin\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)/,q=/^delta\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)/,l=/data follows/;for(c=0;c<b.length;c++){var t=b[c];if(d=e.exec(t)){var p=parseInt(d[1]),w=parseInt(d[2]);d=parseInt(d[3]);this.size={x:p,y:w,z:d}}else if(d=q.exec(t)){p=parseFloat(d[1]);0==parseFloat(d[2])&&0==parseFloat(d[3])||console.log("Non-orthogonal delta matrix not currently supported in dx format");\nc+=1;t=b[c];d=q.exec(t);if(null==d){console.log("Parse error in dx delta matrix");return}w=parseFloat(d[2]);0==parseFloat(d[1])&&0==parseFloat(d[3])||console.log("Non-orthogonal delta matrix not currently supported in dx format");c+=1;t=b[c];d=q.exec(t);if(null==d){console.log("Parse error in dx delta matrix");return}t=parseFloat(d[3]);0==parseFloat(d[1])&&0==parseFloat(d[2])||console.log("Non-orthogonal delta matrix not currently supported in dx format");this.unit=new $3Dmol.Vector3(p,w,t)}else if(d=\nf.exec(t))p=parseFloat(d[1]),w=parseFloat(d[2]),d=parseFloat(d[3]),this.origin=new $3Dmol.Vector3(p,w,d);else if(l.exec(t))break}c+=1;this.size&&this.origin&&this.unit&&this.size?(b=b.splice(c).join(" "),b=b.split(/[\\s\\r]+/),this.data=new Float32Array(b)):console.log("Error parsing dx format")};\n$3Dmol.VolumeData.prototype.cube=function(b){b=b.replace(/^\\s+/,"").split(/[\\n\\r]+/);if(!(6>b.length)){var c=b[2].replace(/^\\s+/,"").replace(/\\s+/g," ").split(" "),d=parseFloat(c[0]),e=Math.abs(d),f=this.origin=new $3Dmol.Vector3(parseFloat(c[1]),parseFloat(c[2]),parseFloat(c[3]));c=b[3].replace(/^\\s+/,"").replace(/\\s+/g," ").split(" ");var q=0<c[0]?.529177:1;f.multiplyScalar(q);var l=Math.abs(c[0]),t=(new $3Dmol.Vector3(parseFloat(c[1]),parseFloat(c[2]),parseFloat(c[3]))).multiplyScalar(q);c=b[4].replace(/^\\s+/,\n"").replace(/\\s+/g," ").split(" ");var p=Math.abs(c[0]),w=(new $3Dmol.Vector3(parseFloat(c[1]),parseFloat(c[2]),parseFloat(c[3]))).multiplyScalar(q);c=b[5].replace(/^\\s+/,"").replace(/\\s+/g," ").split(" ");var g=Math.abs(c[0]);c=(new $3Dmol.Vector3(parseFloat(c[1]),parseFloat(c[2]),parseFloat(c[3]))).multiplyScalar(q);this.size={x:l,y:p,z:g};this.unit=new $3Dmol.Vector3(t.x,w.y,c.z);if(0!=t.y||0!=t.z||0!=w.x||0!=w.z||0!=c.x||0!=c.y)this.matrix=new $3Dmol.Matrix4(t.x,w.x,c.x,0,t.y,w.y,c.y,0,t.z,w.z,\nc.z,0,0,0,0,1),this.matrix=this.matrix.multiplyMatrices(this.matrix,(new $3Dmol.Matrix4).makeTranslation(f.x,f.y,f.z)),this.origin=new $3Dmol.Vector3(0,0,0),this.unit=new $3Dmol.Vector3(1,1,1);f=6;0>d&&f++;b=b.splice(e+f).join(" ");b=b.replace(/^\\s+/,"");b=b.split(/[\\s\\r]+/);this.data=new Float32Array(b)}};\n$3Dmol.VolumeData.prototype.ccp4=function(b){var c;b=new Int8Array(b);var d=new Int32Array(b.buffer,0,56);var e=new Float32Array(b.buffer,0,56);var f=new DataView(b.buffer);String.fromCharCode(f.getUint8(208),f.getUint8(209),f.getUint8(210),f.getUint8(211));var q=[f.getUint8(212),f.getUint8(213)];if(17===q[0]&&17===q[1])for(q=b.byteLength,c=0;c<q;c+=4)f.setFloat32(c,f.getFloat32(c),!0);f=d[0];q=d[1];var l=d[2];c=d[4];var t=d[5];var p=d[6];var w=d[7];var g=d[8];var h=d[9];var n=e[10];var y=e[11];var m=\ne[12];var x=e[13];var u=e[14];var M=e[15];var O=d[16];var B=d[17];var S=d[18];d=d[23];var H=e[49];var z=e[50];e=e[51];n=[n,0,0];y=[y*Math.cos(Math.PI/180*M),y*Math.sin(Math.PI/180*M),0];x=[m*Math.cos(Math.PI/180*u),m*(Math.cos(Math.PI/180*x)-Math.cos(Math.PI/180*M)*Math.cos(Math.PI/180*u))/Math.sin(Math.PI/180*M),0];x[2]=Math.sqrt(m*m*Math.sin(Math.PI/180*u)*Math.sin(Math.PI/180*u)-x[1]*x[1]);m=[0,n,y,x];w=[0,w,g,h];O=[0,O,B,S];this.matrix=new $3Dmol.Matrix4;this.matrix.set(m[O[1]][0]/w[O[1]],m[O[2]][0]/\nw[O[2]],m[O[3]][0]/w[O[3]],0,m[O[1]][1]/w[O[1]],m[O[2]][1]/w[O[2]],m[O[3]][1]/w[O[3]],0,m[O[1]][2]/w[O[1]],m[O[2]][2]/w[O[2]],m[O[3]][2]/w[O[3]],0,0,0,0,1);this.matrix=this.matrix.multiplyMatrices(this.matrix,(new $3Dmol.Matrix4).makeTranslation(c+H,t+z,p+e));this.origin=new $3Dmol.Vector3(0,0,0);this.unit=new $3Dmol.Vector3(1,1,1);this.size={x:f,y:q,z:l};b=new Float32Array(b.buffer,1024+d);this.data=new Float32Array(f*q*l);for(c=0;c<f;c++)for(t=0;t<q;t++)for(p=0;p<l;p++)this.data[(c*q+t)*l+p]=b[(p*\nq+t)*f+c]};$3Dmol.VolumeData.prototype.ccp4.isbinary=!0;\n$3Dmol.workerString=function(){self.onmessage=function(b){b=b.data;var c=b.type;if(0>c)self.atomData=b.atoms,self.volume=b.volume,self.ps=new ProteinSurface;else{var d=self.ps;d.initparm(b.expandedExtent,1==c?!1:!0,self.volume);d.fillvoxels(self.atomData,b.extendedAtoms);d.buildboundary();if(4===c||2===c)d.fastdistancemap(),d.boundingatom(!1),d.fillvoxelswaals(self.atomData,b.extendedAtoms);d.marchingcube(c);b=d.getFacesAndVertices(b.atomsToShow);self.postMessage(b)}}}.toString().replace(/(^.*?\\{|\\}$)/g,\n"");$3Dmol.workerString+="; var ProteinSurface="+$3Dmol.ProteinSurface.toString().replace(/[a-zA-Z_$]{1}[0-9a-zA-Z_$]*.MarchingCube./g,"MarchingCube.");$3Dmol.workerString+=",MarchingCube=("+$3Dmol.MarchingCubeInitializer.toString()+")();";$3Dmol.SurfaceWorker=window.URL?window.URL.createObjectURL(new Blob([$3Dmol.workerString],{type:"text/javascript"})):{postMessage:function(){}};$3Dmol.workerString=$3Dmol.workerString;$3Dmol.SurfaceWorker=$3Dmol.SurfaceWorker;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function("return this")() || (1, eval)("this");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXNoX2Jpby8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.3.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2018-01-20T17:24Z\n */\n( function( global, factory ) {\n\n\t"use strict";\n\n\tif ( typeof module === "object" && typeof module.exports === "object" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require("jquery")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( "jQuery requires a window with a document" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n"use strict";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns "function" for HTML <object> elements\n      // (i.e., `typeof document.createElement( "object" ) === "function"`).\n      // We don\'t want to classify *any* DOM node as a function.\n      return typeof obj === "function" && typeof obj.nodeType !== "number";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, doc, node ) {\n\t\tdoc = doc || document;\n\n\t\tvar i,\n\t\t\tscript = doc.createElement( "script" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\t\t\t\tif ( node[ i ] ) {\n\t\t\t\t\tscript[ i ] = node[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + "";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === "object" || typeof obj === "function" ?\n\t\tclass2type[ toString.call( obj ) ] || "object" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = "3.3.1",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor \'enhanced\'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array\'s method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === "boolean" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== "object" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we\'re merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don\'t bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: "jQuery" + ( version + Math.random() ).replace( /\\D/g, "" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== "[object Object]" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, "constructor" ) && proto.constructor;\n\t\treturn typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t"" :\n\t\t\t( text + "" ).replace( rtrim, "" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === "string" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === "function" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),\nfunction( i, name ) {\n\tclass2type[ "[object " + name + "]" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn\'t used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && "length" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === "array" || length === 0 ||\n\t\ttypeof length === "number" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = "sizzle" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it\'s faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = "(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = "\\\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +\n\t\t// Operator (capture 2)\n\t\t"*([*^$|!~]?=)" + whitespace +\n\t\t// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"\n\t\t"*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|(" + identifier + "))|)" + whitespace +\n\t\t"*\\\\]",\n\n\tpseudos = ":(" + identifier + ")(?:\\\\((" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t"(\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|" +\n\t\t// 2. simple (capture 6)\n\t\t"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + attributes + ")*)|" +\n\t\t// 3. anything else (capture 2)\n\t\t".*" +\n\t\t")\\\\)|)",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + "+", "g" ),\n\trtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + whitespace + "+$", "g" ),\n\n\trcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),\n\trcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),\n\n\trattributeQuotes = new RegExp( "=" + whitespace + "*([^\\\\]\'\\"]*?)" + whitespace + "*\\\\]", "g" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( "^" + identifier + "$" ),\n\n\tmatchExpr = {\n\t\t"ID": new RegExp( "^#(" + identifier + ")" ),\n\t\t"CLASS": new RegExp( "^\\\\.(" + identifier + ")" ),\n\t\t"TAG": new RegExp( "^(" + identifier + "|[*])" ),\n\t\t"ATTR": new RegExp( "^" + attributes ),\n\t\t"PSEUDO": new RegExp( "^" + pseudos ),\n\t\t"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + whitespace +\n\t\t\t"*(even|odd|(([+-]|)(\\\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +\n\t\t\t"*(\\\\d+)|))" + whitespace + "*\\\\)|)", "i" ),\n\t\t"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" +\n\t\t\twhitespace + "*((?:-\\\\d)?\\\\d*)" + whitespace + "*\\\\)|)(?=[^-]|$)", "i" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( "\\\\\\\\([\\\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = "0x" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +"0x"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === "\\0" ) {\n\t\t\t\treturn "\\uFFFD";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + "\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn "\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a "Permission Denied"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && ("form" in elem || "label" in elem);\n\t\t},\n\t\t{ dir: "parentNode", next: "legend" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can\'t trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== "string" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a "get*By*" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don\'t exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + " " ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== "object" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( "id" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( "id", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = "#" + nid + " " + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( "," );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( "id" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, "$1" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + " " ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + " " ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement("fieldset");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split("|"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === "input" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === "input" || name === "button") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( "form" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a "form" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( "label" in elem ) {\n\t\t\t\t\tif ( "label" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can\'t be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn\'t\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( "label" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== "undefined" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn\'t yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== "HTML" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( "unload", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( "onunload", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = "i";\n\t\treturn !el.getAttribute("className");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName("*") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment("") );\n\t\treturn !el.getElementsByTagName("*").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don\'t pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter["ID"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute("id") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find["ID"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== "undefined" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter["ID"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== "undefined" &&\n\t\t\t\t\telem.getAttributeNode("id");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find["ID"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== "undefined" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode("id");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode("id");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find["TAG"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== "undefined" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don\'t have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === "*" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE\'s treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = "<a id=\'" + expando + "\'></a>" +\n\t\t\t\t"<select id=\'" + expando + "-\\r\\\\\' msallowcapture=\'\'>" +\n\t\t\t\t"<option selected=\'\'></option></select>";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but "safe" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll("[msallowcapture^=\'\']").length ) {\n\t\t\t\trbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\'\'|\\"\\")" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and "value" are not treated correctly\n\t\t\tif ( !el.querySelectorAll("[selected]").length ) {\n\t\t\t\trbuggyQSA.push( "\\\\[" + whitespace + "*(?:value|" + booleans + ")" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {\n\t\t\t\trbuggyQSA.push("~=");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(":checked").length ) {\n\t\t\t\trbuggyQSA.push(":checked");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {\n\t\t\t\trbuggyQSA.push(".#.+[+~]");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = "<a href=\'\' disabled=\'disabled\'></a>" +\n\t\t\t\t"<select disabled=\'disabled\'><option/></select>";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement("input");\n\t\t\tinput.setAttribute( "type", "hidden" );\n\t\t\tel.appendChild( input ).setAttribute( "name", "D" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll("[name=d]").length ) {\n\t\t\t\trbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(":enabled").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( ":enabled", ":disabled" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE\'s :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(":disabled").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( ":enabled", ":disabled" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll("*,:x");\n\t\t\trbuggyQSA.push(",.*:");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it\'s possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, "*" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, "[s!=\'\']:x" );\n\t\t\trbuggyMatches.push( "!=", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, "=\'$1\']" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + " " ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9\'s matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don\'t get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + "").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( "Syntax error, unrecognized expression: " + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = "",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === "string" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t">": { dir: "parentNode", first: true },\n\t\t" ": { dir: "parentNode" },\n\t\t"+": { dir: "previousSibling", first: true },\n\t\t"~": { dir: "previousSibling" }\n\t},\n\n\tpreFilter: {\n\t\t"ATTR": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === "~=" ) {\n\t\t\t\tmatch[3] = " " + match[3] + " ";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t"CHILD": function( match ) {\n\t\t\t/* matches from matchExpr["CHILD"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === "nth" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t"PSEUDO": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr["CHILD"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || "";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t"TAG": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === "*" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t"CLASS": function( className ) {\n\t\t\tvar pattern = classCache[ className + " " ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );\n\t\t\t\t});\n\t\t},\n\n\t\t"ATTR": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === "!=";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += "";\n\n\t\t\t\treturn operator === "=" ? result === check :\n\t\t\t\t\toperator === "!=" ? result !== check :\n\t\t\t\t\toperator === "^=" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === "*=" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === "$=" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t"CHILD": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== "nth",\n\t\t\t\tforward = type.slice( -4 ) !== "last",\n\t\t\t\tofType = what === "of-type";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? "nextSibling" : "previousSibling",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven\'t yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === "only" && !start && "nextSibling";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t"PSEUDO": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( "unsupported pseudo: " + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, "", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t"not": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, "$1" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don\'t keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t"has": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t"contains": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// "Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element\'s language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by "-".\n\t\t// The matching of C against the element\'s language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name."\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t"lang": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || "") ) {\n\t\t\t\tSizzle.error( "unsupported lang: " + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t"target": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t"root": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t"focus": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t"enabled": createDisabledPseudo( false ),\n\t\t"disabled": createDisabledPseudo( true ),\n\n\t\t"checked": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);\n\t\t},\n\n\t\t"selected": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t"empty": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t"parent": function( elem ) {\n\t\t\treturn !Expr.pseudos["empty"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t"header": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t"input": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t"button": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === "input" && elem.type === "button" || name === "button";\n\t\t},\n\n\t\t"text": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === "input" &&\n\t\t\t\telem.type === "text" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"\n\t\t\t\t( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t"first": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t"last": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t"even": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t"odd": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos["nth"] = Expr.pseudos["eq"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + " " ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don\'t consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, " " )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we\'re just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = "";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === "parentNode",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can\'t set arbitrary data on XML nodes, so they don\'t benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we\'re done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[" "],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })\n\t\t\t\t\t).replace( rtrim, "$1" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = "0",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find["TAG"]( "*", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn\'t visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a "00" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + " " ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle\'s compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === "function" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split("").sort( sortOrder ).join("") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren\'t passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement("fieldset") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property "interpolation"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = "<a href=\'#\'></a>";\n\treturn el.firstChild.getAttribute("href") === "#" ;\n}) ) {\n\taddHandle( "type|href|height|width", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute("value")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = "<input/>";\n\tel.firstChild.setAttribute( "value", "" );\n\treturn el.firstChild.getAttribute( "value" ) === "";\n}) ) {\n\taddHandle( "value", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === "input" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute("disabled") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ ":" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== "string" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = ":not(" + expr + ")";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== "string" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $("p:first").is("p:last") won\'t return true for a doc with two "p".\n\t\t\ttypeof selector === "string" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(""), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === "string" ) {\n\t\t\tif ( selector[ 0 ] === "<" &&\n\t\t\t\tselector[ selector.length - 1 ] === ">" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== "string" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there\'s no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don\'t pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === "string" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, "parentNode" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, "parentNode", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, "nextSibling" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, "previousSibling" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, "nextSibling" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, "previousSibling" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, "nextSibling", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, "previousSibling", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n        if ( nodeName( elem, "iframe" ) ) {\n            return elem.contentDocument;\n        }\n\n        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n        // Treat the template element as a regular one in browsers that\n        // don\'t support it.\n        if ( nodeName( elem, "template" ) ) {\n            elem = elem.content || elem;\n        }\n\n        return jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== "Until" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === "string" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * "fired" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest "memorized"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === "string" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn\'t re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we\'re done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we\'re done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = "";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== "string" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = "";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = "";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn\'t unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ "notify", "progress", jQuery.Callbacks( "memory" ),\n\t\t\t\t\tjQuery.Callbacks( "memory" ), 2 ],\n\t\t\t\t[ "resolve", "done", jQuery.Callbacks( "once memory" ),\n\t\t\t\t\tjQuery.Callbacks( "once memory" ), 0, "resolved" ],\n\t\t\t\t[ "reject", "fail", jQuery.Callbacks( "once memory" ),\n\t\t\t\t\tjQuery.Callbacks( "once memory" ), 1, "rejected" ]\n\t\t\t],\n\t\t\tstate = "pending",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t"catch": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + "With" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( "Thenable self-resolution" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === "object" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === "function" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it\'s otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = "resolved" (i.e., fulfilled)\n\t\t\t\t\t\t// state = "rejected"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + "With" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === "pending" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we\'re already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( "DOMContentLoaded", completed );\n\twindow.removeEventListener( "load", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals "interactive" too soon\nif ( document.readyState === "complete" ||\n\t( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( "DOMContentLoaded", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( "load", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it\'s a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === "object" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === "string" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the "read" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === "string" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the "set" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there\'s no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module\'s maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support "private" and "user" data.\n//\t4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === "true" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === "false" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === "null" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn\'t change the string\n\tif ( data === +data + "" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === "string" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn\'t changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( "data-" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, "hasDataAttrs", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === "object" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to "discover" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn\'t exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || "fx" ) + "queue";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || "fx";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === "inprogress" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === "fx" ) {\n\t\t\t\tqueue.unshift( "inprogress" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + "queueHooks";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( "once memory" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + "queue", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== "string" ) {\n\t\t\tdata = type;\n\t\t\ttype = "fx";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === "fx" && queue[ 0 ] !== "inprogress" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || "fx", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== "string" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || "fx";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + "queueHooks" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );\n\n\nvar cssExpand = [ "Top", "Right", "Bottom", "Left" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === "none" ||\n\t\t\telem.style.display === "" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, "display" ) === "none";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, "" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, "display" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === "none" ) {\n\t\tdisplay = "block";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === "none" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, "display" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = "";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== "none" ) {\n\t\t\t\tvalues[ index ] = "none";\n\n\t\t\t\t// Remember what we\'re overwriting\n\t\t\t\tdataPriv.set( elem, "display", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === "boolean" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, "<select multiple=\'multiple\'>", "</select>" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, "<table>", "</table>" ],\n\tcol: [ 2, "<table><colgroup>", "</colgroup></table>" ],\n\ttr: [ 2, "<table><tbody>", "</tbody></table>" ],\n\ttd: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],\n\n\t_default: [ 0, "", "" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== "undefined" ) {\n\t\tret = context.getElementsByTagName( tag || "*" );\n\n\t} else if ( typeof context.querySelectorAll !== "undefined" ) {\n\t\tret = context.querySelectorAll( tag || "*" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t"globalEval",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], "globalEval" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === "object" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( "div" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = "";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = "";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), "script" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || "" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( "div" ) ),\n\t\tinput = document.createElement( "input" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( "type", "radio" );\n\tinput.setAttribute( "checked", "checked" );\n\tinput.setAttribute( "name", "t" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn\'t clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = "<textarea>x</textarea>";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === "object" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== "string" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === "string" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards\' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don\'t attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element\'s event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || "" ).match( rnothtmlwhite ) || [ "" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( "." )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we\'re the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element\'s handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || "" ).match( rnothtmlwhite ) || [ "" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( "(^|\\\\.)" + namespaces.join( "\\\\.(?:.*\\\\.|)" ) + "(\\\\.|$)" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === "**" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it\'s no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, "handle events" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === "click" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don\'t check non-elements (#13208)\n\t\t\t\t// Don\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don\'t conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + " ";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: "focusin"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: "focusout"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don\'t fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn nodeName( event.target, "a" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn\'t alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This "if" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the \'new\' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn\'t have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t"char": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: "mouseover",\n\tmouseleave: "mouseout",\n\tpointerenter: "pointerover",\n\tpointerleave: "pointerout"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + "." + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === "object" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === "function" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked="checked" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, "table" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {\n\n\t\treturn jQuery( elem ).children( "tbody" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( "type" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === "input" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === "input" || nodeName === "textarea" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can\'t cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === "string" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, "script" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, "script" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || "" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, "globalEval" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won\'t run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, "script" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, "<$1></$2>" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, "script" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, "script" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove\'s overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = "";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === "string" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: "append",\n\tprependTo: "prepend",\n\tinsertBefore: "before",\n\tinsertAfter: "after",\n\treplaceAll: "replaceWith"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they\'re executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = "position:absolute;left:-11111px;width:60px;" +\n\t\t\t"margin-top:1px;padding:0;border:0";\n\t\tdiv.style.cssText =\n\t\t\t"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +\n\t\t\t"margin:auto;border:1px;padding:1px;" +\n\t\t\t"width:60%;top:1%";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== "1%";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn\'t\n\t\tdiv.style.right = "60%";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\tdiv.style.position = "absolute";\n\t\tscrollboxSizeVal = div.offsetWidth === 36 || "absolute";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn\'t be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableMarginLeftVal,\n\t\tcontainer = document.createElement( "div" ),\n\t\tdiv = document.createElement( "div" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = "content-box";\n\tdiv.cloneNode( true ).style.backgroundClip = "";\n\tsupport.clearCloneStyle = div.style.backgroundClip === "content-box";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css(\'filter\') (IE 9 only, #12537)\n\t//   .css(\'--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the "awesome hack by Dean Edwards"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + "" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we\'ll check on the first run if it\'s really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it\'s not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except "table", "table-cell", or "table-caption"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: "absolute", visibility: "hidden", display: "block" },\n\tcssNormalTransform = {\n\t\tletterSpacing: "0",\n\t\tfontWeight: "400"\n\t},\n\n\tcssPrefixes = [ "Webkit", "Moz", "ms" ],\n\temptyStyle = document.createElement( "div" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a property mapped along what jQuery.cssProps suggests or to\n// a vendor prefixed property.\nfunction finalPropName( name ) {\n\tvar ret = jQuery.cssProps[ name ];\n\tif ( !ret ) {\n\t\tret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;\n\t}\n\treturn ret;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined "subtract", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === "width" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? "border" : "content" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === "margin" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we\'re seeking "padding" or "border" or "margin"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );\n\n\t\t\t// For "border" or "margin", add border\n\t\t\tif ( box !== "padding" ) {\n\t\t\t\tdelta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we\'re seeking "content" or\n\t\t// "padding" or "margin"\n\t\t} else {\n\n\t\t\t// For "content", subtract padding\n\t\t\tif ( box === "content" ) {\n\t\t\t\tdelta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For "content" or "padding", subtract border\n\t\t\tif ( box !== "margin" ) {\n\t\t\t\tdelta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\t\t) );\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\t\tval = curCSS( elem, dimension, styles ),\n\t\tisBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",\n\t\tvalueIsBorderBox = isBorderBox;\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = "auto";\n\t}\n\n\t// Check for style in case a browser which returns unreliable values\n\t// for getComputedStyle silently falls back to the reliable elem.style\n\tvalueIsBorderBox = valueIsBorderBox &&\n\t\t( support.boxSizingReliable() || val === elem.style[ dimension ] );\n\n\t// Fall back to offsetWidth/offsetHeight when value is "auto"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\t// Support: Android <=4.1 - 4.3 only\n\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\tif ( val === "auto" ||\n\t\t!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {\n\n\t\tval = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];\n\n\t\t// offsetWidth/offsetHeight provide border-box values\n\t\tvalueIsBorderBox = true;\n\t}\n\n\t// Normalize "" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element\'s box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? "border" : "content" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + "px";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, "opacity" );\n\t\t\t\t\treturn ret === "" ? "1" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don\'t automatically add "px" to these possibly-unitless properties\n\tcssNumber: {\n\t\t"animationIterationCount": true,\n\t\t"columnCount": true,\n\t\t"fillOpacity": true,\n\t\t"flexGrow": true,\n\t\t"flexShrink": true,\n\t\t"fontWeight": true,\n\t\t"lineHeight": true,\n\t\t"opacity": true,\n\t\t"order": true,\n\t\t"orphans": true,\n\t\t"widows": true,\n\t\t"zIndex": true,\n\t\t"zoom": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don\'t set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we\'re working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we\'re working with the right name. We don\'t\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we\'re setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert "+=" or "-=" to relative numbers (#7345)\n\t\t\tif ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = "number";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren\'t set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === "number" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone\'s values\n\t\t\tif ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {\n\t\t\t\tstyle[ name ] = "inherit";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( "set" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && "get" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we\'re working with the right name. We don\'t\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && "get" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert "normal" to computed value\n\t\tif ( val === "normal" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === "" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ "height", "width" ], function( i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, "display" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\t\t\t\tisBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",\n\t\t\t\tsubtract = extra && boxModelAdjustment(\n\t\t\t\t\telem,\n\t\t\t\t\tdimension,\n\t\t\t\t\textra,\n\t\t\t\t\tisBorderBox,\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && support.scrollboxSize() === styles.position ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, "border", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || "px" ) !== "px" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, "marginLeft" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + "px";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: "",\n\tpadding: "",\n\tborder: "Width"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === "string" ? value.split( " " ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== "margin" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as "10px" are parsed to Float;\n\t\t\t// complex values such as "rotate(1rad)" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, "" );\n\n\t\t\t// Empty strings, null, undefined and "auto" are converted to 0.\n\t\t\treturn !result || result === "auto" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: "swing"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ "margin" + which ] = attrs[ "padding" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We\'re done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = "width" in props || "height" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, "fxshow" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, "fx" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, "fx" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === "toggle";\n\t\t\tif ( value === ( hidden ? "hide" : "show" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a "show" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict "overflow" and "display" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, "display" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, "display" );\n\t\tif ( display === "none" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, "display" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, "float" ) === "none" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === "none" ? "" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = "inline-block";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = "hidden";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( "hidden" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` "reverses"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a "hide" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, "fxshow" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && "expand" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won\'t overwrite existing keys.\n\t\t\t// Reusing \'index\' because we have the correct "name"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don\'t match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won\'t allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there\'s more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t"*": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ "*" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== "number" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> "fx"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = "fx";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won\'t be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, "finish" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== "string" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || "fx", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + "queueHooks",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn\'t forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || "fx";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + "queue" ],\n\t\t\t\thooks = data[ type + "queueHooks" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === "boolean" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( "show" ),\n\tslideUp: genFx( "hide" ),\n\tslideToggle: genFx( "toggle" ),\n\tfadeIn: { opacity: "show" },\n\tfadeOut: { opacity: "hide" },\n\tfadeToggle: { opacity: "toggle" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || "fx";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( "input" ),\n\t\tselect = document.createElement( "select" ),\n\t\topt = select.appendChild( document.createElement( "option" ) );\n\n\tinput.type = "checkbox";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be "on"\n\tsupport.checkOn = input.value !== "";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( "input" );\n\tinput.value = "t";\n\tinput.type = "radio";\n\tsupport.radioValue = input.value === "t";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don\'t get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === "undefined" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && "set" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + "" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === "radio" &&\n\t\t\t\t\tnodeName( elem, "input" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( "type", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don\'t get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && "set" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn\'t always return the\n\t\t\t\t// correct value when it hasn\'t been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, "tabindex" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t"for": "htmlFor",\n\t\t"class": "className"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule "no-unused-expressions" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: "off" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: "off" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t"tabIndex",\n\t"readOnly",\n\t"maxLength",\n\t"cellSpacing",\n\t"cellPadding",\n\t"rowSpan",\n\t"colSpan",\n\t"useMap",\n\t"frameBorder",\n\t"contentEditable"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( " " );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( "class" ) || "";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === "string" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( " " + clazz + " " ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + " ";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( "class", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( "class", "" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( " " + clazz + " " ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( " " + clazz + " ", " " );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( "class", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === "string" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === "boolean" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === "boolean" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, "__className__", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we\'re passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( "class",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t"" :\n\t\t\t\t\t\tdataPriv.get( this, "__className__" ) || ""\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = " " + selector + " ";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t"get" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, "value" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === "string" ) {\n\t\t\t\t\treturn ret.replace( rreturn, "" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? "" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as ""; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = "";\n\n\t\t\t} else if ( typeof val === "number" ) {\n\t\t\t\tval += "";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? "" : value + "";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, "value" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === "select-one",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn\'t update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don\'t return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, "optgroup" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don\'t need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ "radio", "checkbox" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( "value" ) === null ? "on" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = "onfocusin" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, "type" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don\'t do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we\'re not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( "." ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( "." );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( ":" ) < 0 && "on" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === "object" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( "." );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( "(^|\\\\.)" + namespaces.join( "\\\\.(?:.*\\\\.|)" ) + "(\\\\.|$)" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, "handle" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don\'t do default actions on window, that\'s where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don\'t re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn\'t have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = Date.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== "string" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {\n\t\tjQuery.error( "Invalid XML: " + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === "object" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + "=" +\n\t\t\t\tencodeURIComponent( value == null ? "" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the "old" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( "&" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for "elements" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, "elements" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( ":disabled" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( ":disabled" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, "\\r\\n" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, "\\r\\n" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol "*" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to "*" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol "*" can be used\n\t * 3) selection will start with transport dataType and THEN go to "*" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = "*/".concat( "*" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( "a" );\n\toriginAnchor.href = location.href;\n\n// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to "*"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== "string" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = "*";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === "+" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || "*";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === "string" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );\n}\n\n// A special extend for ajax options\n// that takes "flat" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === "*" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );\n\t\t}\n\t}\n\n\t// Check if we\'re dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There\'s only work to do if current dataType is non-auto\n\t\t\tif ( current === "*" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== "*" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + " " + current ] || converters[ "* " + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( " " );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + " " + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ "* " + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: "parsererror",\n\t\t\t\t\t\t\t\terror: conv ? e : "No conversion from " + prev + " to " + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: "success", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: "GET",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: "application/x-www-form-urlencoded; charset=UTF-8",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t"*": allTypes,\n\t\t\ttext: "text/plain",\n\t\t\thtml: "text/html",\n\t\t\txml: "application/xml, text/xml",\n\t\t\tjson: "application/json, text/javascript"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: "responseXML",\n\t\t\ttext: "responseText",\n\t\t\tjson: "responseJSON"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall "*") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t"* text": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t"text html": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t"text json": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t"text xml": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn\'t be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn\'t be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === "object" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( "once memory" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = "canceled",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + "" )\n\t\t\t.replace( rprotocol, location.protocol + "//" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];\n\n\t\t// A cross-domain request is in order when the origin doesn\'t match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( "a" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor\'s host property isn\'t correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + "//" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== "string" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don\'t fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( "ajaxStart" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we\'re toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, "" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === "string" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it\'s not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, "$1" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change \'%20\' to \'+\' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, "+" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( "Content-Type", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t"Accept",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :\n\t\t\t\ts.accepts[ "*" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = "abort";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, "No Transport" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( "timeout" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || "";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( "Last-Modified" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( "etag" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === "HEAD" ) {\n\t\t\t\t\tstatusText = "nocontent";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = "notmodified";\n\n\t\t\t\t// If we have data, let\'s convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = "error";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + "";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( "ajaxStop" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, "json" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, "script" );\n\t}\n} );\n\njQuery.each( [ "get", "post" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: "GET",\n\t\tdataType: "script",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t"throws": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( "body" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won\'t change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {\n\t\t\t\t\theaders[ "X-Requested-With" ] = "XMLHttpRequest";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === "abort" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === "error" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== "number" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, "error" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || "text" ) !== "text"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== "string" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( "abort" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn\'t been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: "text/javascript, application/javascript, " +\n\t\t\t"application/ecmascript, application/x-ecmascript"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t"text script": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache\'s special case and crossDomain\njQuery.ajaxPrefilter( "script", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = "GET";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( "script", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( "<script>" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t"load error",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === "error" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: "callback",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t"url" :\n\t\t\ttypeof s.data === "string" &&\n\t\t\t\t( s.contentType || "" )\n\t\t\t\t\t.indexOf( "application/x-www-form-urlencoded" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && "data"\n\t\t);\n\n\t// Handle iff the expected data type is "jsonp" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ "script json" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + " was not called" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = "json";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn\'t exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn\'t screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn "script";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( "" ).body;\n\tbody.innerHTML = "<form></form><form></form>";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument "data" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== "string" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === "boolean" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( "" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document\'s URL (gh-2965)\n\t\t\tbase = context.createElement( "base" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( " " );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it\'s a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it\'s the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === "object" ) {\n\t\ttype = "POST";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If "type" variable is undefined, then "GET" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || "GET",\n\t\t\tdataType: "html",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE \'Permission Denied\' errors\n\t\t\t\tjQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets "data", "status", "jqXHR"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets "jqXHR", "status", "error"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t"ajaxStart",\n\t"ajaxStop",\n\t"ajaxComplete",\n\t"ajaxError",\n\t"ajaxSuccess",\n\t"ajaxSend"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, "position" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === "static" ) {\n\t\t\telem.style.position = "relative";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, "top" );\n\t\tcurCSSLeft = jQuery.css( elem, "left" );\n\t\tcalculatePosition = ( position === "absolute" || position === "fixed" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( "using" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element\'s border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element\'s margin box to its offset parent\'s padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, "position" ) === "fixed" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, "position" ) === "static" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {\n\tvar top = "pageYOffset" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ "top", "left" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + "px" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: "height", Width: "width" }, function( name, type ) {\n\tjQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( "outer" ) === 0 ?\n\t\t\t\t\t\telem[ "inner" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ "client" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ "scroll" + name ], doc[ "scroll" + name ],\n\t\t\t\t\t\telem.body[ "offset" + name ], doc[ "offset" + name ],\n\t\t\t\t\t\tdoc[ "client" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +\n\t"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +\n\t"change select submit keydown keypress keyup contextmenu" ).split( " " ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, "**" ) :\n\t\t\tthis.off( types, selector || "**", fn );\n\t}\n} );\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === "string" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === "number" || type === "string" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives ("")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals ("0x...")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n')}]);
